<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>竹里馆</title>
  
  
  <link href="https://lnxpgn.github.io/atom.xml" rel="self"/>
  <link href="https://pubsubhubbub.appspot.com/" rel="hub"/>
  <link href="https://lnxpgn.github.io/"/>
  <updated>2025-09-07T07:59:46.131Z</updated>
  <id>https://lnxpgn.github.io/</id>
  
  <author>
    <name>lnxpgn</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Weekly - issue 48</title>
    <link href="https://lnxpgn.github.io/2025/09/07/issue-48-202509-1/"/>
    <id>https://lnxpgn.github.io/2025/09/07/issue-48-202509-1/</id>
    <published>2025-09-06T16:00:00.000Z</published>
    <updated>2025-09-07T07:59:46.131Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;Hive-REGEXP-EXTRACT-Returns-Empty-String-Not-NULL-When-No-Match&quot;&gt;&lt;a href=&quot;#Hive-REGEXP-EXTRACT-Returns-Empty-String-Not-NULL-When-No-Match&quot; class=&quot;headerlink&quot; title=&quot;Hive REGEXP_EXTRACT Returns Empty String, Not NULL, When No Match&quot;&gt;&lt;/a&gt;Hive REGEXP_EXTRACT Returns Empty String, Not NULL, When No Match&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;: jdbc:hive2:&lt;span class=&quot;token comment&quot;&gt;/// (car)&gt; select regexp_extract(&#39;220 km/h&#39;, &#39;&#92;&#92;b(&#92;&#92;d+)&#92;&#92;b&#39;, 1) as speed;&lt;/span&gt;
OK
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; speed  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;220&lt;/span&gt;    &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;
&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;: jdbc:hive2:&lt;span class=&quot;token comment&quot;&gt;/// (car)&gt; select regexp_extract(&#39;-&#39;, &#39;&#92;&#92;b(&#92;&#92;d+)&#92;&#92;b&#39;, 1) as speed;&lt;/span&gt;
OK
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; speed  &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;        &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt;
&lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;token comment&quot;&gt;--------+&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Many sources claim the return value is NULL, but it’s actually an empty string.&lt;/p&gt;
&lt;h3 id=&quot;The-Trust-Quotient-TQ&quot;&gt;&lt;a href=&quot;#The-Trust-Quotient-TQ&quot; class=&quot;headerlink&quot; title=&quot;The Trust Quotient (TQ)&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kk.org/thetechnium/the-trust-quotient-tq/&quot;&gt;The Trust Quotient (TQ)&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;TQ—aka the Trust Quotient—is gonna be a big deal for AI. It’ll measure how reliable an AI is, whether it takes responsibility, and how well it fixes mistakes. And get this: in the future, when humans and AI work together, trust might matter even more than raw intelligence. TQ could end up deciding whether an AI gets trusted or gets access to key services.&lt;/p&gt;
&lt;h3 id=&quot;Faster-Rust-builds-on-Mac&quot;&gt;&lt;a href=&quot;#Faster-Rust-builds-on-Mac&quot; class=&quot;headerlink&quot; title=&quot;Faster Rust builds on Mac&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://nnethercote.github.io/2025/09/04/faster-rust-builds-on-mac.html&quot;&gt;Faster Rust builds on Mac&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;So, on Mac, when you build Rust projects (or any compiled code), sometimes the build scripts take way too long.&lt;/p&gt;
&lt;p&gt;The author noticed this on their Mac, and it was weird because the same scripts run super fast on Linux. On Mac, each one took 0.5 to 3+ seconds, and each one was slower than the last. That doesn’t make sense — they’re just checking things like the Rust version.&lt;/p&gt;
&lt;p&gt;After some digging, it turns out macOS has a security feature called XProtect. It scans every executable (like a build script) for malware — especially when it’s first launched or when the file changes.&lt;/p&gt;
&lt;p&gt;So, every time a build script runs, macOS checks it for malware. That’s slow, especially if you have many scripts running one after another. It’s like having a security guard check every single file you create — even if it’s just a simple “check version” script.&lt;/p&gt;
&lt;p&gt;The fix? You can tell macOS not to do this scan by adding your terminal (like Terminal or iTerm) to the list of &lt;code&gt;developer tools&lt;/code&gt; in System Settings. After that, the build scripts run in under 0.1 seconds — a huge improvement.&lt;/p&gt;
&lt;p&gt;Now, here’s the thing: this only helps if you’re building or testing things a lot.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;If you just edit and rebuild code (like &lt;code&gt;cargo run&lt;/code&gt;), you’ll pay the delay every time.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;But if you run &lt;code&gt;cargo test&lt;/code&gt;, it’s a huge win — especially since some tests create thousands of tiny binaries. One test suite for the Rust compiler went from 9 minutes to 3 minutes just by disabling this scan.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The article says this is a hidden Mac behavior — most people don’t know about it. There’s a PR in Cargo (the Rust tool) that would warn users when XProtect is on, so they know it’s slowing things down. It’s a good idea because it helps users see a real performance problem they didn’t know existed.&lt;/p&gt;
&lt;p&gt;Bottom line: If you’re on Mac and you do a lot of Rust testing or building, try turning off XProtect in your terminal settings — it can make builds and tests much faster, especially for testing. Just remember: you’re disabling a security feature, so only do it if you’re okay with that trade-off.&lt;/p&gt;
&lt;p&gt;(And yeah, it’s not just Rust — any compiled language (C, C++, Go, Swift, etc.) might benefit too, if you’re compiling a lot.)&lt;/p&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="AI" scheme="https://lnxpgn.github.io/tags/AI/"/>
    
    <category term="Hive" scheme="https://lnxpgn.github.io/tags/Hive/"/>
    
    <category term="Rust" scheme="https://lnxpgn.github.io/tags/Rust/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 47</title>
    <link href="https://lnxpgn.github.io/2023/12/25/issue-47-202312-2/"/>
    <id>https://lnxpgn.github.io/2023/12/25/issue-47-202312-2/</id>
    <published>2023-12-24T16:00:00.000Z</published>
    <updated>2023-12-24T18:02:28.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;How-to-Install-Fonts-on-Debian-Linux-12&quot;&gt;&lt;a href=&quot;#How-to-Install-Fonts-on-Debian-Linux-12&quot; class=&quot;headerlink&quot; title=&quot;How to Install Fonts on Debian Linux 12&quot;&gt;&lt;/a&gt;How to Install Fonts on Debian Linux 12&lt;/h3&gt;&lt;p&gt;The GNOME &amp;#x2F; KDE fonts manager provide a user-friendly way to manage and install fonts, we will show how to install fonts manually.&lt;/p&gt;
&lt;p&gt;For most uses, we’ll install TrueType (TTF) and OpenType (OTF) fonts.&lt;/p&gt;
&lt;p&gt;Fonts will be place into:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;/usr/local/share/fonts&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;System-Wide&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;~/.local/share/fonts&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User-Specific&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;~/.fonts&lt;/code&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;User-Specific&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The manual installation process:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Make sure the &lt;code&gt;fontconfig&lt;/code&gt; package is installed&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token builtin class-name&quot;&gt;command&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-v&lt;/span&gt; fc-cache &lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt; /dev/null &lt;span class=&quot;token operator&quot;&gt;||&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;apt-get&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;install&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-y&lt;/span&gt; fontconfig&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The commands &lt;code&gt;fc-cache&lt;/code&gt; and &lt;code&gt;fc-list&lt;/code&gt; come from the package.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Download the font&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Make sure the font files have the permission &lt;code&gt;644&lt;/code&gt; (&lt;code&gt;-rw-r--r--&lt;/code&gt;)&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;644&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;font file&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# OR&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;chmod&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;644&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;font directory&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/*&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Copy font files to the system-wide or the user-specific directory&lt;/p&gt;
&lt;p&gt;If using the user-specific font directories, they don’t exist by default, we’ll use one of them and create it:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-p&lt;/span&gt; ~/.local/share/fonts

&lt;span class=&quot;token comment&quot;&gt;# OR&lt;/span&gt;

&lt;span class=&quot;token function&quot;&gt;mkdir&lt;/span&gt; ~/.fonts&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;If the font have multiple files, we can create a subdirectory, then copy font files to it.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Build font information cache files&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# No root privileges required&lt;/span&gt;
fc-cache &lt;span class=&quot;token parameter variable&quot;&gt;-f&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;blockquote&gt;
&lt;p&gt;Normally Debian is watching these font directories and will automatically generate the cache, we don’t need to run the command.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Check the result&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;fc-list &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;font name&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;fc-list &lt;span class=&quot;token operator&quot;&gt;|&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;grep&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; dejavu&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;h3 id=&quot;First-Impressions-with-Google’s-Gemini&quot;&gt;&lt;a href=&quot;#First-Impressions-with-Google’s-Gemini&quot; class=&quot;headerlink&quot; title=&quot;First Impressions with Google’s Gemini&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://blog.roboflow.com/first-impressions-with-google-gemini/&quot;&gt;First Impressions with Google’s Gemini&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Gemini is a Large Multimodal Model (LMM) developed by Google.&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Visual Question Answering (VQA)&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ask “How many coins do I have?” in an image&lt;/p&gt;
&lt;p&gt;Pass: Gemini, LLaVA, BakLLaVA, Qwen-VL, and CogVLM&lt;/p&gt;
&lt;p&gt;Failed: GPT-4 with Vision&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask if the LMM could identify which movie was featured in an image&lt;/p&gt;
&lt;p&gt;Pass: Gemini, Qwen-VL and GPT-4 with Vision&lt;/p&gt;
&lt;p&gt;Failed: LLaVA, BakLLaVA, and CogVLM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask “What is the price of Pastrami Pizza?” in a menu&lt;/p&gt;
&lt;p&gt;Pass: Gemini, CogVLM, and GPT-4 with Vision&lt;/p&gt;
&lt;p&gt;Failed: LLaVA, BakLLaVA, and Qwen-VL&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Optical Character Recognition (OCR)&lt;/p&gt;
&lt;p&gt;Ask “Read the serial number.” in an image of a tire.&lt;/p&gt;
&lt;p&gt;Pass: Qwen-VL, CogVLM, and GPT-4 with Vision&lt;/p&gt;
&lt;p&gt;Failed: Gemini, LLaVA and BakLLaVA&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Document OCR&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ask “Read text from the picture.”&lt;/p&gt;
&lt;p&gt;Pass: Qwen-VL, CogVLM, and GPT-4 with Vision&lt;/p&gt;
&lt;p&gt;Failed: Gemini (almost correct)&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Ask “How much tax did I pay?” in a receipt image&lt;/p&gt;
&lt;p&gt;Pass: Gemini&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Object Detection&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Ask “Find the dog.” in an image&lt;/p&gt;
&lt;p&gt;Pass: Qwen-VL, CogVLM&lt;/p&gt;
&lt;p&gt;Failed: Gemini&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Look for the Christmas tree in an image&lt;/p&gt;
&lt;p&gt;Pass: Qwen-VL, CogVLM&lt;/p&gt;
&lt;p&gt;Failed: Gemini&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="AI" scheme="https://lnxpgn.github.io/tags/AI/"/>
    
    <category term="Linux" scheme="https://lnxpgn.github.io/tags/Linux/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 46</title>
    <link href="https://lnxpgn.github.io/2023/12/17/issue-46-202312-1/"/>
    <id>https://lnxpgn.github.io/2023/12/17/issue-46-202312-1/</id>
    <published>2023-12-16T16:00:00.000Z</published>
    <updated>2023-12-17T12:02:07.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;生成式-AI-是如何工作的&quot;&gt;&lt;a href=&quot;#生成式-AI-是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;生成式 AI 是如何工作的&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://step-saga-examples.pages.dev/simple-ai-01-cn/&quot;&gt;生成式 AI 是如何工作的&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;向无 AI 知识背景的读者介绍生成式 AI 是如何工作的。&lt;/p&gt;
&lt;h3 id=&quot;AI-版“神笔马良”是如何工作的&quot;&gt;&lt;a href=&quot;#AI-版“神笔马良”是如何工作的&quot; class=&quot;headerlink&quot; title=&quot;AI 版“神笔马良”是如何工作的&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://step-saga-examples.pages.dev/simple-ai-02-cn/&quot;&gt;AI 版“神笔马良”是如何工作的&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;向无 AI 知识背景的读者介绍 GPT-4V 是如何拥有“视觉”的，以及开源白板软件 &lt;a href=&quot;https://github.com/tldraw/tldraw&quot;&gt;tldraw&lt;/a&gt; 基于 GPT-4V 实现 &lt;em&gt;Make Real&lt;/em&gt; 功能的工程原理。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;用户只需要在 tldraw 的白板上快速绘制一个草稿，再点击 &lt;em&gt;Make Real&lt;/em&gt; 按钮，就能够生成一段真实的代码，对应草稿中所描述的功能。&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="AI" scheme="https://lnxpgn.github.io/tags/AI/"/>
    
  </entry>
  
  <entry>
    <title>Python Modules and Packages</title>
    <link href="https://lnxpgn.github.io/2023/12/09/python-modules-and-packages/"/>
    <id>https://lnxpgn.github.io/2023/12/09/python-modules-and-packages/</id>
    <published>2023-12-08T16:00:00.000Z</published>
    <updated>2023-12-09T10:30:22.000Z</updated>
    
    
    <summary type="html">&lt;h3 id=&quot;Modules&quot;&gt;&lt;a href=&quot;#Modules&quot; class=&quot;headerlink&quot; title=&quot;Modules&quot;&gt;&lt;/a&gt;Modules&lt;/h3&gt;&lt;p&gt;As your program gets longer, you can split it into several files for easier maintenance, you may also want to share a handy function across several programs.&lt;/p&gt;
&lt;p&gt;To support this, Python has a way to put definitions in a file, such a file is called a module, the file name is the module name with the suffix &lt;code&gt;.py&lt;/code&gt; appended.&lt;/p&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://lnxpgn.github.io/categories/Tech/"/>
    
    
    <category term="Python" scheme="https://lnxpgn.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Getting Started with Zig for Developers Experienced with Other Languages</title>
    <link href="https://lnxpgn.github.io/2023/12/03/zig/"/>
    <id>https://lnxpgn.github.io/2023/12/03/zig/</id>
    <published>2023-12-02T16:00:00.000Z</published>
    <updated>2023-12-08T09:09:50.000Z</updated>
    
    
    <summary type="html">&lt;p&gt;The content is based on &lt;a href=&quot;https://ziglang.org/documentation/master/&quot;&gt;the official Zig documentation&lt;/a&gt;.&lt;/p&gt;
&lt;h2 id=&quot;Hello-World&quot;&gt;&lt;a href=&quot;#Hello-World&quot; class=&quot;headerlink&quot; title=&quot;Hello, World&quot;&gt;&lt;/a&gt;Hello, World&lt;/h2&gt;&lt;pre class=&quot;line-numbers language-zig&quot; data-language=&quot;zig&quot;&gt;&lt;code class=&quot;language-zig&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;@import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;std&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token operator&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;token builtin-type keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; stdout &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; std&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;io&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;getStdOut&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;writer&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;try&lt;/span&gt; stdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, &amp;#123;s&amp;#125;!&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;world&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;!void&lt;/code&gt; tells the Zig compiler that the function will either return an error or a value. It is an error union, the full form is &lt;code&gt;&amp;lt;error set type&amp;gt;!&amp;lt;any data type&amp;gt;&lt;/code&gt;, combining an &lt;em&gt;Error Set Type&lt;/em&gt; (An error set is like an enum) and any other data type.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;!void&lt;/code&gt; , the error set type is not explicitly written on the left side of the &lt;code&gt;!&lt;/code&gt; operator. &lt;/p&gt;
&lt;p&gt;The &lt;a href=&quot;https://ziglang.org/documentation/master/#try&quot;&gt;try&lt;/a&gt; expression evaluates the result of &lt;code&gt;stdout.print&lt;/code&gt;. If the result is an error, then the &lt;code&gt;try&lt;/code&gt; expression will return from &lt;code&gt;main&lt;/code&gt; with the error. Otherwise, the program will continue. &lt;/p&gt;
&lt;pre class=&quot;line-numbers language-zig&quot; data-language=&quot;zig&quot;&gt;&lt;code class=&quot;language-zig&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;// top-level declarations are order-independent&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; print &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; std&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;debug&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;print&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;const&lt;/span&gt; std &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;@import&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;std&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;// std.debug.print cannot fail, so the return type is void, not !void&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;pub&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;fn&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token class-name&quot;&gt;&lt;span class=&quot;token builtin-type keyword&quot;&gt;void&lt;/span&gt;&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;
    &lt;span class=&quot;token comment&quot;&gt;// must have &quot;.&amp;#123;&amp;#125;&quot;, std.debug.print needs two arguments&lt;/span&gt;
    &lt;span class=&quot;token function&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;Hello, world&#92;n&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;</summary>
    
    
    
    <category term="Tech" scheme="https://lnxpgn.github.io/categories/Tech/"/>
    
    
    <category term="Zig" scheme="https://lnxpgn.github.io/tags/Zig/"/>
    
  </entry>
  
  <entry>
    <title>How to Deploy Python Web Applications?</title>
    <link href="https://lnxpgn.github.io/2023/11/26/how-to-deploy-python-web-applications/"/>
    <id>https://lnxpgn.github.io/2023/11/26/how-to-deploy-python-web-applications/</id>
    <published>2023-11-25T16:00:00.000Z</published>
    <updated>2023-12-08T09:30:58.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;p&gt;The deployment mainly involves these parts:&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Web applications&lt;/p&gt;
&lt;p&gt;Most of the time they are written using Python web frameworks, like Django, Flask, FastAPI.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Web servers&lt;/p&gt;
&lt;p&gt;Like Gunicorn, Uvicorn. Their major feature is to handle HTTP&amp;#x2F;HTTPS protocol.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Specifications&lt;/p&gt;
&lt;p&gt;They describe how a web server communicates with web applications.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;WSGI (Web Server Gateway Interface)&lt;/p&gt;
&lt;p&gt;It provides a standard for synchronous Python apps.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;ASGI (Asynchronous Server Gateway Interface)&lt;/p&gt;
&lt;p&gt;It provides a standard for both asynchronous and synchronous apps, with a WSGI backwards-compatibility implementation.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A TLS termination proxy&lt;/p&gt;
&lt;p&gt;In the product environment, you may need a TLS termination proxy, like Nginx, Caddy.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;A monitoring tool&lt;/p&gt;
&lt;p&gt;In the product environment, you may need a tool to make sure the web server is run on startup and restart it after failures, like Supervisor, Systemd, Docker, Kubernetes.&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Web Servers&lt;/th&gt;
&lt;th&gt;WSGI&lt;/th&gt;
&lt;th&gt;ASGI&lt;/th&gt;
&lt;th&gt;HTTP&amp;#x2F;2&lt;/th&gt;
&lt;th&gt;HTTP&amp;#x2F;3&lt;/th&gt;
&lt;th&gt;WebSocket&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Gunicorn&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache + mod_wsgi&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daphne&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hypercorn&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uvicorn&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;uWSGI is in maintenance mode.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Web Servers&lt;/th&gt;
&lt;th&gt;Django&lt;/th&gt;
&lt;th&gt;Flask&lt;/th&gt;
&lt;th&gt;FastAPI&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;Gunicorn&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y (Gunicorn + Uvicorn)&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Apache + mod_wsgi&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Daphne&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Hypercorn&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;Uvicorn&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;td&gt;&lt;/td&gt;
&lt;td&gt;Y&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;blockquote&gt;
&lt;p&gt;The web servers used by Django, Flask and FastAPI are selected based on recommendations in their official documentation.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;If you’d like to use an ASGI server for Flask you will need to utilize WSGI to ASGI middleware.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;Uvicorn has a Gunicorn-compatible worker class, when you use Gunicorn with Uvicorn for FastAPI, Gunicorn acts as a process manager, it would transmit the communication to the worker processes running the Uvicorn class.&lt;/p&gt;
&lt;/blockquote&gt;
</summary>
        
      
    
    
    
    <category term="Tech" scheme="https://lnxpgn.github.io/categories/Tech/"/>
    
    
    <category term="Python" scheme="https://lnxpgn.github.io/tags/Python/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 45</title>
    <link href="https://lnxpgn.github.io/2023/11/19/issue-45-202311-2/"/>
    <id>https://lnxpgn.github.io/2023/11/19/issue-45-202311-2/</id>
    <published>2023-11-18T16:00:00.000Z</published>
    <updated>2023-12-09T02:45:44.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;Using-Colors-in-Terminal-Output&quot;&gt;&lt;a href=&quot;#Using-Colors-in-Terminal-Output&quot; class=&quot;headerlink&quot; title=&quot;Using Colors in Terminal Output&quot;&gt;&lt;/a&gt;Using Colors in Terminal Output&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://handwiki.org/wiki/ANSI_escape_code&quot;&gt;ANSI escape sequences&lt;/a&gt; is a standard to control cursor location, color, font styling, and other options on terminal emulators. &lt;/p&gt;
&lt;p&gt;The sequences are grouped by their sequence type. CSI (Control Sequence Introducer) is one of the groups, their sequence starting with &lt;code&gt;ESC [&lt;/code&gt;. SGR (Select Graphic Rendition) is a part of CSI, it sets display attributes.&lt;/p&gt;
&lt;p&gt;The form of SGR:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;ESC &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt; n m

&lt;span class=&quot;token comment&quot;&gt;# In terminal, we can write&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;e&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nm
&lt;span class=&quot;token comment&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;token punctuation&quot;&gt;&#92;&lt;/span&gt;x1b&lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;nm&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ESC&lt;/code&gt; is a character in the ASCII table.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;n&lt;/code&gt; consists of one or more decimal digits, separated by &lt;code&gt;;&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;The sequence ends with &lt;code&gt;m&lt;/code&gt;.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Sequence&lt;/th&gt;
&lt;th&gt;Description&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;ESC [ 30…37 m&lt;/td&gt;
&lt;td&gt;Set ANSI text color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 38 ; 5 ; n m&lt;/td&gt;
&lt;td&gt;Set text color, 256-color, n is color index from 0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 38 ; 2 ; r ; g ; b m&lt;/td&gt;
&lt;td&gt;Set text color, 24-bit true color, r, g, b are from 0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 39 m&lt;/td&gt;
&lt;td&gt;Reset text color to default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 40…47 m&lt;/td&gt;
&lt;td&gt;Set ANSI background color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 48 ; 5 ; n m&lt;/td&gt;
&lt;td&gt;Set background color, 256-color, n is color index from 0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 48 ; 2 ; r ; g ; b m&lt;/td&gt;
&lt;td&gt;Set background color, 24-bit true color, r, g, b are from 0 to 255&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 49 m&lt;/td&gt;
&lt;td&gt;Reset background color to default&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 90…97 m&lt;/td&gt;
&lt;td&gt;Set bright ANSI text color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 100…107 m&lt;/td&gt;
&lt;td&gt;Set bright ANSI background color&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 1 m&lt;/td&gt;
&lt;td&gt;Bold&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;ESC [ 0 m&lt;/td&gt;
&lt;td&gt;Reset&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;p&gt;ANSI colors:&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th&gt;Text Color&lt;/th&gt;
&lt;th&gt;Background Color&lt;/th&gt;
&lt;th&gt;Color Name&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;&lt;tr&gt;
&lt;td&gt;30&lt;/td&gt;
&lt;td&gt;40&lt;/td&gt;
&lt;td&gt;black&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;31&lt;/td&gt;
&lt;td&gt;41&lt;/td&gt;
&lt;td&gt;red&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;32&lt;/td&gt;
&lt;td&gt;42&lt;/td&gt;
&lt;td&gt;green&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;33&lt;/td&gt;
&lt;td&gt;43&lt;/td&gt;
&lt;td&gt;yellow&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;34&lt;/td&gt;
&lt;td&gt;44&lt;/td&gt;
&lt;td&gt;blue&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;35&lt;/td&gt;
&lt;td&gt;45&lt;/td&gt;
&lt;td&gt;magenta&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;36&lt;/td&gt;
&lt;td&gt;46&lt;/td&gt;
&lt;td&gt;cyan&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;37&lt;/td&gt;
&lt;td&gt;47&lt;/td&gt;
&lt;td&gt;white&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;&lt;/table&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# red A&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;e[31mA&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# white A, red background&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;e[37;41mA&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# bright and bold A, red background&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;e[1;97;41mA&#39;&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# red A, green B&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;echo&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&#39;&#92;e[31mA&#92;e[0B&#92;e[32mB&#39;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To print 256 text and background colors:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;#!/usr/bin/env python3&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# text colors&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&#92;x1b[38;5;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ljust&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;x1b[0m&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# background colors&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; j &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
        code &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;i &lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;16&lt;/span&gt; &lt;span class=&quot;token operator&quot;&gt;+&lt;/span&gt; j&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&quot;&#92;x1b[48;5;&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;m&lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;code&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;ljust&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; end&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39; &#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&quot;&#92;x1b[0m&quot;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Discovering-Recently-Installed-Commands-In-Zsh&quot;&gt;&lt;a href=&quot;#Discovering-Recently-Installed-Commands-In-Zsh&quot; class=&quot;headerlink&quot; title=&quot;Discovering Recently Installed Commands In Zsh&quot;&gt;&lt;/a&gt;Discovering Recently Installed Commands In Zsh&lt;/h3&gt;&lt;p&gt;When using Zsh (with &lt;a href=&quot;https://ohmyz.sh/&quot;&gt;Oh My ZSH&lt;/a&gt;), the newly installed commands will not be automatically completed without opening new terminal tab or window. We can run the command to fix it:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;rehash
&lt;span class=&quot;token comment&quot;&gt;# or&lt;/span&gt;
&lt;span class=&quot;token builtin class-name&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-rf&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="Shell" scheme="https://lnxpgn.github.io/tags/Shell/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 44</title>
    <link href="https://lnxpgn.github.io/2023/11/05/issue-44-202311-1/"/>
    <id>https://lnxpgn.github.io/2023/11/05/issue-44-202311-1/</id>
    <published>2023-11-04T16:00:00.000Z</published>
    <updated>2023-12-08T09:15:04.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;How-to-know-which-program-sent-a-network-request&quot;&gt;&lt;a href=&quot;#How-to-know-which-program-sent-a-network-request&quot; class=&quot;headerlink&quot; title=&quot;How to know which program sent a network request&quot;&gt;&lt;/a&gt;How to know which program sent a network request&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; tcpdump &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; any &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-k&lt;/span&gt; INPD port &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can also write captured network packets to a file, then read it later.&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;sudo&lt;/span&gt; tcpdump &lt;span class=&quot;token parameter variable&quot;&gt;-i&lt;/span&gt; any &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-k&lt;/span&gt; INPD port &lt;span class=&quot;token number&quot;&gt;53&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-w&lt;/span&gt; /&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;file path&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/tcpdump-output.pcap

tcpdump &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-k&lt;/span&gt; INPD &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; /&lt;span class=&quot;token operator&quot;&gt;&amp;lt;&lt;/span&gt;file path&lt;span class=&quot;token operator&quot;&gt;&gt;&lt;/span&gt;/tcpdump-output.pcap&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-i any&lt;/code&gt;, &lt;em&gt;tcpdump&lt;/em&gt; listens on all interfaces.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-n&lt;/code&gt;, &lt;em&gt;tcpdump&lt;/em&gt; doesn’t convert addresses (e.g., host addresses, port numbers) to names.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;-k&lt;/code&gt;, control the display of packet metadata via an optional argument (e.g., &lt;code&gt;INPD&lt;/code&gt;).&lt;/p&gt;
&lt;p&gt;&lt;code&gt;port 53&lt;/code&gt;, a packet filter expression. Here we only capture DNS packets.&lt;/p&gt;
&lt;p&gt;The metadata arguments:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;I&lt;/code&gt;: interface name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;N&lt;/code&gt;: process name.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;P&lt;/code&gt;: process ID.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;D&lt;/code&gt;: direction.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;The sample output of &lt;em&gt;tcpdump&lt;/em&gt;:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-none&quot;&gt;&lt;code class=&quot;language-none&quot;&gt;10:57:45.835947 (eth0, proc dig:3437, out) IP 192.168.1.20.57959 &amp;gt; 192.168.1.1.53: 33994+ [1au] A? gitlab.com. (39)
10:57:45.842205 (eth0, proc dig:3437, in) IP 192.168.1.1.53 &amp;gt; 192.168.1.20.57959: 33994 1&amp;#x2F;0&amp;#x2F;0 A 172.65.251.78 (44)&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The sample packets generated by a shell command &lt;code&gt;dig gitlab.com&lt;/code&gt;.&lt;/p&gt;
&lt;p&gt;&lt;code&gt;eth0, proc dig:3437, out&lt;/code&gt;, &lt;code&gt;eth0, proc dig:3437, in&lt;/code&gt; are what we want.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;eth0&lt;/code&gt; is the interface name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;dig&lt;/code&gt; is the process name&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;3437&lt;/code&gt; is the process ID&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;out&lt;/code&gt; indicates the network request is send by the device&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;in&lt;/code&gt; indicates the network request is received by the device&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;Python-subprocess-and-stderr&quot;&gt;&lt;a href=&quot;#Python-subprocess-and-stderr&quot; class=&quot;headerlink&quot; title=&quot;Python subprocess and stderr&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://zaitcev.livejournal.com/264423.html&quot;&gt;Python subprocess and stderr&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Pipe output of &lt;code&gt;cmd1&lt;/code&gt; into &lt;code&gt;cmd2&lt;/code&gt; and capture the &lt;em&gt;stderr&lt;/em&gt;.&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Popen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; close_fds&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Popen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stdin&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
  stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; close_fds&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
p1_stderr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;communicate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
p2_stderr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;communicate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;returncode &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;returncode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p1_stderr&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; p2_stderr&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The above saves the &lt;code&gt;p1.stdout&lt;/code&gt; in memory, if the amount piped becomes large enough, we should use the following code:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;with&lt;/span&gt; tempfile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;TemporaryFile&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;as&lt;/span&gt; errfile&lt;span class=&quot;token punctuation&quot;&gt;:&lt;/span&gt;
    p1 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Popen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd1&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;errfile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; close_fds&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    p2 &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;Popen&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;cmd2&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stdin&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt;
      stdout&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;subprocess&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;PIPE&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; stderr&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;errfile&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; close_fds&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token boolean&quot;&gt;True&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;stdout&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;close&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;communicate&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;wait&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    errfile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;seek&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
    px_stderr &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; errfile&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;read&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;return&lt;/span&gt; p1&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;returncode &lt;span class=&quot;token keyword&quot;&gt;or&lt;/span&gt; p2&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;returncode&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; px_stderr&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Python" scheme="https://lnxpgn.github.io/tags/Python/"/>
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="Network" scheme="https://lnxpgn.github.io/tags/Network/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 43</title>
    <link href="https://lnxpgn.github.io/2023/10/29/issue-43-202310-4/"/>
    <id>https://lnxpgn.github.io/2023/10/29/issue-43-202310-4/</id>
    <published>2023-10-28T16:00:00.000Z</published>
    <updated>2023-12-08T09:15:05.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;How-to-Benchmark-a-Python-Statement&quot;&gt;&lt;a href=&quot;#How-to-Benchmark-a-Python-Statement&quot; class=&quot;headerlink&quot; title=&quot;How to Benchmark a Python Statement&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://superfastpython.com/benchmark-python-statement/&quot;&gt;How to Benchmark a Python Statement&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;time.perf_counter()&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; time &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; perf_counter

&lt;span class=&quot;token comment&quot;&gt;# record start time&lt;/span&gt;
time_start &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; perf_counter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# execute the statement&lt;/span&gt;
data &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;token punctuation&quot;&gt;[&lt;/span&gt;i&lt;span class=&quot;token operator&quot;&gt;*&lt;/span&gt;i &lt;span class=&quot;token keyword&quot;&gt;for&lt;/span&gt; i &lt;span class=&quot;token keyword&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;token builtin&quot;&gt;range&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;100000000&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;]&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# record end time&lt;/span&gt;
time_end &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; perf_counter&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# calculate the duration&lt;/span&gt;
time_duration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; time_end &lt;span class=&quot;token operator&quot;&gt;-&lt;/span&gt; time_start

&lt;span class=&quot;token comment&quot;&gt;# report the duration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&#39;Took &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;time_duration&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;timeit&lt;/code&gt;&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-python&quot; data-language=&quot;python&quot;&gt;&lt;code class=&quot;language-python&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;from&lt;/span&gt; timeit &lt;span class=&quot;token keyword&quot;&gt;import&lt;/span&gt; timeit

&lt;span class=&quot;token comment&quot;&gt;# benchmark the statement&lt;/span&gt;
time_duration &lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt; timeit&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt;&#39;[i*i for i in range(100000000)]&#39;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;,&lt;/span&gt; number&lt;span class=&quot;token operator&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;token comment&quot;&gt;# report the duration&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;token string-interpolation&quot;&gt;&lt;span class=&quot;token string&quot;&gt;f&#39;Took &lt;/span&gt;&lt;span class=&quot;token interpolation&quot;&gt;&lt;span class=&quot;token punctuation&quot;&gt;&amp;#123;&lt;/span&gt;time_duration&lt;span class=&quot;token punctuation&quot;&gt;&amp;#125;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token string&quot;&gt; seconds&#39;&lt;/span&gt;&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;)&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OR&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token comment&quot;&gt;# The command executes the statement one time and&lt;/span&gt;
&lt;span class=&quot;token comment&quot;&gt;# reports the best time (smallest time) over 3 repetitions of executing the statement&lt;/span&gt;
python &lt;span class=&quot;token parameter variable&quot;&gt;-m&lt;/span&gt; timeit &lt;span class=&quot;token parameter variable&quot;&gt;-n&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;token parameter variable&quot;&gt;-r&lt;/span&gt; &lt;span class=&quot;token number&quot;&gt;3&lt;/span&gt; &lt;span class=&quot;token string&quot;&gt;&quot;[i*i for i in range(100000000)]&quot;&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;How-to-Share-Large-Data-Between-Processes-in-Python&quot;&gt;&lt;a href=&quot;#How-to-Share-Large-Data-Between-Processes-in-Python&quot; class=&quot;headerlink&quot; title=&quot;How to Share Large Data Between Processes in Python&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://superfastpython.com/multiprocessing-share-large-data-between-processes/&quot;&gt;How to Share Large Data Between Processes in Python&lt;/a&gt;&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Inherit a copy of the structure in each process&lt;/p&gt;
&lt;p&gt;It is the fastest way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Pass a copy of the structure to each task via an argument&lt;/p&gt;
&lt;p&gt;It is the slowest way.&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Initialize process workers with a copy of the structure once&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Python" scheme="https://lnxpgn.github.io/tags/Python/"/>
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
  </entry>
  
  <entry>
    <title>Weekly - issue 42</title>
    <link href="https://lnxpgn.github.io/2023/10/21/issue-42-202310-3/"/>
    <id>https://lnxpgn.github.io/2023/10/21/issue-42-202310-3/</id>
    <published>2023-10-20T16:00:00.000Z</published>
    <updated>2023-12-08T09:15:04.000Z</updated>
    
    
      
      
        
        
    <summary type="html">&lt;h3 id=&quot;How-to-copy-files-from-a-Docker-container-to-the-host&quot;&gt;&lt;a href=&quot;#How-to-copy-files-from-a-Docker-container-to-the-host&quot; class=&quot;headerlink&quot; title=&quot;How to copy files from a Docker container to the host&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://kerkour.com/docker-copy-file-from-container-to-host&quot;&gt;How to copy files from a Docker container to the host&lt;/a&gt;&lt;/h3&gt;&lt;pre class=&quot;line-numbers language-bash&quot; data-language=&quot;bash&quot;&gt;&lt;code class=&quot;language-bash&quot;&gt;&lt;span class=&quot;token function&quot;&gt;docker&lt;/span&gt; &lt;span class=&quot;token function&quot;&gt;cp&lt;/span&gt; my_container:/home/user/file.jpg file.jpg&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;Upsert-in-SQL&quot;&gt;&lt;a href=&quot;#Upsert-in-SQL&quot; class=&quot;headerlink&quot; title=&quot;Upsert in SQL&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://antonz.org/sql-upsert/&quot;&gt;Upsert in SQL&lt;/a&gt;&lt;/h3&gt;&lt;p&gt;Upsert is an operation that inserts new records into the database and updates existing ones.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;MySQL &amp;#x2F; MariaDB&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;DUPLICATE&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;KEY&lt;/span&gt; &lt;span class=&quot;token keyword&quot;&gt;UPDATE&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQLite&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; CONFLICT&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;PostgreSQL&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;INSERT&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;ON&lt;/span&gt; CONFLICT

&lt;span class=&quot;token comment&quot;&gt;-- Only PostgreSQL 15+&lt;/span&gt;
&lt;span class=&quot;token keyword&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;SQL Server (2008+) &amp;#x2F; Oracle (11+)&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-sql&quot; data-language=&quot;sql&quot;&gt;&lt;code class=&quot;language-sql&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;MERGE&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token punctuation&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;token keyword&quot;&gt;INTO&lt;/span&gt;&lt;span aria-hidden=&quot;true&quot; class=&quot;line-numbers-rows&quot;&gt;&lt;span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;
&lt;/ul&gt;
</summary>
        
      
    
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/categories/Weekly/"/>
    
    
    <category term="Weekly" scheme="https://lnxpgn.github.io/tags/Weekly/"/>
    
    <category term="Container" scheme="https://lnxpgn.github.io/tags/Container/"/>
    
    <category term="SQL" scheme="https://lnxpgn.github.io/tags/SQL/"/>
    
  </entry>
  
</feed>
