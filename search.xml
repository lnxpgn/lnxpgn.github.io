<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Weekly - issue 48</title>
      <link href="/2025/09/07/issue-48-202509-1/"/>
      <url>/2025/09/07/issue-48-202509-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Hive-REGEXP-EXTRACT-Returns-Empty-String-Not-NULL-When-No-Match"><a href="#Hive-REGEXP-EXTRACT-Returns-Empty-String-Not-NULL-When-No-Match" class="headerlink" title="Hive REGEXP_EXTRACT Returns Empty String, Not NULL, When No Match"></a>Hive REGEXP_EXTRACT Returns Empty String, Not NULL, When No Match</h3><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token number">0</span>: jdbc:hive2:<span class="token comment">/// (car)> select regexp_extract('220 km/h', '\\b(\\d+)\\b', 1) as speed;</span>OK<span class="token operator">+</span><span class="token comment">--------+</span><span class="token operator">|</span> speed  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+</span><span class="token operator">|</span> <span class="token number">220</span>    <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+</span><span class="token number">0</span>: jdbc:hive2:<span class="token comment">/// (car)> select regexp_extract('-', '\\b(\\d+)\\b', 1) as speed;</span>OK<span class="token operator">+</span><span class="token comment">--------+</span><span class="token operator">|</span> speed  <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+</span><span class="token operator">|</span>        <span class="token operator">|</span><span class="token operator">+</span><span class="token comment">--------+</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Many sources claim the return value is NULL, but it’s actually an empty string.</p><h3 id="The-Trust-Quotient-TQ"><a href="#The-Trust-Quotient-TQ" class="headerlink" title="The Trust Quotient (TQ)"></a><a href="https://kk.org/thetechnium/the-trust-quotient-tq/">The Trust Quotient (TQ)</a></h3><p>TQ—aka the Trust Quotient—is gonna be a big deal for AI. It’ll measure how reliable an AI is, whether it takes responsibility, and how well it fixes mistakes. And get this: in the future, when humans and AI work together, trust might matter even more than raw intelligence. TQ could end up deciding whether an AI gets trusted or gets access to key services.</p><h3 id="Faster-Rust-builds-on-Mac"><a href="#Faster-Rust-builds-on-Mac" class="headerlink" title="Faster Rust builds on Mac"></a><a href="https://nnethercote.github.io/2025/09/04/faster-rust-builds-on-mac.html">Faster Rust builds on Mac</a></h3><p>So, on Mac, when you build Rust projects (or any compiled code), sometimes the build scripts take way too long.</p><p>The author noticed this on their Mac, and it was weird because the same scripts run super fast on Linux. On Mac, each one took 0.5 to 3+ seconds, and each one was slower than the last. That doesn’t make sense — they’re just checking things like the Rust version.</p><p>After some digging, it turns out macOS has a security feature called XProtect. It scans every executable (like a build script) for malware — especially when it’s first launched or when the file changes.</p><p>So, every time a build script runs, macOS checks it for malware. That’s slow, especially if you have many scripts running one after another. It’s like having a security guard check every single file you create — even if it’s just a simple “check version” script.</p><p>The fix? You can tell macOS not to do this scan by adding your terminal (like Terminal or iTerm) to the list of <code>developer tools</code> in System Settings. After that, the build scripts run in under 0.1 seconds — a huge improvement.</p><p>Now, here’s the thing: this only helps if you’re building or testing things a lot.</p><ul><li><p>If you just edit and rebuild code (like <code>cargo run</code>), you’ll pay the delay every time.</p></li><li><p>But if you run <code>cargo test</code>, it’s a huge win — especially since some tests create thousands of tiny binaries. One test suite for the Rust compiler went from 9 minutes to 3 minutes just by disabling this scan.</p></li></ul><p>The article says this is a hidden Mac behavior — most people don’t know about it. There’s a PR in Cargo (the Rust tool) that would warn users when XProtect is on, so they know it’s slowing things down. It’s a good idea because it helps users see a real performance problem they didn’t know existed.</p><p>Bottom line: If you’re on Mac and you do a lot of Rust testing or building, try turning off XProtect in your terminal settings — it can make builds and tests much faster, especially for testing. Just remember: you’re disabling a security feature, so only do it if you’re okay with that trade-off.</p><p>(And yeah, it’s not just Rust — any compiled language (C, C++, Go, Swift, etc.) might benefit too, if you’re compiling a lot.)</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> AI </tag>
            
            <tag> Hive </tag>
            
            <tag> Rust </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 47</title>
      <link href="/2023/12/25/issue-47-202312-2/"/>
      <url>/2023/12/25/issue-47-202312-2/</url>
      
        <content type="html"><![CDATA[<h3 id="How-to-Install-Fonts-on-Debian-Linux-12"><a href="#How-to-Install-Fonts-on-Debian-Linux-12" class="headerlink" title="How to Install Fonts on Debian Linux 12"></a>How to Install Fonts on Debian Linux 12</h3><p>The GNOME &#x2F; KDE fonts manager provide a user-friendly way to manage and install fonts, we will show how to install fonts manually.</p><p>For most uses, we’ll install TrueType (TTF) and OpenType (OTF) fonts.</p><p>Fonts will be place into:</p><ul><li><p><code>/usr/local/share/fonts</code></p><blockquote><p>System-Wide</p></blockquote></li><li><p><code>~/.local/share/fonts</code></p><blockquote><p>User-Specific</p></blockquote></li><li><p><code>~/.fonts</code></p><blockquote><p>User-Specific</p></blockquote></li></ul><p>The manual installation process:</p><ol><li><p>Make sure the <code>fontconfig</code> package is installed</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> fc-cache <span class="token operator">></span> /dev/null <span class="token operator">||</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> fontconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The commands <code>fc-cache</code> and <code>fc-list</code> come from the package.</p></li><li><p>Download the font</p></li><li><p>Make sure the font files have the permission <code>644</code> (<code>-rw-r--r--</code>)</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> <span class="token operator">&lt;</span>font file<span class="token operator">></span><span class="token comment"># OR</span><span class="token function">chmod</span> <span class="token number">644</span> <span class="token operator">&lt;</span>font directory<span class="token operator">></span>/*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Copy font files to the system-wide or the user-specific directory</p><p>If using the user-specific font directories, they don’t exist by default, we’ll use one of them and create it:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.local/share/fonts<span class="token comment"># OR</span><span class="token function">mkdir</span> ~/.fonts<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>If the font have multiple files, we can create a subdirectory, then copy font files to it.</p></blockquote></li><li><p>Build font information cache files</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># No root privileges required</span>fc-cache <span class="token parameter variable">-f</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Normally Debian is watching these font directories and will automatically generate the cache, we don’t need to run the command.</p></blockquote></li><li><p>Check the result</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fc-list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> <span class="token operator">&lt;</span>font name<span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>For example:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">fc-list <span class="token operator">|</span> <span class="token function">grep</span> <span class="token parameter variable">-i</span> dejavu<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol><h3 id="First-Impressions-with-Google’s-Gemini"><a href="#First-Impressions-with-Google’s-Gemini" class="headerlink" title="First Impressions with Google’s Gemini"></a><a href="https://blog.roboflow.com/first-impressions-with-google-gemini/">First Impressions with Google’s Gemini</a></h3><p>Gemini is a Large Multimodal Model (LMM) developed by Google.</p><ol><li><p>Visual Question Answering (VQA)</p><ul><li><p>Ask “How many coins do I have?” in an image</p><p>Pass: Gemini, LLaVA, BakLLaVA, Qwen-VL, and CogVLM</p><p>Failed: GPT-4 with Vision</p></li><li><p>Ask if the LMM could identify which movie was featured in an image</p><p>Pass: Gemini, Qwen-VL and GPT-4 with Vision</p><p>Failed: LLaVA, BakLLaVA, and CogVLM</p></li><li><p>Ask “What is the price of Pastrami Pizza?” in a menu</p><p>Pass: Gemini, CogVLM, and GPT-4 with Vision</p><p>Failed: LLaVA, BakLLaVA, and Qwen-VL</p></li></ul></li><li><p>Optical Character Recognition (OCR)</p><p>Ask “Read the serial number.” in an image of a tire.</p><p>Pass: Qwen-VL, CogVLM, and GPT-4 with Vision</p><p>Failed: Gemini, LLaVA and BakLLaVA</p></li><li><p>Document OCR</p><ul><li><p>Ask “Read text from the picture.”</p><p>Pass: Qwen-VL, CogVLM, and GPT-4 with Vision</p><p>Failed: Gemini (almost correct)</p></li><li><p>Ask “How much tax did I pay?” in a receipt image</p><p>Pass: Gemini</p></li></ul></li><li><p>Object Detection</p><ul><li><p>Ask “Find the dog.” in an image</p><p>Pass: Qwen-VL, CogVLM</p><p>Failed: Gemini</p></li><li><p>Look for the Christmas tree in an image</p><p>Pass: Qwen-VL, CogVLM</p><p>Failed: Gemini</p></li></ul></li></ol>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> AI </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 46</title>
      <link href="/2023/12/17/issue-46-202312-1/"/>
      <url>/2023/12/17/issue-46-202312-1/</url>
      
        <content type="html"><![CDATA[<h3 id="生成式-AI-是如何工作的"><a href="#生成式-AI-是如何工作的" class="headerlink" title="生成式 AI 是如何工作的"></a><a href="https://step-saga-examples.pages.dev/simple-ai-01-cn/">生成式 AI 是如何工作的</a></h3><p>向无 AI 知识背景的读者介绍生成式 AI 是如何工作的。</p><h3 id="AI-版“神笔马良”是如何工作的"><a href="#AI-版“神笔马良”是如何工作的" class="headerlink" title="AI 版“神笔马良”是如何工作的"></a><a href="https://step-saga-examples.pages.dev/simple-ai-02-cn/">AI 版“神笔马良”是如何工作的</a></h3><p>向无 AI 知识背景的读者介绍 GPT-4V 是如何拥有“视觉”的，以及开源白板软件 <a href="https://github.com/tldraw/tldraw">tldraw</a> 基于 GPT-4V 实现 <em>Make Real</em> 功能的工程原理。</p><blockquote><p>用户只需要在 tldraw 的白板上快速绘制一个草稿，再点击 <em>Make Real</em> 按钮，就能够生成一段真实的代码，对应草稿中所描述的功能。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> AI </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python Modules and Packages</title>
      <link href="/2023/12/09/python-modules-and-packages/"/>
      <url>/2023/12/09/python-modules-and-packages/</url>
      
        <content type="html"><![CDATA[<h3 id="Modules"><a href="#Modules" class="headerlink" title="Modules"></a>Modules</h3><p>As your program gets longer, you can split it into several files for easier maintenance, you may also want to share a handy function across several programs.</p><p>To support this, Python has a way to put definitions in a file, such a file is called a module, the file name is the module name with the suffix <code>.py</code> appended.</p><span id="more"></span><p><code>fibo.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"In fibo module."</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""write Fibonacci series up to n."""</span>    a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> a <span class="token operator">&lt;</span> n<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a<span class="token operator">+</span>b    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"module name: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>__name__<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A module can contain executable statements as well as function definitions. They are executed only the first time the module name is encountered in an import statement.</p><p>For efficiency reasons, each module is only imported once per interpreter session.</p><p>Within a module, the module’s name (as a string) is available as the value of the global variable <code>__name__</code>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># In a Python interpreter</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> fiboIn fibo module<span class="token punctuation">.</span>module name<span class="token punctuation">:</span> fibo<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># In Shell</span><span class="token operator">></span> python fibo.pyIn fibo module.module name: __main__<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>python -c &#39;import fibo&#39;</code> outputs the module name <code>fibo</code>.</p><p><code>python -m fibo</code> outputs the module name <code>__main__</code>.</p><p>You may see some Python files that have the following code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    <span class="token comment"># some code</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>__name__</code>  is used to distinguish whether the file is running directly or imported as a module.</p><p>Each module has its own private namespace.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># fibo is a namespace</span><span class="token operator">>></span><span class="token operator">></span> fibo<span class="token punctuation">.</span>fib<span class="token operator">&lt;</span>function fib at <span class="token number">0x7f89fc505400</span><span class="token operator">></span><span class="token operator">>></span><span class="token operator">></span> fib<span class="token operator">=</span>fibo<span class="token punctuation">.</span>fib<span class="token operator">>></span><span class="token operator">></span> fib<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token number">0</span> <span class="token number">1</span> <span class="token number">1</span> <span class="token number">2</span> <span class="token number">3</span> <span class="token number">5</span> <span class="token number">8</span> <span class="token number">13</span> <span class="token number">21</span> <span class="token number">34</span> <span class="token number">55</span> <span class="token number">89</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Different ways to use <code>import</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Import the module, fibo is just a namespace</span><span class="token comment"># To call the fib function within the fibo module: fibo.fib(100)</span><span class="token keyword">import</span> fibo<span class="token comment"># fib is an alias of fibo</span><span class="token keyword">import</span> fibo <span class="token keyword">as</span> fib<span class="token comment"># Only import the fib function</span><span class="token keyword">from</span> fibo <span class="token keyword">import</span> fib<span class="token comment"># fibonacci is an alias of fib</span><span class="token keyword">from</span> fibo <span class="token keyword">import</span> fib <span class="token keyword">as</span> fibonacci<span class="token comment"># Import all names except those beginning with an underscore (_)</span><span class="token keyword">from</span> fibo <span class="token keyword">import</span> <span class="token operator">*</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The module search path:</p><ol><li><p>built-in modules</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># check them</span><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>builtin_module_names<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>A list of directories given by the variable <code>sys.path</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># check it</span><span class="token keyword">import</span> sys<span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ol><p><code>sys.path</code> is initialized from these locations:</p><ol><li><p>The directory containing the <code>.py</code> file or current working directory</p><p><code>fibo.py</code> is in <code>/opt/py-modules</code>.</p><p>When running the module directly:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">python fibo.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The directory is <code>/opt/py-modules</code>.</p><blockquote><p>If <code>/opt/py-modules</code> is a symlink to <code>/opt/third-party/py-modules</code>, the directory is <code>/opt/third-party/py-modules</code>, not <code>/opt/py-modules</code>, Python follows the symlink.</p></blockquote><p>When using a Python interpreter:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> sys<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>You will see the directory (the first one) is current working directory.</p><blockquote><p>The directory is placed at the beginning of the search path, ahead of the standard library path. This means that modules in the directory will be loaded instead of modules of the same name in the library directory.</p></blockquote></li><li><p>Directories listed in the shell environment variable <code>PYTHONPATH</code></p><p>The default value of  <code>PYTHONPATH</code> is an empty string, but Python always append the directories containing standard Python modules (e.g, <code>/usr/local/lib/python311.zip</code>, <code>/usr/local/lib/python3.11</code>) as well as any extension modules that these modules depend on (e.g, <code>/usr/local/lib/python3.11/lib-dynload</code>).</p></li><li><p>The installation-dependent default directories</p><p>It includes the user-specific site-packages directory and all global site-packages directories.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> site<span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>site<span class="token punctuation">.</span>getusersitepackages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">print</span><span class="token punctuation">(</span>site<span class="token punctuation">.</span>getsitepackages<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ol><p>In a directory, you may see a <code>__pycache__</code> directory, Python caches the compiled version of each module in it.</p><p>The only advantage of <code>.pyc</code> files is that they can be loaded faster, not run faster.</p><p>Python does not check the cache in two circumstances:</p><ol><li><p>Load a module from the command line</p></li><li><p>No corresponding <code>.py</code> source modules</p></li></ol><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><pre class="line-numbers language-none"><code class="language-none">run.pysound&#x2F;                          Top-level package      __init__.py               Initialize the sound package      formats&#x2F;                  Subpackage for file format conversions              __init__.py              wavread.py              wavwrite.py              ...      effects&#x2F;                  Subpackage for sound effects              __init__.py              echo.py              surround.py              ...      filters&#x2F;                  Subpackage for filters              __init__.py              equalizer.py              vocoder.py              ...<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Load the submodule sound.effects.echo</span><span class="token keyword">import</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo<span class="token comment"># OR</span><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> echo<span class="token comment"># Import the desired function or variable directly</span><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects<span class="token punctuation">.</span>echo <span class="token keyword">import</span> echofilter<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Packages are a way of structuring Python’s module namespace by using “dotted module names”.</p><p>The <code>__init__.py</code> files are required to make Python treat directories containing the file as packages.</p><p>In the simplest case, <code>__init__.py</code> can just be an empty file, but it can also execute initialization code for the package or set the <code>__all__</code> variable.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># sound/effects/__init__.py</span>__all__ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"echo"</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>When using <code>from sound.effects import *</code>, only import <code>echo</code> submodule from the <code>sound.effects</code> package. <code>__all__</code> likes a filter.</p><p>If you define a function or variable named <code>echo</code> in <code>sound/effects/__init__.py</code>, it will shadow the <code>echo.py</code> module.</p><p>If no <code>__all__</code>, Python only ensures that the package <code>sound.effects</code> has been imported, not submodules.</p><p>Using <code>import *</code> is a bad practice in production code.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># absolute imports</span><span class="token keyword">from</span> sound<span class="token punctuation">.</span>effects <span class="token keyword">import</span> echo<span class="token comment"># relative imports</span><span class="token comment"># leading dots indicate the current and parent packages</span><span class="token keyword">from</span> <span class="token punctuation">.</span> <span class="token keyword">import</span> echo<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token keyword">import</span> formats<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>filters <span class="token keyword">import</span> equalizer<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Relative imports are based on the name of the <strong>current module</strong>.</p><p><code>python run.py</code> runs the program, <code>run.py</code> is the main module, its <code>__name__</code> is <code>__main__</code>.</p><p>The directory containing the main module <code>run.py</code> is not a package, <code>sound</code> is the top-level package, we can’t use relative imports in <code>run.py</code> and other modules at the same directory.</p><p>When using <code>from .sound.effects import echo</code> in <code>run.py</code>, the error message:</p><pre class="line-numbers language-none"><code class="language-none">ImportError: attempted relative import with no known parent package<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Getting Started with Zig for Developers Experienced with Other Languages</title>
      <link href="/2023/12/03/zig/"/>
      <url>/2023/12/03/zig/</url>
      
        <content type="html"><![CDATA[<p>The content is based on <a href="https://ziglang.org/documentation/master/">the official Zig documentation</a>.</p><h2 id="Hello-World"><a href="#Hello-World" class="headerlink" title="Hello, World"></a>Hello, World</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> stdout <span class="token operator">=</span> std<span class="token punctuation">.</span>io<span class="token punctuation">.</span><span class="token function">getStdOut</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">writer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> stdout<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello, &#123;s&#125;!\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token string">"world"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>!void</code> tells the Zig compiler that the function will either return an error or a value. It is an error union, the full form is <code>&lt;error set type&gt;!&lt;any data type&gt;</code>, combining an <em>Error Set Type</em> (An error set is like an enum) and any other data type.</p><p><code>!void</code> , the error set type is not explicitly written on the left side of the <code>!</code> operator. </p><p>The <a href="https://ziglang.org/documentation/master/#try">try</a> expression evaluates the result of <code>stdout.print</code>. If the result is an error, then the <code>try</code> expression will return from <code>main</code> with the error. Otherwise, the program will continue. </p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// top-level declarations are order-independent</span><span class="token keyword">const</span> print <span class="token operator">=</span> std<span class="token punctuation">.</span>debug<span class="token punctuation">.</span>print<span class="token punctuation">;</span><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// std.debug.print cannot fail, so the return type is void, not !void</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// must have ".&#123;&#125;", std.debug.print needs two arguments</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"Hello, world\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><span id="more"></span><h2 id="Zig-Test"><a href="#Zig-Test" class="headerlink" title="Zig Test"></a>Zig Test</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// testing_introduction.zig</span><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> expect <span class="token operator">=</span> std<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token keyword">test</span> <span class="token string">"expect addOne adds one to 41"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">addOne</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// A test name can also be written using an identifier</span><span class="token keyword">test</span> <span class="token class-name">addOne</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">addOne</span><span class="token punctuation">(</span><span class="token number">41</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">addOne</span><span class="token punctuation">(</span>number<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> number <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># run the code directly</span>zig <span class="token builtin class-name">test</span> testing_introduction.zig<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Test declarations can be written in the same file, where code under test is written, or in a separate Zig source file.</p><p>Since test declarations are top-level declarations, they are order-independent and can be written before or after the code under test.</p><blockquote><p>We can easily run our testing code like this, no need to compile it first.</p></blockquote><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><p>No multiline comments in Zig.</p><p>Zig supports 3 types of comments：</p><ul><li><p>Normal comments.</p><p>Begins with <code>//</code>.</p></li><li><p>Doc comments</p><p>Begins with exactly three slashes (i.e.<code>///</code>).</p></li><li><p>Top-level doc comments</p><p>Begins with <code>//!</code>. It documents the current module.</p></li></ul><p>The last two are used by the compiler to generate the package documentation.</p><blockquote><p>No <code>/*...*/</code>.</p></blockquote><h2 id="Integers"><a href="#Integers" class="headerlink" title="Integers"></a>Integers</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// underscores may be placed as a visual separator</span><span class="token keyword">const</span> one_billion <span class="token operator">=</span> 1_000_000_000<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Zig supports arbitrary bit-width integers, the identifier <code>i7</code> refers to a signed 7-bit integer.</p><h2 id="Floats"><a href="#Floats" class="headerlink" title="Floats"></a>Floats</h2><p>There is no syntax for NaN, infinity, or negative infinity. For these special values, one must use the standard library:</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> inf <span class="token operator">=</span> std<span class="token punctuation">.</span>math<span class="token punctuation">.</span><span class="token function">inf</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> negative_inf <span class="token operator">=</span> <span class="token operator">-</span>std<span class="token punctuation">.</span>math<span class="token punctuation">.</span><span class="token function">inf</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f64</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> nan <span class="token operator">=</span> std<span class="token punctuation">.</span>math<span class="token punctuation">.</span><span class="token function">nan</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f128</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="String"><a href="#String" class="headerlink" title="String"></a>String</h2><p>Zig has no concept of strings. String literals are <strong>const pointers</strong> to null-terminated arrays of <code>u8</code>.</p><p>The encoding of a string in Zig is de-facto assumed to be UTF-8.</p><p>It is possible to embed non-UTF-8 bytes into a string literal using <code>\xNN</code> notation.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Multiline string literals</span><span class="token keyword">const</span> hello_world_in_c <span class="token operator">=</span><span class="token string">    \\#include &lt;stdio.h>    \\    \\int main(int argc, char **argv) &#123;    \\    printf("hello world\n");    \\    return 0;    \\&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Optionals"><a href="#Optionals" class="headerlink" title="Optionals"></a>Optionals</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> expect <span class="token operator">=</span> std<span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token keyword">test</span> <span class="token string">"using optionals"</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ?u32: u32 or null</span>    <span class="token keyword">const</span> o<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">// o.?: access the value</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span>o<span class="token operator">.?</span> <span class="token operator">==</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Assignment"><a href="#Assignment" class="headerlink" title="Assignment"></a>Assignment</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">5678</span><span class="token punctuation">;</span><span class="token keyword">var</span> z<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If you need a variable that you can modify, use the <code>var</code> keyword, otherwise, <code>const</code>.</p><p><code>undefined</code> means the value could be anything. <code>undefined</code> means “Not a meaningful<br> value. Using this value would be a bug. The value will be unused, or overwritten before being used.”</p><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><ul><li><p><code>a orelse b</code></p><p>If <code>a</code> is <code>null</code>, returns <code>b</code> (as the default value), otherwise returns the unwrapped value of <code>a</code>.</p></li><li><p><code>a.?</code></p><p><code>a orelse unreachable</code>.</p><blockquote><p><code>unreachable</code> emits a call to <code>panic</code> with the message <code>reached unreachable code</code>.</p></blockquote></li><li><p><code>a catch b</code>, <code>a catch |err| b</code></p><p>If <code>a</code> is an error, returns <code>b</code> (as the default value), otherwise returns the unwrapped value of <code>a</code>.</p><p>The latter captures the error, <code>err</code> is a variable to hold the error value and can be used in the expression <code>b</code>.</p></li><li><p><code>a ++ b</code></p><p>Array concatenation.</p></li><li><p><code>a ** b</code></p><p>Array multiplication.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// ababab</span><span class="token string">"ab"</span> <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// array literal</span><span class="token keyword">const</span> message <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'o'</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// A string literal is a single-item pointer to an array.</span><span class="token keyword">const</span> same_message <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">// modifiable array</span><span class="token keyword">var</span> some_integers<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// initialize an array to zero</span><span class="token keyword">const</span> all_zero <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">u16</span></span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token comment">// call a function to initialize an array</span><span class="token keyword">const</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> more_points <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span>Point</span><span class="token punctuation">&#123;</span><span class="token function">makePoint</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span> <span class="token operator">**</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">makePoint</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span>        <span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">,</span>        <span class="token punctuation">.</span>y <span class="token operator">=</span> x <span class="token operator">*</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Multidimensional Arrays</span><span class="token keyword">const</span> mat4x4 <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span>    <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// The syntax [N:x]T describes Sentinel-Terminated arrays</span><span class="token comment">// We can use the sentinel element to determine the end</span><span class="token comment">// arr[4] == 0, the sentinel element</span><span class="token comment">// arr.len == 4, not 5</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span> <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h2><p>A slice is a <strong>pointer</strong> and a length.</p><p>The difference between an array and a slice is that the array’s length is part of the type and known at compile-time, whereas the slice’s length is known at runtime. Both can be accessed with the <code>len</code> field.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> hello<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> known_at_runtime_zero<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">const</span> slice <span class="token operator">=</span> array<span class="token punctuation">[</span>known_at_runtime_zero<span class="token operator">..</span>array<span class="token punctuation">.</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// If you slice with comptime-known start and end positions,</span><span class="token comment">// the result is a pointer to an array, rather than a slice.</span><span class="token keyword">const</span> array_ptr <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span>array<span class="token punctuation">.</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// A comptime-known length. A runtime-known start position.</span><span class="token comment">// Slicing twice allows the compiler to perform some optimisations.</span><span class="token keyword">var</span> runtime_start<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> length <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> array_ptr_len <span class="token operator">=</span> array<span class="token punctuation">[</span>runtime_start<span class="token operator">..</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// The syntax [:x]T describes Sentinel-Terminated slices</span><span class="token comment">// It has a runtime-known length</span><span class="token comment">// slice[5] == 0, the sentinel element</span><span class="token comment">// slice.len == 5, not 6</span><span class="token keyword">const</span> slice<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token punctuation">;</span><span class="token comment">// Another Sentinel-Terminated slice syntax: data[start..end :x]</span><span class="token comment">// "data" is a many-item pointer, array or slice.</span><span class="token comment">// array[3] must be the same value as the sentinel value: 0,</span><span class="token comment">// otherwise, runtime panic</span><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> runtime_length<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">const</span> slice <span class="token operator">=</span> array<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span>runtime_length <span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Function parameters that are “strings” are expected to be UTF-8 encoded slices of <code>u8</code>.</p><h2 id="Vectors"><a href="#Vectors" class="headerlink" title="Vectors"></a>Vectors</h2><p>A vector is a group of booleans, <a href="https://ziglang.org/documentation/master/#Integers">Integers</a>, <a href="https://ziglang.org/documentation/master/#Floats">Floats</a>, or <a href="https://ziglang.org/documentation/master/#Pointers">Pointers</a> which are operated on in parallel, using SIMD instructions if possible.</p><p>Vector types are created with the builtin function <a href="https://ziglang.org/documentation/master/#Vector">@Vector</a>.</p><p>Vectors support the same builtin operators as their underlying base types. These operations return a vector of the same length as the input vectors.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Vectors have a compile-time known length and base type.</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token builtin">@Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Vectors and fixed-length arrays can be automatically</span><span class="token comment">// assigned back and forth</span><span class="token keyword">var</span> arr1<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">&#123;</span> <span class="token number">1.1</span><span class="token punctuation">,</span> <span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">5.6</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> vec<span class="token punctuation">:</span> <span class="token builtin">@Vector</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token builtin-type keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">=</span> arr1<span class="token punctuation">;</span><span class="token keyword">var</span> arr2<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> vec<span class="token punctuation">;</span><span class="token comment">// You can also assign from a slice with comptime-known</span><span class="token comment">// length to a vector using .*</span><span class="token keyword">const</span> vec2<span class="token punctuation">:</span> <span class="token builtin">@Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin-type keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">=</span> arr1<span class="token punctuation">[</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token operator">.*</span><span class="token punctuation">;</span><span class="token comment">// vec2 == vec3</span><span class="token comment">// &amp;arr1 is a pointer</span><span class="token keyword">var</span> slice<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>arr1<span class="token punctuation">;</span><span class="token keyword">var</span> offset<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> vec3<span class="token punctuation">:</span> <span class="token builtin">@Vector</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token builtin-type keyword">f32</span><span class="token punctuation">)</span> <span class="token operator">=</span> slice<span class="token punctuation">[</span>offset<span class="token operator">..</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">.*</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><p>Two kinds of pointers: single-item and many-item</p><ul><li><p><code>*T</code></p><p>single-item pointer to exactly one item.</p></li><li><p><code>[*]T</code></p><p>many-item pointer to unknown number of items.</p></li></ul><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// single-item pointer</span><span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token keyword">const</span> x_ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span><span class="token comment">// x_ptr.*: dereference a pointer</span><span class="token comment">// assigning the value to '_', we don't use the return value</span>_ <span class="token operator">=</span> x_ptr<span class="token operator">.*</span> <span class="token operator">==</span> <span class="token number">1234</span><span class="token punctuation">;</span>x_ptr<span class="token operator">.*</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// many-item pointer</span><span class="token keyword">const</span> array <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ptr<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>array<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> expect <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token keyword">test</span> <span class="token string">"optional pointers"</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Pointers cannot be null. If you want a null pointer,</span>    <span class="token comment">// use the optional.</span>    <span class="token comment">// prefix `?` to make the pointer type optional.</span>    <span class="token keyword">var</span> ptr<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    ptr <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span>    <span class="token comment">// dereference a optional pointer</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span>ptr<span class="token operator">.?</span><span class="token operator">.*</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// error: comparison of '*i32' with null</span>    <span class="token comment">// try expect(ptr.? != null);</span>    <span class="token comment">// error: comparison of 'i32' with null</span>    <span class="token comment">// try expect(ptr.?.* != null);</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span>ptr <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// An array of [*]const u8, its length is 1</span><span class="token keyword">const</span> window_name <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span><span class="token string">"window name"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// An array of ?[*]const u8</span><span class="token keyword">const</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>window_name<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Zig supports pointer arithmetic. It’s better to assign the pointer to <code>[*]T</code> and increment that variable.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">var</span> array <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> length<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> slice <span class="token operator">=</span> array<span class="token punctuation">[</span>length<span class="token operator">..</span>array<span class="token punctuation">.</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// don't do this</span><span class="token comment">// now the slice is in an bad state since len has not been updated</span><span class="token comment">// slice.len is still 4</span>slice<span class="token punctuation">.</span>ptr <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Conversion between an integer address, a pointer</span><span class="token keyword">const</span> ptr<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token builtin">@ptrFromInt</span><span class="token punctuation">(</span><span class="token number">0xdeadbee0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> addr <span class="token operator">=</span> <span class="token builtin">@intFromPtr</span><span class="token punctuation">(</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// pointer casting</span><span class="token keyword">const</span> bytes <span class="token keyword">align</span><span class="token punctuation">(</span><span class="token builtin">@alignOf</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x12</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// @ptrCast is an unsafe operation</span><span class="token comment">// u32_ptr.* == 0x12121212</span><span class="token keyword">const</span> u32_ptr<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token builtin">@ptrCast</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>bytes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// a straightforward way to do the above than pointer casting</span><span class="token comment">// u32_value == 0x12121212</span><span class="token keyword">const</span> u32_value <span class="token operator">=</span> <span class="token builtin">@as</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u32</span><span class="token punctuation">,</span> <span class="token builtin">@bitCast</span><span class="token punctuation">(</span>bytes<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">// another way, using a slice narrowing cast</span><span class="token comment">// u32_value == 0x12121212</span><span class="token keyword">const</span> u32_value <span class="token operator">=</span> std<span class="token punctuation">.</span>mem<span class="token punctuation">.</span><span class="token function">bytesAsSlice</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u32</span><span class="token punctuation">,</span> bytes<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Sentinel-Terminated Pointers</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">"c"</span> <span class="token keyword">fn</span> <span class="token function">printf</span><span class="token punctuation">(</span>format<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">c_int</span></span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ok</span>    _ <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Hello, world!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// error: expected type '[*:0]const u8', found '[14:0]u8'</span>    <span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token string">"Hello, world!\n"</span><span class="token punctuation">;</span>    _ <span class="token operator">=</span> <span class="token function">printf</span><span class="token punctuation">(</span>msg<span class="token operator">.*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The syntax <code>[*:x]T</code> describes a pointer that has a length determined by a sentinel value. This provides protection against buffer overflow and overreads.</p><p>Slices have bounds checking, generally prefer <a href="https://ziglang.org/documentation/master/#Slices">Slices</a> rather than <a href="https://ziglang.org/documentation/master/#Sentinel-Terminated-Pointers">Sentinel-Terminated Pointers</a>.</p><h2 id="struct"><a href="#struct" class="headerlink" title="struct"></a>struct</h2><p>Zig gives no guarantees about the order of fields and the size of the struct.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> <span class="token number">2.0</span><span class="token punctuation">,</span> <span class="token comment">// default value</span>    y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// an instance</span><span class="token keyword">var</span> p <span class="token operator">=</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.12</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// calculate a struct base pointer given a field pointer</span><span class="token keyword">const</span> point <span class="token operator">=</span> <span class="token builtin">@fieldParentPtr</span><span class="token punctuation">(</span>Point<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>p<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Anonymous struct literals</span><span class="token comment">// no copy</span><span class="token keyword">var</span> pt<span class="token punctuation">:</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0.12</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">3.0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Structs can have methods</span><span class="token keyword">const</span> <span class="token class-name">Vec</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span>    z<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">init</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span> z<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">)</span> <span class="token class-name">Vec</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">Vec</span> <span class="token punctuation">&#123;</span>            <span class="token punctuation">.</span>x <span class="token operator">=</span> x<span class="token punctuation">,</span>            <span class="token punctuation">.</span>y <span class="token operator">=</span> y<span class="token punctuation">,</span>            <span class="token punctuation">.</span>z <span class="token operator">=</span> z<span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">dot</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">,</span> other<span class="token punctuation">:</span> <span class="token class-name">Vec</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> other<span class="token punctuation">.</span>x <span class="token operator">+</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> other<span class="token punctuation">.</span>y <span class="token operator">+</span> self<span class="token punctuation">.</span>z <span class="token operator">*</span> other<span class="token punctuation">.</span>z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Structs can have declarations</span><span class="token comment">// Structs can have 0 fields</span><span class="token comment">// @sizeOf(Empty) == 0</span><span class="token comment">// Empty.PI is a struct namespaced variable</span><span class="token keyword">const</span> <span class="token class-name">Empty</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">pub</span> <span class="token keyword">const</span> PI <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// you can still instantiate an empty struct</span><span class="token keyword">const</span> does_nothing <span class="token operator">=</span> <span class="token class-name">Empty</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Return a struct from a function</span><span class="token comment">// This is how we do generics in Zig</span><span class="token keyword">fn</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token keyword">comptime</span> T<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">type</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">type</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">pub</span> <span class="token keyword">const</span> <span class="token class-name">Node</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>            prev<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>Node</span><span class="token punctuation">,</span>            next<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>Node</span><span class="token punctuation">,</span>            data<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        first<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>Node</span><span class="token punctuation">,</span>        last<span class="token punctuation">:</span>  <span class="token class-name"><span class="token operator">?</span><span class="token operator">*</span>Node</span><span class="token punctuation">,</span>        len<span class="token punctuation">:</span>   <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> list <span class="token operator">=</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ListOfInts <span class="token operator">=</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> node <span class="token operator">=</span> <span class="token class-name">ListOfInts<span class="token punctuation">.</span>Node</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>prev <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> list2 <span class="token operator">=</span> <span class="token function">LinkedList</span><span class="token punctuation">(</span><span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>first <span class="token operator">=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">,</span>    <span class="token punctuation">.</span>last <span class="token operator">=</span> <span class="token operator">&amp;</span>node<span class="token punctuation">,</span>    <span class="token punctuation">.</span>len <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// When using a pointer to a struct, fields can be accessed directly,</span><span class="token comment">// without explicitly dereferencing the pointer.</span><span class="token comment">// equal: list2.first.?.*.data</span>_ <span class="token operator">=</span> list2<span class="token punctuation">.</span>first<span class="token operator">.?</span><span class="token punctuation">.</span>data<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Other types of struct:</p><ul><li><p><a href="https://ziglang.org/documentation/master/#extern-struct">extern struct</a></p><p>To be compatible with the C ABI.</p></li><li><p><a href="https://ziglang.org/documentation/master/#packed-struct">packed struct</a></p><p>Have guaranteed in-memory layout.</p></li></ul><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Anonymous structs can be created without specifying field names,</span><span class="token comment">// and are referred to as "tuples". </span><span class="token comment">// The fields are implicitly named using numbers starting from 0.</span><span class="token keyword">const</span> values <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span>    <span class="token builtin">@as</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u32</span><span class="token punctuation">,</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token builtin">@as</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f64</span><span class="token punctuation">,</span> <span class="token number">12.34</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token string">"hi"</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span> <span class="token operator">++</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span> <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// values.len == 6</span><span class="token comment">// values.@"3"[0] == 'h'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Like arrays, tuples have a <code>.len</code> field, can be indexed (provided the index is comptime-known) and work with the <code>++</code> and <code>**</code> operators. </p><h2 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> <span class="token class-name">Type</span> <span class="token operator">=</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    ok<span class="token punctuation">,</span>    not_ok<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// @typeInfo can be used to access the integer tag type of an enum.</span><span class="token comment">// @typeInfo(Type).Enum.tag_type == u2</span><span class="token keyword">const</span> c <span class="token operator">=</span> Type<span class="token punctuation">.</span>ok<span class="token punctuation">;</span><span class="token comment">// Enum literals</span><span class="token comment">// Specifying the name of an enum field without specifying the enum type</span><span class="token keyword">const</span> c2<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>ok<span class="token punctuation">;</span><span class="token comment">// If you want access to the ordinal value of an enum, you</span><span class="token comment">// can specify the tag type.</span><span class="token keyword">const</span> <span class="token class-name">Value</span> <span class="token operator">=</span> <span class="token keyword">enum</span><span class="token punctuation">(</span>u2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    zero<span class="token punctuation">,</span>    one<span class="token punctuation">,</span>    two<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Now you can cast between u2 and Value.</span><span class="token comment">// @intFromEnum(Value.zero) == 0</span><span class="token comment">// You can override the ordinal value for an enum.</span><span class="token keyword">const</span> <span class="token class-name">Value2</span> <span class="token operator">=</span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u32</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    hundred <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">,</span>    thousand <span class="token operator">=</span> <span class="token number">1000</span><span class="token punctuation">,</span>    million <span class="token operator">=</span> <span class="token number">1000000</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// @intFromEnum(Value2.hundred) == 100</span><span class="token comment">// You can also override only some values.</span><span class="token keyword">const</span> <span class="token class-name">Value3</span> <span class="token operator">=</span> <span class="token keyword">enum</span><span class="token punctuation">(</span>u4<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">,</span>    b <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span>    c<span class="token punctuation">,</span>    d <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">,</span>    e<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// @intFromEnum(Value3.a) == 0</span><span class="token comment">// @intFromEnum(Value3.c) == 9</span><span class="token comment">// @intFromEnum(Value3.e) == 5</span><span class="token comment">// Enums can have methods, the same as structs and unions.</span><span class="token comment">// Enum methods are not special, they are only namespaced</span><span class="token comment">// functions</span><span class="token keyword">const</span> <span class="token class-name">Suit</span> <span class="token operator">=</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    clubs<span class="token punctuation">,</span>    spades<span class="token punctuation">,</span>    diamonds<span class="token punctuation">,</span>    hearts<span class="token punctuation">,</span>    <span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">isClubs</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Suit</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> self <span class="token operator">==</span> Suit<span class="token punctuation">.</span>clubs<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Non-exhaustive enum</span><span class="token comment">// Have a trailing '_' field</span><span class="token keyword">const</span> <span class="token class-name">Number</span> <span class="token operator">=</span> <span class="token keyword">enum</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u8</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    one<span class="token punctuation">,</span>    two<span class="token punctuation">,</span>    three<span class="token punctuation">,</span>    _<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// A switch on a non-exhaustive enum can include a '_' prong</span><span class="token comment">// as an alternative to an else prong</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>one <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>two<span class="token punctuation">,</span>    <span class="token punctuation">.</span>three <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    _ <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>There is <a href="https://ziglang.org/documentation/master/#extern-enum">extern enum</a>, to be compatible with the C ABI.</p><h2 id="union"><a href="#union" class="headerlink" title="union"></a>union</h2><p>Only one field can be active at a time. The in-memory representation of bare unions is not guaranteed.</p><p>Use <a href="https://ziglang.org/documentation/master/#ptrCast">@ptrCast</a>, or use an <a href="https://ziglang.org/documentation/master/#extern-union">extern union</a> or a <a href="https://ziglang.org/documentation/master/#packed-union">packed union</a> which have guaranteed in-memory layout.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> <span class="token class-name">Payload</span> <span class="token operator">=</span> <span class="token keyword">union</span> <span class="token punctuation">&#123;</span>    int<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i64</span></span><span class="token punctuation">,</span>    float<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">,</span>    boolean<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// "int" field is active</span><span class="token keyword">var</span> payload <span class="token operator">=</span> <span class="token class-name">Payload</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>int <span class="token operator">=</span> <span class="token number">1234</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// to access the value</span>_ <span class="token operator">=</span> payload<span class="token punctuation">.</span>int<span class="token punctuation">;</span><span class="token comment">// To activate another field by assigning the entire union</span>payload <span class="token operator">=</span> <span class="token class-name">Payload</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>float <span class="token operator">=</span> <span class="token number">12.34</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// anonymous union literal</span><span class="token keyword">var</span> p<span class="token punctuation">:</span> <span class="token class-name">Payload</span> <span class="token operator">=</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">.</span>int <span class="token operator">=</span> <span class="token number">42</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Tagged union, used with switch expressions</span><span class="token keyword">const</span> <span class="token class-name">ComplexTypeTag</span> <span class="token operator">=</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    ok<span class="token punctuation">,</span>    not_ok<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// The field names of ComplexType and ComplexTypeTag must be same </span><span class="token keyword">const</span> <span class="token class-name">ComplexType</span> <span class="token operator">=</span> <span class="token keyword">union</span><span class="token punctuation">(</span>ComplexTypeTag<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    ok<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span>    not_ok<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> c <span class="token operator">=</span> <span class="token class-name">ComplexType</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>ok <span class="token operator">=</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">switch</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// |x| syntax captures the matched value</span>    <span class="token comment">// *value make it a pointer</span>    ComplexTypeTag<span class="token punctuation">.</span>ok <span class="token operator">=></span> <span class="token operator">|</span><span class="token operator">*</span>value<span class="token operator">|</span> value<span class="token operator">.*</span> <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">,</span>    ComplexTypeTag<span class="token punctuation">.</span>not_ok <span class="token operator">=></span> <span class="token keyword">unreachable</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// c.ok == 43</span><span class="token comment">// Tagged union, but to infer enum tag type</span><span class="token comment">// Pay attention to the differences 'union(ComplexTypeTag)'</span><span class="token comment">// and 'union(enum)'</span><span class="token keyword">const</span> <span class="token class-name">Variant</span> <span class="token operator">=</span> <span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    int<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">,</span>    boolean<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">,</span>    <span class="token comment">// void can be omitted when inferring enum tag type.</span>    none<span class="token punctuation">,</span> <span class="token comment">// void</span>    <span class="token comment">// unions can have methods just like structs and enums</span>    <span class="token keyword">fn</span> <span class="token function">truthy</span><span class="token punctuation">(</span>self<span class="token punctuation">:</span> <span class="token class-name">Variant</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>self<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            Variant<span class="token punctuation">.</span>int <span class="token operator">=></span> <span class="token operator">|</span>x_int<span class="token operator">|</span> x_int <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">,</span>            Variant<span class="token punctuation">.</span>boolean <span class="token operator">=></span> <span class="token operator">|</span>x_bool<span class="token operator">|</span> x_bool<span class="token punctuation">,</span>            Variant<span class="token punctuation">.</span>none <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Other types of union:</p><ul><li><p><a href="https://ziglang.org/documentation/master/#extern-union">extern union</a></p><p>To be compatible with the C ABI.</p></li><li><p><a href="https://ziglang.org/documentation/master/#packed-union">packed union</a></p><p>Have guaranteed in-memory layout.</p></li></ul><h2 id="opaque"><a href="#opaque" class="headerlink" title="opaque"></a>opaque</h2><p><code>opaque &#123;&#125;</code> declares a new type with an unknown (but non-zero) size and alignment.</p><p>It can contain declarations the same as <a href="https://ziglang.org/documentation/master/#struct">structs</a>, <a href="https://ziglang.org/documentation/master/#union">unions</a>, and <a href="https://ziglang.org/documentation/master/#enum">enums</a>.</p><p>This is typically used for type safety when interacting with C code that does not expose struct details.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> Derp <span class="token operator">=</span> <span class="token class-name">opaque</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> Wat <span class="token operator">=</span> <span class="token class-name">opaque</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">extern</span> <span class="token keyword">fn</span> <span class="token function">bar</span><span class="token punctuation">(</span>d<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>Derp</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">foo</span><span class="token punctuation">(</span>w<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span>Wat</span><span class="token punctuation">)</span> <span class="token function">callconv</span><span class="token punctuation">(</span><span class="token punctuation">.</span>C<span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// error: expected type '*test_opaque.Derp', found</span>    <span class="token comment">// '*test_opaque.Wat'</span>    <span class="token function">bar</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">test</span> <span class="token string">"call foo"</span> <span class="token punctuation">&#123;</span>    <span class="token function">foo</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Blocks"><a href="#Blocks" class="headerlink" title="Blocks"></a>Blocks</h2><p>Blocks are expressions.</p><p>Blocks are used to limit the scope of variable declarations.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    _ <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// An empty block is equivalent to void&#123;&#125;</span><span class="token keyword">const</span> a <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// labeled block</span><span class="token comment">// break can be used to return a value from the block</span><span class="token comment">// "blk" can be any name</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> y<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Shadowing"><a href="#Shadowing" class="headerlink" title="Shadowing"></a>Shadowing</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    <span class="token comment">// error: local variable 'pi' shadows local constant from outer</span>    <span class="token comment">// scope</span>    <span class="token keyword">var</span> pi<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// This is ok</span><span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> pi <span class="token operator">=</span> <span class="token number">3.14</span><span class="token punctuation">;</span>    _ <span class="token operator">=</span> pi<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> pi<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    _ <span class="token operator">=</span> pi<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>Identifiers must start with an alphabetic character or underscore and may be followed by any number of alphanumeric characters or underscores. They must not overlap with any keywords.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> @"identifier with spaces in it" <span class="token operator">=</span> <span class="token number">0xff</span><span class="token punctuation">;</span><span class="token keyword">const</span> c <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>c<span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">extern</span> <span class="token string">"c"</span> <span class="token keyword">fn</span> @"<span class="token keyword">error</span>"<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">void</span></span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>  red<span class="token punctuation">,</span>  @"really red"<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> color<span class="token punctuation">:</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token punctuation">.</span>@"really red"<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If a name that does not fit these requirements is needed, the <code>@&quot;&quot;</code> syntax may be used.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://ziglang.org/documentation/master/#Containers">Container</a> level variables have static lifetime and are order-independent and lazily analyzed.</p><p>The initialization value of container level variables is implicitly <a href="https://ziglang.org/documentation/master/#comptime">comptime</a>. If a container level variable is <code>const</code> then its value is <code>comptime</code>-known, otherwise it is runtime-known.</p><blockquote><p>A <em>container</em> in Zig is any syntactical construct that acts as a namespace to hold <a href="https://ziglang.org/documentation/master/#Container-Level-Variables">variable</a> and <a href="https://ziglang.org/documentation/master/#Functions">function</a> declarations.</p></blockquote><blockquote><p>Containers are also type definitions which can be instantiated. <a href="https://ziglang.org/documentation/master/#struct">Structs</a>, <a href="https://ziglang.org/documentation/master/#enum">enums</a>, <a href="https://ziglang.org/documentation/master/#union">unions</a>, <a href="https://ziglang.org/documentation/master/#opaque">opaques</a>, and even Zig source files themselves are containers.</p></blockquote><blockquote><p>Although containers (except Zig source files) use curly braces to surround their definition, they should not be confused with <a href="https://ziglang.org/documentation/master/#Blocks">blocks</a> or functions. Containers do not contain statements.</p></blockquote><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">fn</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token class-name">S</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    S<span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> S<span class="token punctuation">.</span>x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is also possible to have local variables with static lifetime by using containers inside functions.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// ...</span><span class="token keyword">test</span> <span class="token string">"comptime vars"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">comptime</span> <span class="token keyword">var</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    y <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span>y <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A local variable may be qualified with the <code>comptime</code> keyword. This causes the variable’s value to be <code>comptime</code>-known, and all loads and stores of the variable to happen during semantic analysis of the program, rather than at runtime.<br>All variables declared in a <code>comptime</code> expression are implicitly <code>comptime</code> variables.</p><h2 id="switch"><a href="#switch" class="headerlink" title="switch"></a>switch</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span> <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span><span class="token keyword">const</span> zz<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span> <span class="token operator">=</span> <span class="token number">103</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Multiple cases</span>    <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span> <span class="token operator">=></span> <span class="token number">0</span><span class="token punctuation">,</span>    <span class="token comment">// Ranges. These are inclusive of both ends.</span>    <span class="token number">5</span><span class="token operator">...</span><span class="token number">100</span> <span class="token operator">=></span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token comment">// if a == 101, b == 11</span>    <span class="token number">101</span> <span class="token operator">=></span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> c<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> c <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token comment">// Switching on arbitrary expressions is allowed as long as the</span>    <span class="token comment">// expression is known at compile-time.</span>    <span class="token comment">// if a == 103, b == 103</span>    zz <span class="token operator">=></span> zz<span class="token punctuation">,</span>    <span class="token comment">// if a == 105, b == 107</span>    <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> d<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> e<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">100</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> d <span class="token operator">+</span> e<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token operator">=></span> <span class="token number">107</span><span class="token punctuation">,</span>    <span class="token comment">// When a switch expression does not have an else clause,</span>    <span class="token comment">// it must exhaustively list all the possible values.</span>    <span class="token keyword">else</span> <span class="token operator">=></span> <span class="token number">9</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Switching with Enum literals</span><span class="token keyword">const</span> <span class="token class-name">Color</span> <span class="token operator">=</span> <span class="token keyword">enum</span> <span class="token punctuation">&#123;</span>    auto<span class="token punctuation">,</span>    off<span class="token punctuation">,</span>    on<span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> color <span class="token operator">=</span> Color<span class="token punctuation">.</span>off<span class="token punctuation">;</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>color<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token punctuation">.</span>auto <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>on <span class="token operator">=></span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">.</span>off <span class="token operator">=></span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// switch can be used to capture the field values of a Tagged union</span><span class="token keyword">const</span> <span class="token class-name">Point</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span>    y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// if 'Item' is not a tagged union,</span><span class="token comment">// error: union 'Item' has no member named 'a'</span><span class="token comment">// error: union field missing type. The error message is about 'Item.d'</span><span class="token keyword">const</span> <span class="token class-name">Item</span> <span class="token operator">=</span> <span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">,</span>    c<span class="token punctuation">:</span> <span class="token class-name">Point</span><span class="token punctuation">,</span>    d<span class="token punctuation">,</span> <span class="token comment">// void</span>    e<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token class-name">Item</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>c <span class="token operator">=</span> <span class="token class-name">Point</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> b <span class="token operator">=</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// |item| captures the matched value</span>    Item<span class="token punctuation">.</span>a<span class="token punctuation">,</span> Item<span class="token punctuation">.</span>e <span class="token operator">=></span> <span class="token operator">|</span>item<span class="token operator">|</span> item<span class="token punctuation">,</span>    <span class="token comment">// *item make it a pointer</span>    Item<span class="token punctuation">.</span>c <span class="token operator">=></span> <span class="token operator">|</span><span class="token operator">*</span>item<span class="token operator">|</span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        item<span class="token operator">.*</span><span class="token punctuation">.</span>x <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> <span class="token number">6</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    Item<span class="token punctuation">.</span>d <span class="token operator">=></span> <span class="token number">8</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// Inline switch</span><span class="token keyword">fn</span> <span class="token function">isFieldOptional</span><span class="token punctuation">(</span><span class="token keyword">comptime</span> T<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">type</span></span><span class="token punctuation">,</span> field_index<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">bool</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> fields <span class="token operator">=</span> <span class="token builtin">@typeInfo</span><span class="token punctuation">(</span>T<span class="token punctuation">)</span><span class="token punctuation">.</span>Struct<span class="token punctuation">.</span>fields<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>field_index<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// can't write the code like this</span>        <span class="token comment">// the error message:</span>        <span class="token comment">// error: values of type '[]const builtin.Type.StructField'</span>        <span class="token comment">// must be comptime-known, but index value is runtime-known</span>        <span class="token comment">// 0...fields.len - 1 =>  @typeInfo(fields[field_index].type)</span>        <span class="token comment">//    == .Optional,</span>        <span class="token comment">// This prong is analyzed `fields.len - 1` times with `idx`</span>        <span class="token comment">// being a unique comptime-known value each time.</span>        <span class="token keyword">inline</span> <span class="token number">0</span><span class="token operator">...</span>fields<span class="token punctuation">.</span>len <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">=></span> <span class="token operator">|</span>idx<span class="token operator">|</span> <span class="token builtin">@typeInfo</span><span class="token punctuation">(</span>fields<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token builtin-type keyword">type</span><span class="token punctuation">)</span>            <span class="token operator">==</span> <span class="token punctuation">.</span>Optional<span class="token punctuation">,</span>        <span class="token keyword">else</span> <span class="token operator">=></span> <span class="token keyword">return</span> <span class="token keyword">error</span><span class="token punctuation">.</span>IndexOutOfBounds<span class="token punctuation">,</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> <span class="token class-name">Struct1</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token operator">?</span><span class="token builtin-type keyword">u32</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">isFieldOptional</span><span class="token punctuation">(</span>Struct1<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// false</span><span class="token function">isFieldOptional</span><span class="token punctuation">(</span>Struct1<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span class="token comment">// Inline switch, to obtain the union's enum tag value</span><span class="token keyword">const</span> <span class="token class-name">U</span> <span class="token operator">=</span> <span class="token keyword">union</span><span class="token punctuation">(</span><span class="token keyword">enum</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">,</span>    b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">getNum</span><span class="token punctuation">(</span>u<span class="token punctuation">:</span> <span class="token class-name">U</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">switch</span> <span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 'inline else' let the compiler to check every possible case</span>        <span class="token comment">// 'tag' is to obtain the union's enum tag value</span>        <span class="token keyword">inline</span> <span class="token keyword">else</span> <span class="token operator">=></span> <span class="token operator">|</span>num<span class="token punctuation">,</span> tag<span class="token operator">|</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>tag <span class="token operator">==</span> <span class="token punctuation">.</span>b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token builtin">@intFromFloat</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">return</span> num<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> u <span class="token operator">=</span> <span class="token class-name">U</span><span class="token punctuation">&#123;</span> <span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">42</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>_ <span class="token operator">=</span> <span class="token function">getNum</span><span class="token punctuation">(</span>u<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">42</span><span class="token punctuation">;</span> <span class="token comment">// true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// with a continue expression</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">// with a more complicated continue expression</span><span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">*</span> j <span class="token operator">&lt;</span> <span class="token number">2000</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span> i <span class="token operator">*=</span> <span class="token number">2</span><span class="token punctuation">;</span> j <span class="token operator">*=</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// break a loop and return a value</span><span class="token keyword">fn</span> <span class="token function">rangeHasNumber</span><span class="token punctuation">(</span>begin<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> end<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">,</span> number<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> i <span class="token operator">=</span> begin<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> end<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">==</span> number<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// break, like return, accepts a value parameter</span>            <span class="token keyword">break</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token comment">// When you break from a while loop, the else branch is not</span>    <span class="token comment">// evaluated. otherwise, it will be executed when the condition</span>    <span class="token comment">// of the while loop is tested as false.</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token boolean">false</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Labeled while, to use 'break'</span><span class="token label">outer</span><span class="token punctuation">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">outer</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// Labeled while, to use 'continue'</span><span class="token label">outer</span><span class="token punctuation">:</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span> <span class="token punctuation">:</span><span class="token label">outer</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// With optionals</span><span class="token keyword">var</span> numbers_left<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token comment">// ?u32, an optional: u32 or null</span><span class="token keyword">fn</span> <span class="token function">eventuallyNullSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">?</span><span class="token builtin-type keyword">u32</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Zig style "if...else"</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">null</span> <span class="token keyword">else</span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        numbers_left <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> numbers_left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> sum<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">// When the |x| syntax is present, the while condition must be</span><span class="token comment">// an optional.</span><span class="token comment">// The loop exits when null is encountered.</span><span class="token comment">// |value| captures the return value of eventuallyNullSequence()</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">eventuallyNullSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    sum <span class="token operator">+=</span> value<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// will be here on the first null value encountered</span>    <span class="token comment">// sum == 3</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// while with Error Unions</span><span class="token keyword">const</span> expect <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token keyword">test</span> <span class="token string">"while error union capture"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> sum1<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    numbers_left <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// the condition is an error union</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">eventuallyErrorSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>        sum1 <span class="token operator">+=</span> value<span class="token punctuation">;</span>    <span class="token comment">// capturing the error, the loop is finished</span>    <span class="token comment">// "else |x|" syntax is present, the while condition must have</span>    <span class="token comment">// an Error Union Type</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>err<span class="token operator">|</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span>err <span class="token operator">==</span> <span class="token keyword">error</span><span class="token punctuation">.</span>ReachedZero<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">var</span> numbers_left<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token comment">// !u32, not ?u32, they are different</span><span class="token comment">// !u32 is an error union</span><span class="token keyword">fn</span> <span class="token function">eventuallyErrorSequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">u32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>numbers_left <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">error</span><span class="token punctuation">.</span>ReachedZero <span class="token keyword">else</span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>        numbers_left <span class="token operator">-=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> numbers_left<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://ziglang.org/documentation/master/#inline-while">inline while</a> causes the loop to be <strong>unrolled</strong>, which allows the code to do some things which only work at compile time.</p><p>It is recommended to use inline loops only for one of these reasons:</p><ul><li><p>To execute at comptime for the semantics to work.</p></li><li><p>You have a benchmark to prove that forcibly unrolling the loop in this way is measurably faster.</p></li></ul><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// items can also be slice</span><span class="token keyword">const</span> items <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> items2 <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// items[3] is not included</span><span class="token keyword">for</span> <span class="token punctuation">(</span>items<span class="token punctuation">[</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// "i" is the index</span><span class="token keyword">for</span> <span class="token punctuation">(</span>items<span class="token punctuation">,</span> <span class="token number">0</span><span class="token operator">..</span><span class="token punctuation">)</span> <span class="token operator">|</span>v<span class="token punctuation">,</span> i<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// To iterate over consecutive integers.</span><span class="token comment">// 3 is not included</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token operator">..</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">|</span>i<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// Iterate over multiple objects.</span><span class="token comment">// The length of items and items2 must be equal at the start of the loop</span><span class="token keyword">for</span> <span class="token punctuation">(</span>items<span class="token punctuation">,</span> items2<span class="token punctuation">)</span> <span class="token operator">|</span>v1<span class="token punctuation">,</span> v2<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// "value" is a pointer</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token operator">&amp;</span>items<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">*</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// For loops can also be used as expressions</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>items<span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// Labeled for</span><span class="token keyword">var</span> count<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>outer<span class="token punctuation">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">..</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span>        count <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">outer</span><span class="token punctuation">;</span>        <span class="token comment">// continue :outer;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://ziglang.org/documentation/master/#inline-for">inline for</a> is like <a href="https://ziglang.org/documentation/master/#inline-while">inline while</a>.</p><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// If expressions have three types:</span><span class="token comment">// bool</span><span class="token comment">// ?T</span><span class="token comment">// anyerror!T</span><span class="token comment">// To be used as expressions.</span><span class="token keyword">const</span> result <span class="token operator">=</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token number">47</span> <span class="token keyword">else</span> <span class="token number">3089</span><span class="token punctuation">;</span><span class="token comment">// if boolean</span><span class="token keyword">const</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token keyword">const</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">!=</span> b<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">==</span> <span class="token number">9</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// if optional</span><span class="token keyword">var</span> c<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// Access the value by reference using a pointer capture.</span><span class="token keyword">if</span> <span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">*</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">.*</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// if error union</span><span class="token keyword">const</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">anyerror</span><span class="token operator">!</span><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>err<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// The else and |err| capture is strictly required.</span>    _ <span class="token operator">=</span> err<span class="token punctuation">;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">*</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    value<span class="token operator">.*</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// if error union with optional</span><span class="token keyword">const</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">anyerror</span><span class="token operator">!</span><span class="token operator">?</span><span class="token builtin-type keyword">u32</span></span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span>optional_value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// optional_value.? == 0</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// a pointer capture</span><span class="token keyword">if</span> <span class="token punctuation">(</span>a<span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">*</span>optional_value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>optional_value<span class="token operator">.*</span><span class="token punctuation">)</span> <span class="token operator">|</span><span class="token operator">*</span>value<span class="token operator">|</span> <span class="token punctuation">&#123;</span>        value<span class="token operator">.*</span> <span class="token operator">=</span> <span class="token number">9</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>_<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// combining if and switch</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">parseU64</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span>number<span class="token operator">|</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token operator">|</span>err<span class="token operator">|</span> <span class="token keyword">switch</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="defer"><a href="#defer" class="headerlink" title="defer"></a>defer</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> print <span class="token operator">=</span> std<span class="token punctuation">.</span>debug<span class="token punctuation">.</span>print<span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">deferErrorExample</span><span class="token punctuation">(</span>is_error<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">bool</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"\nstart of function\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// This will always be executed on exit</span>    <span class="token keyword">defer</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"end of function\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// This will only be executed if the scope returns with an error</span>    <span class="token keyword">errdefer</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"encountered an error!\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>is_error<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">error</span><span class="token punctuation">.</span>DeferError<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">deferErrorCaptureExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// get additional error message</span>    <span class="token keyword">errdefer</span> <span class="token operator">|</span>err<span class="token operator">|</span> <span class="token punctuation">&#123;</span>        <span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"the error is &#123;s&#125;\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span><span class="token builtin">@errorName</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">error</span><span class="token punctuation">.</span>DeferError<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">test</span> <span class="token string">"errdefer unwinding"</span> <span class="token punctuation">&#123;</span>    <span class="token function">deferErrorExample</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">deferErrorExample</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">deferErrorCaptureExample</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If multiple defer statements are specified, they will be executed in the <strong>reverse order</strong> they were run.</p><p>Inside a defer expression <strong>the return statement is not allowed</strong>.</p><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// The export specifier makes a function externally visible in the</span><span class="token comment">// generated object file, and makes it use the C ABI.</span><span class="token keyword">export</span> <span class="token keyword">fn</span> <span class="token function">sub</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// The extern specifier is used to declare a function that will be</span><span class="token comment">// resolved at link time</span><span class="token comment">// "c" specifies the library that has the function. ("c" -> libc.so)</span><span class="token keyword">extern</span> <span class="token string">"c"</span> <span class="token keyword">fn</span> <span class="token function">atan2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">f64</span></span><span class="token punctuation">;</span><span class="token comment">// The inline calling convention forces a function to be inlined at all</span><span class="token comment">// call sites.</span><span class="token comment">// If the function cannot be inlined, it is a compile-time error.</span><span class="token keyword">fn</span> <span class="token function">shiftLeftOne</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span><span class="token punctuation">)</span> <span class="token function">callconv</span><span class="token punctuation">(</span><span class="token punctuation">.</span>Inline<span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">u32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// The pub specifier allows the function to be visible when importing.</span><span class="token comment">// Another file can use @import and call sub2</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">sub2</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> a <span class="token operator">-</span> b<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token comment">// Function pointers are prefixed with `*const `.</span><span class="token keyword">const</span> Call2Op <span class="token operator">=</span> <span class="token operator">*</span><span class="token keyword">const</span> <span class="token keyword">fn</span> <span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">doOp</span><span class="token punctuation">(</span>fnCall<span class="token punctuation">:</span> <span class="token class-name">Call2Op</span><span class="token punctuation">,</span> op1<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">,</span> op2<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i8</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">fnCall</span><span class="token punctuation">(</span>op1<span class="token punctuation">,</span> op2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Primitive types such as <a href="https://ziglang.org/documentation/master/#Integers">Integers</a> and <a href="https://ziglang.org/documentation/master/#Floats">Floats</a> passed as parameters are copied.</p><p>When Structs, unions, and arrays are passed as parameters, Zig may choose to copy and pass by value, or pass by reference, whichever way Zig decides will be faster.</p><p>For extern functions, Zig follows the C ABI for passing structs and unions by value.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">//  "anytype" will be inferred when the function is called.</span><span class="token keyword">fn</span> <span class="token function">addFortyTwo</span><span class="token punctuation">(</span>x<span class="token punctuation">:</span> <span class="token keyword">anytype</span><span class="token punctuation">)</span> <span class="token builtin">@TypeOf</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> x <span class="token operator">+</span> <span class="token number">42</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Errors"><a href="#Errors" class="headerlink" title="Errors"></a>Errors</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// "number" is the returned value of parseU64(), or the default </span><span class="token comment">// value: 13</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">parseU64</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token comment">// using named block</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">parseU64</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token label">blk</span><span class="token punctuation">:</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// do things</span>    <span class="token keyword">break</span> <span class="token punctuation">:</span><span class="token label">blk</span> <span class="token number">13</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// if the expression will never be an error</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">parseU64</span><span class="token punctuation">(</span><span class="token string">"1234"</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token keyword">unreachable</span><span class="token punctuation">;</span><span class="token comment">// The following two are equal</span><span class="token comment">// return an error or continue</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token function">parseU64</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token keyword">catch</span> <span class="token operator">|</span>err<span class="token operator">|</span> <span class="token keyword">return</span> err<span class="token punctuation">;</span><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token keyword">try</span> <span class="token function">parseU64</span><span class="token punctuation">(</span>str<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Casting"><a href="#Casting" class="headerlink" title="Casting"></a>Casting</h2><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">var</span> a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">// type coercion - @as builtin</span><span class="token keyword">var</span> b <span class="token operator">=</span> <span class="token builtin">@as</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u16</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// error: ambiguous coercion of division operands 'comptime_float'</span><span class="token comment">// and 'comptime_int'; non-zero remainder '4'</span><span class="token keyword">var</span> f<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> <span class="token number">54.0</span> <span class="token operator">/</span> <span class="token number">5</span><span class="token punctuation">;</span><span class="token comment">// OK</span><span class="token keyword">var</span> f<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span> <span class="token operator">=</span> <span class="token number">54.0</span> <span class="token operator">/</span> <span class="token builtin">@as</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f32</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token class-name"><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">111</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">anyerror</span><span class="token operator">!</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token class-name"><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">111</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token class-name"><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">&#123;</span> <span class="token char">'h'</span><span class="token punctuation">,</span> <span class="token char">'e'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token char">'l'</span><span class="token punctuation">,</span> <span class="token number">111</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> buf<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token string">"hello"</span><span class="token operator">.*</span><span class="token punctuation">;</span><span class="token comment">// the array length becomes the slice length</span><span class="token keyword">const</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">;</span><span class="token comment">// Single-item pointers to arrays can be coerced to many-item pointers.</span><span class="token keyword">const</span> x2<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">;</span><span class="token keyword">const</span> x3<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">?</span><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token builtin-type keyword">u8</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>buf<span class="token punctuation">;</span><span class="token comment">// Single-item pointers can be cast to len-1 single-item arrays.</span><span class="token keyword">var</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token keyword">const</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token operator">*</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token operator">&amp;</span>x<span class="token punctuation">;</span><span class="token keyword">const</span> z<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token operator">*</span><span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> y<span class="token punctuation">;</span><span class="token comment">// optionals wrapped in error union</span><span class="token keyword">const</span> x<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">anyerror</span><span class="token operator">!</span><span class="token operator">?</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span><span class="token keyword">const</span> y<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">anyerror</span><span class="token operator">!</span><span class="token operator">?</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">try</span> x<span class="token punctuation">)</span><span class="token operator">.?</span> <span class="token operator">==</span> <span class="token number">1234</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">try</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="comptime"><a href="#comptime" class="headerlink" title="comptime"></a>comptime</h2><ul><li><p>Compile-time Parameters</p></li><li><p>Compile-time Variables</p></li><li><p>Compile-time Expressions</p></li></ul><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Compile-time Parameters</span><span class="token keyword">fn</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token keyword">comptime</span> T<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">type</span></span><span class="token punctuation">,</span> a<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name">T</span><span class="token punctuation">)</span> <span class="token class-name">T</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">></span> b<span class="token punctuation">)</span> a <span class="token keyword">else</span> b<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">gimmeTheBiggerFloat</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">f32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token builtin-type keyword">f32</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">gimmeTheBiggerInteger</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">u64</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">max</span><span class="token punctuation">(</span><span class="token builtin-type keyword">u64</span><span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Zig, types are first-class citizens. They can be assigned to variables, passed as parameters to functions, and returned from functions. However, they can only be used in expressions which are known at compile-time.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token comment">// Compile-time Variables</span><span class="token keyword">const</span> expect <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>testing<span class="token punctuation">.</span>expect<span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token class-name">CmdFn</span> <span class="token operator">=</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    name<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span>    func<span class="token punctuation">:</span> <span class="token keyword">fn</span><span class="token punctuation">(</span><span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span> <span class="token builtin-type keyword">i32</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> cmd_fns <span class="token operator">=</span> <span class="token class-name"><span class="token punctuation">[</span>_<span class="token punctuation">]</span>CmdFn</span><span class="token punctuation">&#123;</span>    <span class="token class-name">CmdFn</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"one"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>func <span class="token operator">=</span> one<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name">CmdFn</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"two"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>func <span class="token operator">=</span> two<span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token class-name">CmdFn</span> <span class="token punctuation">&#123;</span><span class="token punctuation">.</span>name <span class="token operator">=</span> <span class="token string">"three"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span>func <span class="token operator">=</span> three<span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">one</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">two</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">three</span><span class="token punctuation">(</span>value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> value <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">;</span> <span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">performFn</span><span class="token punctuation">(</span><span class="token keyword">comptime</span> prefix_char<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">u8</span></span><span class="token punctuation">,</span> start_value<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> result<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> start_value<span class="token punctuation">;</span>    <span class="token keyword">comptime</span> <span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">// Because of inline while, the function performFn is generated</span>    <span class="token comment">// three different times, for the different values of prefix_char</span>    <span class="token comment">// provided</span>    <span class="token keyword">inline</span> <span class="token keyword">while</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;</span> cmd_fns<span class="token punctuation">.</span>len<span class="token punctuation">)</span> <span class="token punctuation">:</span> <span class="token punctuation">(</span>i <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>cmd_fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>name<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> prefix_char<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            result <span class="token operator">=</span> cmd_fns<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">func</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">test</span> <span class="token string">"perform fn"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">performFn</span><span class="token punctuation">(</span><span class="token char">'t'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">performFn</span><span class="token punctuation">(</span><span class="token char">'o'</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">try</span> <span class="token function">expect</span><span class="token punctuation">(</span><span class="token function">performFn</span><span class="token punctuation">(</span><span class="token char">'w'</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">99</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In Zig, the programmer can label variables as <code>comptime</code>. This guarantees to the compiler that every load and store of the variable is performed at compile-time.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> first_25_primes <span class="token operator">=</span> <span class="token function">firstNPrimes</span><span class="token punctuation">(</span><span class="token number">25</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> sum_of_first_25_primes <span class="token operator">=</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>first_25_primes<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">fn</span> <span class="token function">firstNPrimes</span><span class="token punctuation">(</span><span class="token keyword">comptime</span> n<span class="token punctuation">:</span> <span class="token class-name"><span class="token builtin-type keyword">usize</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> prime_list<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span>n<span class="token punctuation">]</span><span class="token builtin-type keyword">i32</span></span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">fn</span> <span class="token function">sum</span><span class="token punctuation">(</span>numbers<span class="token punctuation">:</span> <span class="token class-name"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">const</span> <span class="token builtin-type keyword">i32</span></span><span class="token punctuation">)</span> <span class="token class-name"><span class="token builtin-type keyword">i32</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token keyword">test</span> <span class="token string">"variable values"</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>testing<span class="token punctuation">.</span><span class="token function">expect</span><span class="token punctuation">(</span>sum_of_first_25_primes <span class="token operator">==</span> <span class="token number">1060</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>At <a href="https://ziglang.org/documentation/master/#Containers">container</a> level (outside of any function), all expressions are implicitly <code>comptime</code> expressions.</p><p>This means that we can use functions to initialize complex static data.</p><h2 id="Memory"><a href="#Memory" class="headerlink" title="Memory"></a>Memory</h2><p>Memory allocators:</p><ul><li><p><code>std.heap.c_allocator</code></p><p>Use it when you link to libc.</p></li><li><p><code>std.heap.FixedBufferAllocator</code> or <code>std.heap.ThreadSafeFixedBufferAllocator</code></p><p>Use it when you know the maximum number of bytes at compile-time.</p></li><li><p><code>std.heap.ArenaAllocator</code></p><p>Use it most of the time.</p><pre class="line-numbers language-zig" data-language="zig"><code class="language-zig"><span class="token keyword">const</span> std <span class="token operator">=</span> <span class="token builtin">@import</span><span class="token punctuation">(</span><span class="token string">"std"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">pub</span> <span class="token keyword">fn</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token class-name"><span class="token operator">!</span><span class="token builtin-type keyword">void</span></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> arena <span class="token operator">=</span> std<span class="token punctuation">.</span>heap<span class="token punctuation">.</span>ArenaAllocator<span class="token punctuation">.</span>                    <span class="token function">init</span><span class="token punctuation">(</span>std<span class="token punctuation">.</span>heap<span class="token punctuation">.</span>page_allocator<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">defer</span> arena<span class="token punctuation">.</span><span class="token function">deinit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> allocator <span class="token operator">=</span> arena<span class="token punctuation">.</span><span class="token function">allocator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> ptr <span class="token operator">=</span> <span class="token keyword">try</span> allocator<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token builtin-type keyword">i32</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    std<span class="token punctuation">.</span>debug<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"ptr=&#123;*&#125;\n"</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">&#123;</span>ptr<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>std.testing.FailingAllocator</code></p><p>Use it when writing a test and making sure <code>error.OutOfMemory</code> is handled correctly.</p></li><li><p><code>std.testing.allocator</code></p><p>Use it when writing a test.</p></li><li><p><code>std.heap.GeneralPurposeAllocator</code></p><p>If none of the above apply, you need a general purpose allocator.</p></li></ul><p><code>var</code> declarations inside functions are stored in the function’s stack frame. Once a function returns, any <a href="https://ziglang.org/documentation/master/#Pointers">Pointers</a> to variables in the function’s stack frame become invalid references</p><p><code>var</code> declarations at the top level or in <a href="https://ziglang.org/documentation/master/#struct">struct</a> declarations are stored in the global data section.</p><p>The location of memory allocated with <code>allocator.alloc</code> or <code>allocator.create</code> is determined by the allocator’s implementation.</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Zig </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>How to Deploy Python Web Applications?</title>
      <link href="/2023/11/26/how-to-deploy-python-web-applications/"/>
      <url>/2023/11/26/how-to-deploy-python-web-applications/</url>
      
        <content type="html"><![CDATA[<p>The deployment mainly involves these parts:</p><ol><li><p>Web applications</p><p>Most of the time they are written using Python web frameworks, like Django, Flask, FastAPI.</p></li><li><p>Web servers</p><p>Like Gunicorn, Uvicorn. Their major feature is to handle HTTP&#x2F;HTTPS protocol.</p></li><li><p>Specifications</p><p>They describe how a web server communicates with web applications.</p><ul><li><p>WSGI (Web Server Gateway Interface)</p><p>It provides a standard for synchronous Python apps.</p></li><li><p>ASGI (Asynchronous Server Gateway Interface)</p><p>It provides a standard for both asynchronous and synchronous apps, with a WSGI backwards-compatibility implementation.</p></li></ul></li><li><p>A TLS termination proxy</p><p>In the product environment, you may need a TLS termination proxy, like Nginx, Caddy.</p></li><li><p>A monitoring tool</p><p>In the product environment, you may need a tool to make sure the web server is run on startup and restart it after failures, like Supervisor, Systemd, Docker, Kubernetes.</p></li></ol><table><thead><tr><th>Web Servers</th><th>WSGI</th><th>ASGI</th><th>HTTP&#x2F;2</th><th>HTTP&#x2F;3</th><th>WebSocket</th></tr></thead><tbody><tr><td>Gunicorn</td><td>Y</td><td></td><td></td><td></td><td></td></tr><tr><td>Apache + mod_wsgi</td><td>Y</td><td></td><td></td><td></td><td></td></tr><tr><td>Daphne</td><td></td><td>Y</td><td>Y</td><td></td><td>Y</td></tr><tr><td>Hypercorn</td><td></td><td>Y</td><td>Y</td><td></td><td>Y</td></tr><tr><td>Uvicorn</td><td></td><td>Y</td><td></td><td></td><td>Y</td></tr></tbody></table><blockquote><p>uWSGI is in maintenance mode.</p></blockquote><table><thead><tr><th>Web Servers</th><th>Django</th><th>Flask</th><th>FastAPI</th></tr></thead><tbody><tr><td>Gunicorn</td><td>Y</td><td>Y</td><td>Y (Gunicorn + Uvicorn)</td></tr><tr><td>Apache + mod_wsgi</td><td>Y</td><td>Y</td><td></td></tr><tr><td>Daphne</td><td>Y</td><td></td><td></td></tr><tr><td>Hypercorn</td><td>Y</td><td></td><td></td></tr><tr><td>Uvicorn</td><td>Y</td><td></td><td>Y</td></tr></tbody></table><blockquote><p>The web servers used by Django, Flask and FastAPI are selected based on recommendations in their official documentation.</p></blockquote><blockquote><p>If you’d like to use an ASGI server for Flask you will need to utilize WSGI to ASGI middleware.</p></blockquote><blockquote><p>Uvicorn has a Gunicorn-compatible worker class, when you use Gunicorn with Uvicorn for FastAPI, Gunicorn acts as a process manager, it would transmit the communication to the worker processes running the Uvicorn class.</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 45</title>
      <link href="/2023/11/19/issue-45-202311-2/"/>
      <url>/2023/11/19/issue-45-202311-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Using-Colors-in-Terminal-Output"><a href="#Using-Colors-in-Terminal-Output" class="headerlink" title="Using Colors in Terminal Output"></a>Using Colors in Terminal Output</h3><p><a href="https://handwiki.org/wiki/ANSI_escape_code">ANSI escape sequences</a> is a standard to control cursor location, color, font styling, and other options on terminal emulators. </p><p>The sequences are grouped by their sequence type. CSI (Control Sequence Introducer) is one of the groups, their sequence starting with <code>ESC [</code>. SGR (Select Graphic Rendition) is a part of CSI, it sets display attributes.</p><p>The form of SGR:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">ESC <span class="token punctuation">[</span> n m<span class="token comment"># In terminal, we can write</span><span class="token punctuation">\</span>e<span class="token punctuation">[</span>nm<span class="token comment"># or</span><span class="token punctuation">\</span>x1b<span class="token punctuation">[</span>nm<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ESC</code> is a character in the ASCII table.</p><p><code>n</code> consists of one or more decimal digits, separated by <code>;</code>.</p><p>The sequence ends with <code>m</code>.</p><table><thead><tr><th>Sequence</th><th>Description</th></tr></thead><tbody><tr><td>ESC [ 30…37 m</td><td>Set ANSI text color</td></tr><tr><td>ESC [ 38 ; 5 ; n m</td><td>Set text color, 256-color, n is color index from 0 to 255</td></tr><tr><td>ESC [ 38 ; 2 ; r ; g ; b m</td><td>Set text color, 24-bit true color, r, g, b are from 0 to 255</td></tr><tr><td>ESC [ 39 m</td><td>Reset text color to default</td></tr><tr><td>ESC [ 40…47 m</td><td>Set ANSI background color</td></tr><tr><td>ESC [ 48 ; 5 ; n m</td><td>Set background color, 256-color, n is color index from 0 to 255</td></tr><tr><td>ESC [ 48 ; 2 ; r ; g ; b m</td><td>Set background color, 24-bit true color, r, g, b are from 0 to 255</td></tr><tr><td>ESC [ 49 m</td><td>Reset background color to default</td></tr><tr><td>ESC [ 90…97 m</td><td>Set bright ANSI text color</td></tr><tr><td>ESC [ 100…107 m</td><td>Set bright ANSI background color</td></tr><tr><td>ESC [ 1 m</td><td>Bold</td></tr><tr><td>ESC [ 0 m</td><td>Reset</td></tr></tbody></table><p>ANSI colors:</p><table><thead><tr><th>Text Color</th><th>Background Color</th><th>Color Name</th></tr></thead><tbody><tr><td>30</td><td>40</td><td>black</td></tr><tr><td>31</td><td>41</td><td>red</td></tr><tr><td>32</td><td>42</td><td>green</td></tr><tr><td>33</td><td>43</td><td>yellow</td></tr><tr><td>34</td><td>44</td><td>blue</td></tr><tr><td>35</td><td>45</td><td>magenta</td></tr><tr><td>36</td><td>46</td><td>cyan</td></tr><tr><td>37</td><td>47</td><td>white</td></tr></tbody></table><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># red A</span><span class="token builtin class-name">echo</span> <span class="token string">'\e[31mA'</span><span class="token comment"># white A, red background</span><span class="token builtin class-name">echo</span> <span class="token string">'\e[37;41mA'</span><span class="token comment"># bright and bold A, red background</span><span class="token builtin class-name">echo</span> <span class="token string">'\e[1;97;41mA'</span><span class="token comment"># red A, green B</span><span class="token builtin class-name">echo</span> <span class="token string">'\e[31mA\e[0B\e[32mB'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>To print 256 text and background colors:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token comment"># text colors</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\x1b[38;5;</span><span class="token interpolation"><span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span></span><span class="token string">m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>code<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\x1b[0m"</span><span class="token punctuation">)</span><span class="token comment"># background colors</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        code <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>i <span class="token operator">*</span> <span class="token number">16</span> <span class="token operator">+</span> j<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"\x1b[48;5;</span><span class="token interpolation"><span class="token punctuation">&#123;</span>code<span class="token punctuation">&#125;</span></span><span class="token string">m</span><span class="token interpolation"><span class="token punctuation">&#123;</span>code<span class="token punctuation">.</span>ljust<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\x1b[0m"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Discovering-Recently-Installed-Commands-In-Zsh"><a href="#Discovering-Recently-Installed-Commands-In-Zsh" class="headerlink" title="Discovering Recently Installed Commands In Zsh"></a>Discovering Recently Installed Commands In Zsh</h3><p>When using Zsh (with <a href="https://ohmyz.sh/">Oh My ZSH</a>), the newly installed commands will not be automatically completed without opening new terminal tab or window. We can run the command to fix it:</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">rehash<span class="token comment"># or</span><span class="token builtin class-name">hash</span> <span class="token parameter variable">-rf</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 44</title>
      <link href="/2023/11/05/issue-44-202311-1/"/>
      <url>/2023/11/05/issue-44-202311-1/</url>
      
        <content type="html"><![CDATA[<h3 id="How-to-know-which-program-sent-a-network-request"><a href="#How-to-know-which-program-sent-a-network-request" class="headerlink" title="How to know which program sent a network request"></a>How to know which program sent a network request</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump <span class="token parameter variable">-i</span> any <span class="token parameter variable">-n</span> <span class="token parameter variable">-k</span> INPD port <span class="token number">53</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>We can also write captured network packets to a file, then read it later.</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">sudo</span> tcpdump <span class="token parameter variable">-i</span> any <span class="token parameter variable">-n</span> <span class="token parameter variable">-k</span> INPD port <span class="token number">53</span> <span class="token parameter variable">-w</span> /<span class="token operator">&lt;</span>file path<span class="token operator">></span>/tcpdump-output.pcaptcpdump <span class="token parameter variable">-n</span> <span class="token parameter variable">-k</span> INPD <span class="token parameter variable">-r</span> /<span class="token operator">&lt;</span>file path<span class="token operator">></span>/tcpdump-output.pcap<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>-i any</code>, <em>tcpdump</em> listens on all interfaces.</p><p><code>-n</code>, <em>tcpdump</em> doesn’t convert addresses (e.g., host addresses, port numbers) to names.</p><p><code>-k</code>, control the display of packet metadata via an optional argument (e.g., <code>INPD</code>).</p><p><code>port 53</code>, a packet filter expression. Here we only capture DNS packets.</p><p>The metadata arguments:</p><ul><li><p><code>I</code>: interface name.</p></li><li><p><code>N</code>: process name.</p></li><li><p><code>P</code>: process ID.</p></li><li><p><code>D</code>: direction.</p></li></ul><p>The sample output of <em>tcpdump</em>:</p><pre class="line-numbers language-none"><code class="language-none">10:57:45.835947 (eth0, proc dig:3437, out) IP 192.168.1.20.57959 &gt; 192.168.1.1.53: 33994+ [1au] A? gitlab.com. (39)10:57:45.842205 (eth0, proc dig:3437, in) IP 192.168.1.1.53 &gt; 192.168.1.20.57959: 33994 1&#x2F;0&#x2F;0 A 172.65.251.78 (44)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The sample packets generated by a shell command <code>dig gitlab.com</code>.</p><p><code>eth0, proc dig:3437, out</code>, <code>eth0, proc dig:3437, in</code> are what we want.</p><ul><li><p><code>eth0</code> is the interface name</p></li><li><p><code>dig</code> is the process name</p></li><li><p><code>3437</code> is the process ID</p></li><li><p><code>out</code> indicates the network request is send by the device</p></li><li><p><code>in</code> indicates the network request is received by the device</p></li></ul><h3 id="Python-subprocess-and-stderr"><a href="#Python-subprocess-and-stderr" class="headerlink" title="Python subprocess and stderr"></a><a href="https://zaitcev.livejournal.com/264423.html">Python subprocess and stderr</a></h3><p>Pipe output of <code>cmd1</code> into <code>cmd2</code> and capture the <em>stderr</em>.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p1 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd1<span class="token punctuation">,</span>  stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd2<span class="token punctuation">,</span> stdin<span class="token operator">=</span>p1<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>  stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>p1_stderr <span class="token operator">=</span> p1<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>p2_stderr <span class="token operator">=</span> p2<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>returncode <span class="token keyword">or</span> p2<span class="token punctuation">.</span>returncode<span class="token punctuation">,</span> p1_stderr<span class="token punctuation">,</span> p2_stderr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The above saves the <code>p1.stdout</code> in memory, if the amount piped becomes large enough, we should use the following code:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">with</span> tempfile<span class="token punctuation">.</span>TemporaryFile<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> errfile<span class="token punctuation">:</span>    p1 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd1<span class="token punctuation">,</span>      stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>errfile<span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> subprocess<span class="token punctuation">.</span>Popen<span class="token punctuation">(</span>cmd2<span class="token punctuation">,</span> stdin<span class="token operator">=</span>p1<span class="token punctuation">.</span>stdout<span class="token punctuation">,</span>      stdout<span class="token operator">=</span>subprocess<span class="token punctuation">.</span>PIPE<span class="token punctuation">,</span> stderr<span class="token operator">=</span>errfile<span class="token punctuation">,</span> close_fds<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    p2<span class="token punctuation">.</span>communicate<span class="token punctuation">(</span><span class="token punctuation">)</span>    p1<span class="token punctuation">.</span>wait<span class="token punctuation">(</span><span class="token punctuation">)</span>    errfile<span class="token punctuation">.</span>seek<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    px_stderr <span class="token operator">=</span> errfile<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">return</span> p1<span class="token punctuation">.</span>returncode <span class="token keyword">or</span> p2<span class="token punctuation">.</span>returncode<span class="token punctuation">,</span> px_stderr<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 43</title>
      <link href="/2023/10/29/issue-43-202310-4/"/>
      <url>/2023/10/29/issue-43-202310-4/</url>
      
        <content type="html"><![CDATA[<h3 id="How-to-Benchmark-a-Python-Statement"><a href="#How-to-Benchmark-a-Python-Statement" class="headerlink" title="How to Benchmark a Python Statement"></a><a href="https://superfastpython.com/benchmark-python-statement/">How to Benchmark a Python Statement</a></h3><ul><li><p><code>time.perf_counter()</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> time <span class="token keyword">import</span> perf_counter<span class="token comment"># record start time</span>time_start <span class="token operator">=</span> perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># execute the statement</span>data <span class="token operator">=</span> <span class="token punctuation">[</span>i<span class="token operator">*</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000000</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># record end time</span>time_end <span class="token operator">=</span> perf_counter<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># calculate the duration</span>time_duration <span class="token operator">=</span> time_end <span class="token operator">-</span> time_start<span class="token comment"># report the duration</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Took </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time_duration<span class="token punctuation">&#125;</span></span><span class="token string"> seconds'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>timeit</code></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> timeit <span class="token keyword">import</span> timeit<span class="token comment"># benchmark the statement</span>time_duration <span class="token operator">=</span> timeit<span class="token punctuation">(</span><span class="token string">'[i*i for i in range(100000000)]'</span><span class="token punctuation">,</span> number<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment"># report the duration</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Took </span><span class="token interpolation"><span class="token punctuation">&#123;</span>time_duration<span class="token punctuation">&#125;</span></span><span class="token string"> seconds'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>OR</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># The command executes the statement one time and</span><span class="token comment"># reports the best time (smallest time) over 3 repetitions of executing the statement</span>python <span class="token parameter variable">-m</span> timeit <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token parameter variable">-r</span> <span class="token number">3</span> <span class="token string">"[i*i for i in range(100000000)]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="How-to-Share-Large-Data-Between-Processes-in-Python"><a href="#How-to-Share-Large-Data-Between-Processes-in-Python" class="headerlink" title="How to Share Large Data Between Processes in Python"></a><a href="https://superfastpython.com/multiprocessing-share-large-data-between-processes/">How to Share Large Data Between Processes in Python</a></h3><ul><li><p>Inherit a copy of the structure in each process</p><p>It is the fastest way.</p></li><li><p>Pass a copy of the structure to each task via an argument</p><p>It is the slowest way.</p></li><li><p>Initialize process workers with a copy of the structure once</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 42</title>
      <link href="/2023/10/21/issue-42-202310-3/"/>
      <url>/2023/10/21/issue-42-202310-3/</url>
      
        <content type="html"><![CDATA[<h3 id="How-to-copy-files-from-a-Docker-container-to-the-host"><a href="#How-to-copy-files-from-a-Docker-container-to-the-host" class="headerlink" title="How to copy files from a Docker container to the host"></a><a href="https://kerkour.com/docker-copy-file-from-container-to-host">How to copy files from a Docker container to the host</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">docker</span> <span class="token function">cp</span> my_container:/home/user/file.jpg file.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Upsert-in-SQL"><a href="#Upsert-in-SQL" class="headerlink" title="Upsert in SQL"></a><a href="https://antonz.org/sql-upsert/">Upsert in SQL</a></h3><p>Upsert is an operation that inserts new records into the database and updates existing ones.</p><ul><li><p>MySQL &#x2F; MariaDB</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ON</span> <span class="token keyword">DUPLICATE</span> <span class="token keyword">KEY</span> <span class="token keyword">UPDATE</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>SQLite</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ON</span> CONFLICT<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>PostgreSQL</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">INSERT</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">ON</span> CONFLICT<span class="token comment">-- Only PostgreSQL 15+</span><span class="token keyword">MERGE</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">INTO</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>SQL Server (2008+) &#x2F; Oracle (11+)</p><pre class="line-numbers language-sql" data-language="sql"><code class="language-sql"><span class="token keyword">MERGE</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token keyword">INTO</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Container </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 41</title>
      <link href="/2023/10/15/issue-41-202310-2/"/>
      <url>/2023/10/15/issue-41-202310-2/</url>
      
        <content type="html"><![CDATA[<h3 id="双面镜的原理"><a href="#双面镜的原理" class="headerlink" title="双面镜的原理"></a><a href="http://www.guokr.com/article/464477/">双面镜的原理</a></h3><p>常见的镜子，反射层都镀在后表面，有灰扑扑的“背面”，光线照到玻璃的后表面会反射回来。</p><p>如果把指尖按在镜子上（玻璃的前表面），眼睛看到“镜子后面”先有一个同样厚度的玻璃，然后才是手指的图像，手指和镜像手指之间会有一段距离，不会贴在一起。</p><p>反射层镀在后表面有一个缺陷 —— 光线照到玻璃的前表面的时候也会多少反射一些，同时还会有折射，这会稍微影响镜像的质量。对于一些精度要求高的地方，使用前表面反光镜。把手指贴到前表面反光镜上，手指和镜像手指则会贴到一起。</p><p>普通的镜子，其反射层会把光线几乎全部反射。但如果把全反射层换成只可以反射 50%－70% 光的半反射层，就是双面镜。让镜子起到“双面不同”作用的，是两侧的光强差距：对光亮的房间来说，反射回来的光线更抢眼，镜子就只是镜子；但对昏暗的房间里，对面过来的光线更抢眼，所以镜子就成了玻璃。</p><p>一句话总结双面镜：亮处看不到暗处，暗处可以看到亮处。</p><h3 id="Mastering-curl-interactive-text-guide"><a href="#Mastering-curl-interactive-text-guide" class="headerlink" title="Mastering curl: interactive text guide"></a><a href="https://antonz.org/mastering-curl/">Mastering curl: interactive text guide</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># To specify query parts separately</span><span class="token function">curl</span> http://httpbin/get --url-query <span class="token string">"name=Alice"</span> --url-query <span class="token string">"age=25"</span><span class="token comment"># URL globbing</span><span class="token comment"># This command requests three different paths (al, bt, gm),</span><span class="token comment"># each with two different parameters (num=1 and num=2),</span><span class="token comment"># for a total of six URLs</span><span class="token function">curl</span> --output-dir /tmp <span class="token parameter variable">-o</span> <span class="token string">"out_#1_#2.txt"</span> <span class="token punctuation">\</span>  http://httpbin/anything/<span class="token punctuation">&#123;</span>al,bt,gm<span class="token punctuation">&#125;</span>?num<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span>-2<span class="token punctuation">]</span><span class="token comment"># To extract specific information about the response</span><span class="token function">curl</span> <span class="token parameter variable">-w</span> <span class="token string">"<span class="token entity" title="\n">\n</span>status: %&#123;response_code&#125;<span class="token entity" title="\n">\n</span>type: %&#123;content_type&#125;"</span> <span class="token punctuation">\</span>  http://httpbin/status/429<span class="token comment"># Upload file</span><span class="token function">curl</span> <span class="token parameter variable">-T</span> /tmp/hello.txt http://httpbin/put<span class="token comment"># To limit bandwidth usage.</span><span class="token comment"># It accepts anything from bytes to petabytes</span><span class="token function">curl</span> --limit-rate 3k http://httpbin/get<span class="token comment"># Limit the number of concurrent requests.</span><span class="token comment"># It accepts seconds, minutes, hours or days</span><span class="token function">curl</span> <span class="token parameter variable">--rate</span> <span class="token number">3</span>/s http://httpbin/anything/<span class="token punctuation">[</span><span class="token number">1</span>-9<span class="token punctuation">]</span>.txt<span class="token comment"># Curl supports two different conditions: file timestamp and etag.</span><span class="token comment"># Download the data only if the remote resource is newer</span><span class="token comment"># -i, include the HTTP response headers in the output</span><span class="token function">curl</span> <span class="token parameter variable">-i</span> --time-cond <span class="token string">"Aug 30, 2023"</span> http://httpbin/etag/etag<span class="token comment"># Or older</span><span class="token function">curl</span> <span class="token parameter variable">-i</span> --time-cond <span class="token string">"-Aug 30, 2023"</span> http://httpbin/etag/etag<span class="token comment"># To checks an etag, curl must first to save it</span><span class="token function">curl</span> --etag-save /tmp/etags http://httpbin/etag/etag<span class="token function">curl</span> <span class="token parameter variable">-i</span> --etag-compare /tmp/etags http://httpbin/etag/etag<span class="token comment"># HTTP POST</span><span class="token function">curl</span> <span class="token parameter variable">-d</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>alice <span class="token parameter variable">-d</span> <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">25</span> http://httpbin/post<span class="token function">curl</span> <span class="token parameter variable">-d</span> @/tmp/data.txt <span class="token parameter variable">-H</span> <span class="token string">"content-type: text/plain"</span> <span class="token punctuation">\</span>  http://httpbin/post<span class="token function">curl</span> <span class="token parameter variable">--json</span> <span class="token string">'&#123;"name": "alice"&#125;'</span> http://httpbin/post<span class="token function">curl</span> <span class="token parameter variable">--json</span> @xx.json http://httpbin/post<span class="token function">cat</span> xx.json <span class="token operator">|</span> <span class="token function">curl</span> <span class="token parameter variable">--json</span> @- http://httpbin/post<span class="token comment"># To URL-encode data</span><span class="token function">curl</span> --data-urlencode <span class="token string">"Name: Alice Barton"</span> http://httpbin/post<span class="token comment"># multipart/form-data</span><span class="token function">curl</span> <span class="token parameter variable">-F</span> <span class="token assign-left variable">name</span><span class="token operator">=</span>Alice <span class="token parameter variable">-F</span> <span class="token assign-left variable">age</span><span class="token operator">=</span><span class="token number">25</span> <span class="token parameter variable">-F</span> <span class="token assign-left variable">photo</span><span class="token operator">=</span>@/tmp/alice.png <span class="token punctuation">\</span>  http://httpbin/post<span class="token comment"># Curl does not follow redirects by default.</span><span class="token comment"># To make curl follow redirects, use --follow (-L)</span><span class="token comment"># To protect against endless loop redirects, use --max-redirs</span><span class="token function">curl</span> <span class="token parameter variable">-L</span> --max-redirs <span class="token number">3</span> http://httpbin/redirect/10<span class="token comment"># Curl ignores cookies by default.</span><span class="token comment"># To enable them, use the --cookie (-b) option.</span><span class="token comment"># Specify a file to read from or use a blank string</span><span class="token function">curl</span> <span class="token parameter variable">-b</span> <span class="token string">""</span> <span class="token parameter variable">-c</span> /tmp/cookies http://httpbin/cookies<span class="token comment"># Tell curl a new cookie session starts by using -j,</span><span class="token comment"># --junk-session-cookies</span><span class="token comment"># A new session begins.</span><span class="token comment"># It is the equivalent of closing a browser and starting it up again.</span><span class="token function">curl</span> <span class="token parameter variable">-j</span> <span class="token parameter variable">-b</span> /tmp/cookies http://httpbin/get<span class="token comment"># This tells curl to store HSTS-enabled servers in the specified file</span><span class="token comment"># and automatically convert http → https when accessing them.</span><span class="token function">curl</span> <span class="token parameter variable">--hsts</span> /tmp/hsts http://httpbin/get<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> curl </tag>
            
            <tag> 科学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 40</title>
      <link href="/2023/10/08/issue-40-202310-1/"/>
      <url>/2023/10/08/issue-40-202310-1/</url>
      
        <content type="html"><![CDATA[<h3 id="How-to-detect-disabled-JavaScript"><a href="#How-to-detect-disabled-JavaScript" class="headerlink" title="How to detect disabled JavaScript"></a>How to detect disabled JavaScript</h3><ul><li><p>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/noscript">Noscript</a> element</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>noscript</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span>No JavaScript!<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>noscript</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/scripting">scripting</a> CSS media feature</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token comment">/* Scripting is completely unavailable on the current document */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">scripting</span><span class="token punctuation">:</span> none<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token comment">/* Scripting is enabled during the initial page load, but not afterwards */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">scripting</span><span class="token punctuation">:</span> initial-only<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token comment">/* Scripting is supported and active on the current document */</span><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">scripting</span><span class="token punctuation">:</span> enabled<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>  <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>This is an <strong>experimental</strong> technology. Some browsers don’t support it.</p></li></ul><h3 id="CSS高宽不等图片固定比例布局的三重进化"><a href="#CSS高宽不等图片固定比例布局的三重进化" class="headerlink" title="CSS高宽不等图片固定比例布局的三重进化"></a><a href="https://www.zhangxinxu.com/wordpress/2023/07/css-image-aspect-ratio-layout/">CSS高宽不等图片固定比例布局的三重进化</a></h3><ul><li><p>百分比 padding</p></li><li><p>aspect-ratio 属性</p></li><li><p>cqw 单位</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot + MyBatis 多模块项目中新增不同包名的子模块</title>
      <link href="/2023/10/02/add-submodules-with-different-package-names-in-multi-module-spring-boot-project/"/>
      <url>/2023/10/02/add-submodules-with-different-package-names-in-multi-module-spring-boot-project/</url>
      
        <content type="html"><![CDATA[<p>项目的目录结构：</p><pre class="line-numbers language-none"><code class="language-none">.├── pom.xml├── ModuleA│   ├── pom.xml│   ├── src│   │   ├── main│   │   │   ├── java│   │   │   │   └── com│   │   │   │       └── XX│   │   │   │           ├── App.java├── ModuleB├── ModuleC│   ├── pom.xml<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>项目有三个子模块 <code>ModuleA</code>，<code>ModuleB</code>，<code>ModuleC</code>。</p><p>启动类位于 <code>ModuleA</code> 的 <code>App.java</code>，<code>ModuleA</code>, <code>ModuleB</code> 子模块的包名均始于 <code>com.XX</code>，<code>ModuleC</code> 是新增子模块，包名始于 <code>com.YY</code>。</p><p>项目的 <code>pom.xml</code>（顶层目录的）：</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 其他部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.XX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ZZ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>modules</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ModuleA<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ModuleB<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>module</span><span class="token punctuation">></span></span>ModuleC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>module</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>modules</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他部分 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>ModuleC/pom.xml</code>: </p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 其他部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>parent</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.XX<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ZZ<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>parent</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.YY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ModuleC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他部分 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>启动类所在的子模块 <code>ModuleA</code> 使用了新增的子模块 <code>ModuleC</code>. <code>ModuleA/pom.xml</code>:</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token comment">&lt;!-- 其他部分 --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependencies</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.YY<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>ModuleC<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>1.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependencies</span><span class="token punctuation">></span></span><span class="token comment">&lt;!-- 其他部分 --></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>App.java</code>:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">package</span> <span class="token namespace">com<span class="token punctuation">.</span></span><span class="token constant">XX</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>boot<span class="token punctuation">.</span>autoconfigure<span class="token punctuation">.</span></span><span class="token class-name">SpringBootApplication</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>mybatis<span class="token punctuation">.</span>spring<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">MapperScan</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>context<span class="token punctuation">.</span>annotation<span class="token punctuation">.</span></span><span class="token class-name">ComponentScan</span></span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token annotation punctuation">@SpringBootApplication</span><span class="token annotation punctuation">@ComponentScan</span><span class="token punctuation">(</span>basePackages <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"com.XX"</span><span class="token punctuation">,</span> <span class="token string">"com.YY"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token annotation punctuation">@MapperScan</span><span class="token punctuation">(</span>basePackages<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"com.XX.**.mapper"</span><span class="token punctuation">,</span> <span class="token string">"com.YY.**.mapper"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token comment">// ...</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>@MapperScan</code> 扫描的目录必须精确到 Mapper 接口所在的目录。<code>**</code> 表示多级目录。</p><p>各 <code>pom.xml</code> 的配置，<code>@ComponentScan</code>, <code>@MapperScan</code> 均不可少，否则要么不能运行：</p><pre class="line-numbers language-none"><code class="language-none">Description:A component required a bean of type &#39;com.YY.mapper.ExampleMapper&#39; that could not be found.Action:Consider defining a bean of type &#39;com.YY.mapper.ExampleMapper&#39; in your configuration.<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要么访问新增子模块 <code>ModuleC</code> 的 <em>Controller</em> 接口时，提示 HTTP 404 错误，找不到该接口。</p><p>默认情况下，Spring Boot 只会扫描启动类所在包及其子包。</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring Boot </tag>
            
            <tag> MyBatis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 39</title>
      <link href="/2023/09/24/issue-39-202309-3/"/>
      <url>/2023/09/24/issue-39-202309-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Python-Asterisk-and-Slash-Special-Function-Parameters"><a href="#Python-Asterisk-and-Slash-Special-Function-Parameters" class="headerlink" title="Python Asterisk and Slash Special Function Parameters"></a><a href="https://realpython.com/python-asterisk-and-slash-special-parameters/">Python Asterisk and Slash Special Function Parameters</a></h3><p>The asterisk (<code>*</code>) and forward slash (<code>/</code>) define whether you can pass positional or keyword arguments to your functions.</p><table><thead><tr><th>Left side</th><th>Divider</th><th>Right side</th></tr></thead><tbody><tr><td>Positional-only arguments</td><td><strong><code>/</code></strong></td><td>Positional or keyword arguments</td></tr><tr><td>Positional or keyword arguments</td><td><strong><code>*</code></strong></td><td>Keyword-only arguments</td></tr></tbody></table><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">asterisk_usage</span><span class="token punctuation">(</span>either<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> keyword_only<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>either<span class="token punctuation">,</span> keyword_only<span class="token punctuation">)</span>asterisk_usage<span class="token punctuation">(</span>either<span class="token operator">=</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> keyword_only<span class="token operator">=</span><span class="token string">"Dean"</span><span class="token punctuation">)</span>asterisk_usage<span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> keyword_only<span class="token operator">=</span><span class="token string">"Dean"</span><span class="token punctuation">)</span>asterisk_usage<span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> <span class="token string">"Dean"</span><span class="token punctuation">)</span> <span class="token comment"># wrong</span><span class="token keyword">def</span> <span class="token function">print_three_members</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># wrong</span>    <span class="token keyword">pass</span><span class="token comment"># Accepts only keyword arguments</span><span class="token keyword">def</span> <span class="token function">print_three_members</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">,</span> member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> member3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> member3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">slash_usage</span><span class="token punctuation">(</span>positional_only<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> either<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>positional_only<span class="token punctuation">,</span> either<span class="token punctuation">)</span>slash_usage<span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> either<span class="token operator">=</span><span class="token string">"Dean"</span><span class="token punctuation">)</span>slash_usage<span class="token punctuation">(</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> <span class="token string">"Dean"</span><span class="token punctuation">)</span>slash_usage<span class="token punctuation">(</span>positional_only<span class="token operator">=</span><span class="token string">"Frank"</span><span class="token punctuation">,</span> either<span class="token operator">=</span><span class="token string">"Dean"</span><span class="token punctuation">)</span> <span class="token comment"># wrong</span><span class="token comment"># Accepts only positional arguments</span><span class="token keyword">def</span> <span class="token function">print_three_members</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> member3<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> member3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Use both the asterisk and slash</span><span class="token comment"># / must be ahead of *</span><span class="token keyword">def</span> <span class="token function">print_four_members</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> <span class="token operator">/</span><span class="token punctuation">,</span> <span class="token operator">*</span><span class="token punctuation">,</span> member3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>member1<span class="token punctuation">,</span> member2<span class="token punctuation">,</span> member3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Python-Type-Hints-args-and-kwargs"><a href="#Python-Type-Hints-args-and-kwargs" class="headerlink" title="Python Type Hints - *args and **kwargs"></a><a href="https://adamj.eu/tech/2021/05/11/python-type-hints-args-and-kwargs/">Python Type Hints - *args and **kwargs</a></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># args: Tuple[int, ...]</span><span class="token comment"># kwargs: Dict[str, int]</span><span class="token keyword">def</span> <span class="token function">variable</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>*</code> always binds to a tuple, and <code>**</code> always binds to a dict with string keys.</p><p>Because of this restriction, type hints only need you to define the types of the contained arguments. The type checker automatically adds the <code>Tuple[_, ...]</code> and <code>Dict[str, _]</code> container types.</p><p>Other ways to try:</p><ul><li><p>using a type union</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">variable</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">|</span> <span class="token builtin">str</span> <span class="token operator">|</span> <span class="token builtin">bool</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>using <code>Any</code> type</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">variable</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Any<span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>using <code>TypedDict</code> (Python 3.12)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> Required<span class="token punctuation">,</span> TypedDict<span class="token punctuation">,</span> Unpack<span class="token comment"># all the arguments are optional, only key2 is required</span><span class="token keyword">class</span> <span class="token class-name">Options</span><span class="token punctuation">(</span>TypedDict<span class="token punctuation">,</span> total <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key1<span class="token punctuation">:</span> <span class="token builtin">int</span>    key2<span class="token punctuation">:</span> Required<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span>    key3<span class="token punctuation">:</span> <span class="token builtin">bool</span><span class="token keyword">def</span> <span class="token function">variable</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">:</span> Unpack<span class="token punctuation">[</span>Options<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>    <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>But may be better to pass keyword arguments with asterisk(<code>*</code>) special function parameters.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 38</title>
      <link href="/2023/09/16/issue-38-202309-2/"/>
      <url>/2023/09/16/issue-38-202309-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Reloading-a-Document-and-Preserving-Query-String-Parameters-Using-Only-HTML"><a href="#Reloading-a-Document-and-Preserving-Query-String-Parameters-Using-Only-HTML" class="headerlink" title="Reloading a Document (and Preserving Query String Parameters) Using Only HTML"></a><a href="https://blog.jim-nielsen.com/2023/reloading-document-in-html-and-preserve-query-params/">Reloading a Document (and Preserving Query String Parameters) Using Only HTML</a></h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Reload<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="React-Hooks-and-Javascript-Closures"><a href="#React-Hooks-and-Javascript-Closures" class="headerlink" title="React Hooks and Javascript Closures"></a><a href="https://www.developerway.com/posts/fantastic-closures">React Hooks and Javascript Closures</a></h3><p>Everything in <code>useEffect</code>, <code>useCallback</code> hooks is a closure.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> HeavyComponentMemo <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>HeavyComponent<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// submit our form data here</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HeavyComponentMemo</span></span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Welcome to the form<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>onClick</code> changed between re-renders. We want the <code>HeavyComponentMemo</code> component is stable between re-renders.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> HeavyComponentMemo <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>  HeavyComponent<span class="token punctuation">,</span>  <span class="token punctuation">(</span><span class="token parameter">before<span class="token punctuation">,</span> after</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> before<span class="token punctuation">.</span>title <span class="token operator">===</span> after<span class="token punctuation">.</span>title<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> <span class="token function-variable function">onClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// submit our form data here</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HeavyComponentMemo</span></span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Welcome to the form<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>value</code> that we log in <code>onClick</code> is <code>undefined</code>, <code>value</code>‘s initial value. <code>onClick</code> changed between re-renders, but <code>HeavyComponentMemo</code> not, it still use the initial <code>onClick</code>.</p><p>We can append <code>before.onClick === after.onClick</code> in the <code>React.memo</code> comparison function, but we go back to the first version of the code.</p><p>We can wrap our <code>onClick</code> in <code>useCallback</code>, but <code>useCallback</code> depends on <code>value</code>, the <code>value</code> will change with every keystroke, the result still likes the first version of the code.</p><p>The key is to make <code>onClick</code> stable, and still can access the latest <code>value</code>. The following code do this:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token function-variable function">Form</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>  <span class="token keyword">const</span> <span class="token punctuation">[</span>value<span class="token punctuation">,</span> setValue<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> ref <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    ref<span class="token punctuation">.</span><span class="token function-variable function">current</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>      <span class="token comment">// will be latest</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">const</span> onClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// will be latest</span>    ref<span class="token punctuation">.</span>current<span class="token operator">?.</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span>        <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span>        <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>value<span class="token punctuation">&#125;</span></span>        <span class="token attr-name">onChange</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token parameter">e</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setValue</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>target<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">      </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">HeavyComponentMemo</span></span>        <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Welcome closures<span class="token punctuation">"</span></span>        <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>onClick<span class="token punctuation">&#125;</span></span>      <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>  <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In <code>ref.current?.()</code>, <code>?.</code> is the optional chaining operator, if <code>ref.current</code> is <code>undefined</code> or <code>null</code>, it will return <code>undefined</code>, not throwing an error.</p><h3 id="The-Mad-Magazine-Fold-In-Effect-in-CSS"><a href="#The-Mad-Magazine-Fold-In-Effect-in-CSS" class="headerlink" title="The Mad Magazine Fold-In Effect in CSS"></a><a href="https://thomaspark.co/2020/06/the-mad-magazine-fold-in-effect-in-css/">The Mad Magazine Fold-In Effect in CSS</a></h3><p>Amazing fold-in effect.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> React </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 37</title>
      <link href="/2023/09/10/issue-37-202309-1/"/>
      <url>/2023/09/10/issue-37-202309-1/</url>
      
        <content type="html"><![CDATA[<h3 id="解决-Matplotlib-在-Linux-环境的中文乱码问题"><a href="#解决-Matplotlib-在-Linux-环境的中文乱码问题" class="headerlink" title="解决 Matplotlib 在 Linux 环境的中文乱码问题"></a>解决 Matplotlib 在 Linux 环境的中文乱码问题</h3><p>环境：</p><ul><li><p>Debian Linux 12，基本命令行系统，无 GNOME &#x2F; KDE</p></li><li><p>Matplotlib 3.7.5</p></li><li><p>JupyterLab 4.0.5</p></li><li><p>Python 3.11</p></li></ul><p>默认情况下，Matplotlib 输出的图中，中文是乱码。</p><p>使用 <em>文泉驿微米黑</em> 中文字体。</p><ol><li><p>创建用户的字体目录。</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">mkdir</span> <span class="token parameter variable">-p</span> ~/.local/share/fonts<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>拷贝文泉驿微米黑字体，如 <code>WenQuanWeiMiHei.ttf</code>，至上述字体目录</p><p>字体可从网上下载。</p></li><li><p>修改字体文件权限</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> <span class="token number">644</span> ~/.local/share/fonts/*.ttf<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>安装 <code>fontconfig</code> 软件包</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">command</span> <span class="token parameter variable">-v</span> fc-cache <span class="token operator">></span> /dev/null <span class="token operator">||</span> <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> <span class="token parameter variable">-y</span> fontconfig<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>更新字体缓存</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token comment"># 通常 Debian 会监控字体目录，不需要手动执行</span>fc-cache<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>此命令来自 <code>fontconfig</code>。</p><p>之后可执行 <code>fc-list</code> 命令查看输出的字体列表中是否包含文泉驿微米黑字体。</p></li><li><p>Matplotlib 代码中使用中文字体</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token comment"># ...</span>plt<span class="token punctuation">.</span>rcParams<span class="token punctuation">[</span> <span class="token string">"font.sans-serif"</span> <span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token string">"WenQuanYi Micro Hei"</span> <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ol><blockquote><p>如果已经启动过 JupyterLab, 删除 ~&#x2F;.cache&#x2F;matplotlib&#x2F;fontlist-v330.json 文件，重启 JupyterLab 的 Python 内核，或重启 JupyterLab。</p></blockquote><h3 id="刷新-Matplotlib-JupyterLab-字体缓存"><a href="#刷新-Matplotlib-JupyterLab-字体缓存" class="headerlink" title="刷新 Matplotlib &#x2F; JupyterLab 字体缓存"></a>刷新 Matplotlib &#x2F; JupyterLab 字体缓存</h3><ol><li><p>删除字体缓存文件</p><p>Linux &#x2F; macOS: <code>~/.matplotlib/fontlist-v330.json</code></p><p>Windows: <code>C:\Users\&lt;用户名&gt;\.matplotlib\fontlist-v330.json</code></p><p>Matplotlib 3.7.5 之前的字体缓存文件可能不叫 <code>fontlist-v330.json</code>。</p></li><li><p>重启 JupyterLab 的内核，或重启 JupyterLab。</p></li></ol>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Visualization </tag>
            
            <tag> Matplotlib </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 36</title>
      <link href="/2023/07/23/issue-36-202307-2/"/>
      <url>/2023/07/23/issue-36-202307-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Assigning-the-command-output-to-Shell-variables"><a href="#Assigning-the-command-output-to-Shell-variables" class="headerlink" title="Assigning the command output to Shell variables"></a>Assigning the command output to Shell variables</h3><pre class="line-numbers language-none"><code class="language-none"># input.txtcol1 col2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token builtin class-name">read</span> col1 col2 <span class="token operator">&lt;</span> <span class="token operator">&lt;</span><span class="token punctuation">(</span><span class="token function">grep</span> <span class="token parameter variable">-E</span> <span class="token parameter variable">-i</span> <span class="token parameter variable">-m</span> <span class="token number">1</span> col input.txt<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Return status, 0: one line was selected, 1: nothing selected.</p></blockquote><blockquote><p>This is <em>process substitution</em> in Bash or Zsh.</p></blockquote><h3 id="Running-Multiple-Linux-Commands-Simultaneously"><a href="#Running-Multiple-Linux-Commands-Simultaneously" class="headerlink" title="Running Multiple Linux Commands Simultaneously"></a><a href="https://www.linuxjournal.com/content/mastering-terminal-command-execution-running-multiple-linux-commands-simultaneously">Running Multiple Linux Commands Simultaneously</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">command1 <span class="token operator">&amp;</span> command2<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Executes both <code>command1</code> and <code>command2</code> at the same time.</p></blockquote><blockquote><p>Using an <em>ampersand</em> sends the process to the background, allowing the next command to start immediately.</p></blockquote><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token punctuation">(</span>command1 <span class="token punctuation">;</span> command2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> command3<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Run <code>command1</code> and <code>command2</code> simultaneously but will only initiate <code>command3</code> once both have completed.</p></blockquote><h3 id="Can-I-DevTools"><a href="#Can-I-DevTools" class="headerlink" title="Can I DevTools?"></a><a href="https://www.canidev.tools/">Can I DevTools?</a></h3><p>List developer tools and the features they support.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Weekly </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 35</title>
      <link href="/2023/07/16/issue-35-202307-1/"/>
      <url>/2023/07/16/issue-35-202307-1/</url>
      
        <content type="html"><![CDATA[<h3 id="JavaScript、Python、Java-中精确的四舍五入"><a href="#JavaScript、Python、Java-中精确的四舍五入" class="headerlink" title="JavaScript、Python、Java 中精确的四舍五入"></a>JavaScript、Python、Java 中精确的四舍五入</h3><p>下面的例子均是精确到小数点后两位。结果均是 <code>2.35</code>。</p><p>JavaScript:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> number <span class="token operator">=</span> <span class="token number">2.345</span><span class="token punctuation">;</span><span class="token keyword">const</span> roundedNumber <span class="token operator">=</span> <span class="token punctuation">(</span>Math<span class="token punctuation">.</span><span class="token function">round</span><span class="token punctuation">(</span>number <span class="token operator">*</span> <span class="token number">100</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toFixed</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>roundedNumber<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Python:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> decimal <span class="token keyword">import</span> Decimal<span class="token punctuation">,</span> ROUND_HALF_UPnumber <span class="token operator">=</span> <span class="token number">2.345</span>rounded_number <span class="token operator">=</span> Decimal<span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span>quantize<span class="token punctuation">(</span>Decimal<span class="token punctuation">(</span><span class="token string">'0.00'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> rounding <span class="token operator">=</span> ROUND_HALF_UP<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>rounded_number<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Java:</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">BigDecimal</span></span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token import"><span class="token namespace">java<span class="token punctuation">.</span>math<span class="token punctuation">.</span></span><span class="token class-name">RoundingMode</span></span><span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Main</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">float</span> number <span class="token operator">=</span> <span class="token number">2.345f</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> roundedNumber <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">BigDecimal</span><span class="token punctuation">(</span>number<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">setScale</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token class-name">RoundingMode</span><span class="token punctuation">.</span><span class="token constant">HALF_UP</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">floatValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>roundedNumber<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Intel-One-Mono"><a href="#Intel-One-Mono" class="headerlink" title="Intel One Mono"></a><a href="https://github.com/intel/intel-one-mono">Intel One Mono</a></h3><p>Intel’s open source monospace font.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Font </tag>
            
            <tag> 四舍五入 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 34</title>
      <link href="/2023/04/16/issue-34-202304-1/"/>
      <url>/2023/04/16/issue-34-202304-1/</url>
      
        <content type="html"><![CDATA[<h3 id="谜案侦破-我在终端输入-后，Golang-蹦了出来"><a href="#谜案侦破-我在终端输入-后，Golang-蹦了出来" class="headerlink" title="谜案侦破-我在终端输入 ?? 后，Golang 蹦了出来"></a><a href="https://song.xlog.app/qq-zh">谜案侦破-我在终端输入 <code>??</code> 后，Golang 蹦了出来</a></h3><p>至少在 Bash, Zsh 中，终端输入 <code>?</code>，会查找当前文件夹中单字符名字的文件或目录，以它们的名字为命令执行。</p><p>一个 <code>?</code> 匹配一个字符，可以有多个或与其他字符混合使用，如 <code>??</code>, <code>g?</code>, <code>程序?</code>（这里的 <code>?</code> 可代表一个汉字 ）。存在相应的命令，会执行，不存在但有目录，会进入目录，否则 <code>command not found</code>。</p><h3 id="Why-I-Will-Never-Use-Alpine-Linux-Ever-Again"><a href="#Why-I-Will-Never-Use-Alpine-Linux-Ever-Again" class="headerlink" title="Why I Will Never Use Alpine Linux Ever Again"></a><a href="https://martinheinz.dev/blog/92">Why I Will Never Use Alpine Linux Ever Again</a></h3><p><code>musl</code> don’t support <a href="https://serverfault.com/a/404843">DNS-over-TCP</a>, there could be issues, especially in Kubernetes.</p><p>Alternatives:</p><ul><li><p><a href="https://github.com/wolfi-dev/">Wolfi</a></p></li><li><p><a href="https://github.com/GoogleContainerTools/distroless">Distroless</a></p></li><li><p><a href="https://developers.redhat.com/products/rhel/ubi">UBI (Universal Base Image)</a></p></li><li><p>Ubuntu or Debian-based base images</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Container </tag>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 33</title>
      <link href="/2023/03/26/issue-33-202303-2/"/>
      <url>/2023/03/26/issue-33-202303-2/</url>
      
        <content type="html"><![CDATA[<h3 id="针对进程设置路由规则"><a href="#针对进程设置路由规则" class="headerlink" title="针对进程设置路由规则"></a><a href="https://www.kawabangga.com/posts/4935">针对进程设置路由规则</a></h3><p>使用 Linux 的 SO_MARK 给流量打标签，然后针对打了标签的流量设置路由。</p><p>如何打标签：</p><ul><li><p>通过 iptables 打标签或直接用 <code>ip rule</code> 设置路由</p><p>流量有明显的特征，如固定的目标端口。</p></li><li><p>通过 LD_PRELOAD</p><p>LD_PRELOAD 设置共享库的路径，可以覆盖动态链接符号的查找顺序。</p><p>替换系统的 socket 函数，然后用 setsockopt(2) 设置 SO_MARK。</p></li><li><p>通过 setsockopt(2) 设置 SO_MARK</p></li><li><p>通过 network namespace 配置路由</p></li><li><p>通过 iptables –uid-owner 匹配</p><p>给进程分配一个单独的用户。</p></li><li><p>使用 ptrace(2) 拦截系统调用 connect(2)</p><p>获取目标地址，然后代理请求。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Network </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 32</title>
      <link href="/2023/03/12/issue-32-202303-1/"/>
      <url>/2023/03/12/issue-32-202303-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Beej’s-Guide-to-C-Programming"><a href="#Beej’s-Guide-to-C-Programming" class="headerlink" title="Beej’s Guide to C Programming"></a><a href="https://beej.us/guide/bgc/html/split/index.html">Beej’s Guide to C Programming</a></h3><p>A C guide assumes that you’ve already got some programming knowledge under your belt from another language.</p><h3 id="WebGL2-理论基础"><a href="#WebGL2-理论基础" class="headerlink" title="WebGL2 理论基础"></a><a href="https://webgl2fundamentals.org/webgl/lessons/zh_cn/">WebGL2 理论基础</a></h3><p>了解 WebGL 的工作原理。</p><h3 id="Common-Beginner-Mistakes-with-React"><a href="#Common-Beginner-Mistakes-with-React" class="headerlink" title="Common Beginner Mistakes with React"></a><a href="https://www.joshwcomeau.com/react/common-beginner-mistakes/">Common Beginner Mistakes with React</a></h3><ul><li><p>Evaluating with zero</p></li><li><p>Mutating state</p></li><li><p>Not generating keys</p></li><li><p>Missing whitespace</p></li><li><p>Accessing state after changing it</p></li><li><p>Returning multiple elements</p></li><li><p>Flipping from uncontrolled to controlled</p></li><li><p>Missing style brackets</p></li><li><p>Async effect function</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> React </tag>
            
            <tag> C </tag>
            
            <tag> WebGL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 31</title>
      <link href="/2023/02/19/issue-31-202302-1/"/>
      <url>/2023/02/19/issue-31-202302-1/</url>
      
        <content type="html"><![CDATA[<h3 id="SSSVG-An-Interactive-SVG-Reference"><a href="#SSSVG-An-Interactive-SVG-Reference" class="headerlink" title="SSSVG: An Interactive SVG Reference"></a><a href="https://fffuel.co/sssvg/">SSSVG: An Interactive SVG Reference</a></h3><p>An interactive reference to the most popular and&#x2F;or interesting parts of the SVG spec.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> SVG </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 30</title>
      <link href="/2023/01/15/issue-30-202301-1/"/>
      <url>/2023/01/15/issue-30-202301-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Moving-to-zsh"><a href="#Moving-to-zsh" class="headerlink" title="Moving to zsh"></a><a href="https://scriptingosx.com/2019/06/moving-to-zsh/">Moving to zsh</a></h3><p>The experiences moving bash settings, configurations, and scripts over to zsh.</p><h3 id="A-visual-guide-to-SSH-tunnels"><a href="#A-visual-guide-to-SSH-tunnels" class="headerlink" title="A visual guide to SSH tunnels"></a><a href="https://robotmoon.com/ssh-tunnels/">A visual guide to SSH tunnels</a></h3><p>The page explains use cases and examples of SSH tunnels while visually presenting the traffic flows.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Shell </tag>
            
            <tag> SSH </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 29</title>
      <link href="/2022/12/24/issue-29-202212-3/"/>
      <url>/2022/12/24/issue-29-202212-3/</url>
      
        <content type="html"><![CDATA[<h3 id="2022-Roundup-of-Web-Research"><a href="#2022-Roundup-of-Web-Research" class="headerlink" title="2022 Roundup of Web Research "></a><a href="https://css-tricks.com/2022-roundup-of-web-research/">2022 Roundup of Web Research </a></h3><p>Web trends in 2022.</p><h3 id="Deploying-CSS-Logical-Properties-On-Web-Apps"><a href="#Deploying-CSS-Logical-Properties-On-Web-Apps" class="headerlink" title="Deploying CSS Logical Properties On Web Apps"></a><a href="https://www.smashingmagazine.com/2022/12/deploying-css-logical-properties-on-web-apps/">Deploying CSS Logical Properties On Web Apps</a></h3><p>To produce one layout that will adapt itself depending on the text direction and writing mode.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 28</title>
      <link href="/2022/12/11/issue-28-202212-2/"/>
      <url>/2022/12/11/issue-28-202212-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Yes-your-house-is-wealth"><a href="#Yes-your-house-is-wealth" class="headerlink" title="Yes, your house is wealth"></a><a href="https://noahpinion.substack.com/p/yes-your-house-is-wealth">Yes, your house is wealth</a></h3><p>Your house is wealth: you can sell the house and get a bunch of cash, and use that cash to pay rent from then on, without having to work for the rent money. You are richer than someone who doesn’t own a house. Thus, it is a form of wealth.</p><p>The <strong>top three</strong> net worth by asset type in the U.S (In percent, 2014 - 2015):</p><ul><li>Equity in own home (~ 34%);</li><li>Retirement accounts (~ 29%);</li><li>Stocks and mutual funds (~ 9%);</li></ul><p>In the U.S., <strong>rich people</strong> have most of their wealth in <strong>stocks and bonds</strong>, while <strong>the middle class</strong> has most of its wealth in (mostly owner-occupied) <strong>housing</strong>.</p><p>In order to increase their own wealth, the vast majority of Americans have to make sure their home values go up and up and up:</p><ul><li><p>The easiest way to pump up your house’s price is by using control of local politics to keep <strong>poor people</strong> out of the neighborhood and to artificially limit housing supply;</p></li><li><p><strong>Local NIMBYism</strong> has basically become America’s national pastime, and it has resulted in a housing shortage in many of the most desirable locations.</p><blockquote><p>NIMBYism: the behaviour of someone who does not want something to be built or done near where they live, although it does need to be built or done somewhere.</p></blockquote></li></ul><blockquote><p>In China, the house is also the most valuable asset for a household. </p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Wealth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 27</title>
      <link href="/2022/12/04/issue-27-202212-1/"/>
      <url>/2022/12/04/issue-27-202212-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Who-controls-the-internet"><a href="#Who-controls-the-internet" class="headerlink" title="Who controls the internet?"></a><a href="https://www.netmeister.org/blog/nsauth-diversity.html">Who controls the internet?</a></h3><ul><li><p>Verisign;</p></li><li><p>GoDaddy;</p></li><li><p>Cloudflare;</p></li><li><p>A handful of large companies;</p></li></ul><h3 id="ECMAScript-proposal-RegExp-flag-v-makes-character-classes-and-character-class-escapes-more-powerful"><a href="#ECMAScript-proposal-RegExp-flag-v-makes-character-classes-and-character-class-escapes-more-powerful" class="headerlink" title="ECMAScript proposal: RegExp flag &#x2F;v makes character classes and character class escapes more powerful"></a><a href="https://2ality.com/2022/11/regexp-v-flag.html">ECMAScript proposal: RegExp flag &#x2F;v makes character classes and character class escapes more powerful</a></h3><p>If you don’t know code units, code points and graphemes in Unicode, should take a look.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> DNS </tag>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 26</title>
      <link href="/2022/11/27/issue-26-202211-1/"/>
      <url>/2022/11/27/issue-26-202211-1/</url>
      
        <content type="html"><![CDATA[<h3 id="What-Makes-a-Senior-Engineer-Writing-Software-vs-Building-Systems"><a href="#What-Makes-a-Senior-Engineer-Writing-Software-vs-Building-Systems" class="headerlink" title="What Makes a Senior Engineer? Writing Software vs Building Systems"></a><a href="https://codewithstyle.info/software-vs-systems/">What Makes a Senior Engineer? Writing Software vs Building Systems</a></h3><p>Junior Engineers care about writing Software.</p><p>Senior Engineers care about building Systems.</p><h3 id="零拷贝技术"><a href="#零拷贝技术" class="headerlink" title="零拷贝技术"></a><a href="https://colobu.com/2022/11/19/zero-copy-and-how-to-use-it-in-go/">零拷贝技术</a></h3><p>实现方式：</p><ul><li><p>mmap + write;</p></li><li><p>sendfile;</p></li><li><p>splice, tee, vmsplice;</p></li><li><p>MSG_ZEROCOPY;</p></li><li><p>copy_file_range;</p></li><li><p>AF_XDP;</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Personal Growth </tag>
            
            <tag> 零拷贝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 25</title>
      <link href="/2022/10/02/issue-25-202210-1/"/>
      <url>/2022/10/02/issue-25-202210-1/</url>
      
        <content type="html"><![CDATA[<h3 id="C-By-Example"><a href="#C-By-Example" class="headerlink" title="C++ By Example"></a><a href="https://cppbyexample.com/">C++ By Example</a></h3><p>You will find clear and up to date C++ code examples with concise and straightforward explanations.</p><h3 id="Convert-a-curl-cmdline-to-libcurl-source-code"><a href="#Convert-a-curl-cmdline-to-libcurl-source-code" class="headerlink" title="Convert a curl cmdline to libcurl source code"></a><a href="https://daniel.haxx.se/blog/2022/09/12/convert-a-curl-cmdline-to-libcurl-source-code/">Convert a curl cmdline to libcurl source code</a></h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">curl</span> curl.se <span class="token parameter variable">--libcurl</span> code.c<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Append <code>--libcurl</code> to any ordinary curl command line, and you will get a libcurl-using C source code.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> C++ </tag>
            
            <tag> curl </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 24</title>
      <link href="/2022/09/04/issue-24-202209-1/"/>
      <url>/2022/09/04/issue-24-202209-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Creating-ESM-based-shell-scripts-for-Unix-and-Windows-with-Node-js"><a href="#Creating-ESM-based-shell-scripts-for-Unix-and-Windows-with-Node-js" class="headerlink" title="Creating ESM-based shell scripts for Unix and Windows with Node.js"></a><a href="https://2ality.com/2022/07/nodejs-esm-shell-scripts.html">Creating ESM-based shell scripts for Unix and Windows with Node.js</a></h3><p>How to turn an ESM module into a Unix shell script that we can run without it being inside a package.</p><p>How to create standalone shell scripts that include Node.js code.</p><h3 id="Merging-two-GitHub-repositories-without-losing-commit-history"><a href="#Merging-two-GitHub-repositories-without-losing-commit-history" class="headerlink" title="Merging two GitHub repositories without losing commit history"></a><a href="https://hacks.mozilla.org/2022/08/merging-two-github-repositories-without-losing-commit-history/">Merging two GitHub repositories without losing commit history</a></h3><p>The process of merging smaller example code repositories into larger parent repositories on the MDN Web Docs project.</p><h3 id="Why-you-will-never-become-rich-and-famous-like-Silicon-Valley-Entrepreneurs"><a href="#Why-you-will-never-become-rich-and-famous-like-Silicon-Valley-Entrepreneurs" class="headerlink" title="Why you will never become rich and famous like Silicon Valley Entrepreneurs"></a><a href="https://allagora.wordpress.com/2020/05/28/why-you-will-never-become-rich-and-famous-like-silicon-valley-entrepreneurs/">Why you will never become rich and famous like Silicon Valley Entrepreneurs</a></h3><p>Don’t fall for the claim that working hard will make you rich, it won’t.</p><p>You’ll potentially never become rich but still, you can grow your fortune a tiny bit and leave more to your descendants than you received from your ancestors. And slowly, over multiple generations, your family can become wealthy and smooth the way for the great-great-great-grandson to become insanely rich.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Git </tag>
            
            <tag> Node.js </tag>
            
            <tag> Wealth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 23</title>
      <link href="/2022/08/28/issue-23-202208-2/"/>
      <url>/2022/08/28/issue-23-202208-2/</url>
      
        <content type="html"><![CDATA[<h3 id="bottom-Yet-another-cross-platform-graphical-process-system-monitor"><a href="#bottom-Yet-another-cross-platform-graphical-process-system-monitor" class="headerlink" title="bottom: Yet another cross-platform graphical process&#x2F;system monitor"></a><a href="https://clementtsang.github.io/bottom">bottom: Yet another cross-platform graphical process&#x2F;system monitor</a></h3><p>Its search feature is powerful. The key bindings likes Vim.</p><p>The basic mode is clean and enough for normal usage.</p><h3 id="浏览器指纹技术简介"><a href="#浏览器指纹技术简介" class="headerlink" title="浏览器指纹技术简介"></a><a href="https://www.biaodianfu.com/fingerprint.html">浏览器指纹技术简介</a></h3><p>介绍浏览器指纹的采集、对抗方法。</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Privacy </tag>
            
            <tag> Monitoring </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 22</title>
      <link href="/2022/08/14/issue-22-202208-1/"/>
      <url>/2022/08/14/issue-22-202208-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Implements-React-Routing-in-Plain-React"><a href="#Implements-React-Routing-in-Plain-React" class="headerlink" title="Implements React Routing in Plain React"></a><a href="https://github.com/ashok-khanna/react-snippets/blob/main/Router.js">Implements React Routing in Plain React</a></h3><p>Implements React Routing in Plain React, without reliance on React-Router or any other libraries.</p><p>Example:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token keyword">const</span> routes <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Home <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">&#123;</span> <span class="token literal-property property">path</span><span class="token operator">:</span> <span class="token string">"/register"</span><span class="token punctuation">,</span> <span class="token literal-property property">component</span><span class="token operator">:</span> <span class="token operator">&lt;</span>Register <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">&#125;</span>    <span class="token punctuation">]</span>        <span class="token comment">// ...</span>        <span class="token keyword">const</span> defaultComponent <span class="token operator">=</span> <span class="token operator">&lt;</span>NoPageExists <span class="token operator">/</span><span class="token operator">></span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>Router routes<span class="token operator">=</span><span class="token punctuation">&#123;</span>routes<span class="token punctuation">&#125;</span> defaultComponent<span class="token operator">=</span><span class="token punctuation">&#123;</span>defaultComponent<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Simple-bash-commands-for-parsing-data-and-Linux-system-maintenance"><a href="#Simple-bash-commands-for-parsing-data-and-Linux-system-maintenance" class="headerlink" title="Simple bash commands for parsing data and Linux system maintenance"></a><a href="https://github.com/onceupon/Bash-Oneliner">Simple bash commands for parsing data and Linux system maintenance</a></h3><p>A collection of handy Bash One-Liners and terminal tricks for data processing and Linux system maintenance.</p><h3 id="Who-Is-Collecting-Data-from-Your-Car"><a href="#Who-Is-Collecting-Data-from-Your-Car" class="headerlink" title="Who Is Collecting Data from Your Car?"></a><a href="https://themarkup.org/the-breakdown/2022/07/27/who-is-collecting-data-from-your-car">Who Is Collecting Data from Your Car?</a></h3><p>Introduce the vehicle data industry.</p><p>The data flow:</p><p>The car’s computers -&gt; The car manufacturer’s servers -&gt; Vehicle data hubs -&gt; Vehicle data marketplace</p><h3 id="I-Looked-Into-34-Top-Real-World-Blockchain-Projects-So-You-Don’t-Have-To"><a href="#I-Looked-Into-34-Top-Real-World-Blockchain-Projects-So-You-Don’t-Have-To" class="headerlink" title="I Looked Into 34 Top Real-World Blockchain Projects So You Don’t Have To"></a><a href="https://weh.wtf/34-blockchain-projects.html">I Looked Into 34 Top Real-World Blockchain Projects So You Don’t Have To</a></h3><p>Product categories:</p><ul><li>Smart Contract Use Cases</li><li>Internet of Things</li><li>Personal Identity</li><li>Healthcare</li><li>Logistics</li><li>Government</li><li>Media</li><li>Money Transfer Use Cases</li><li>NFTs</li></ul><p>34 projects:</p><ul><li>13 are already dead;</li><li>6 are only useful within the crypto &amp; NFT ecosystems and not in the “real world”;</li><li>14 use Blockchain in a way where removing the blockchain would not impact functionality at all, or make the product better;</li><li><a href="https://www.chainalysis.com/">Chainalysis</a>, which has real-world impact by helping law enforcement de-anonymizing blockchain users.</li></ul><p><a href="https://www.chainalysis.com/">Chainalysis</a> is the winner of the list.</p><h3 id="Want-to-Learn-about-Entrepreneurship-as-a-Software-Engineer-Sell-Something-Online"><a href="#Want-to-Learn-about-Entrepreneurship-as-a-Software-Engineer-Sell-Something-Online" class="headerlink" title="Want to Learn about Entrepreneurship, as a Software Engineer? Sell Something Online"></a><a href="https://blog.pragmaticengineer.com/want-to-start-a-startup-sell-something-online/">Want to Learn about Entrepreneurship, as a Software Engineer? Sell Something Online</a></h3><p>The experience selling a resume book online on these areas:</p><ul><li>Marketing</li><li>Media exposure</li><li>Advertising</li><li>Content marketing and growth hacking</li><li>SEO optimization</li><li>Customer support</li><li>Accounting</li></ul><h3 id="Vim-PDF-Documentation"><a href="#Vim-PDF-Documentation" class="headerlink" title="Vim PDF Documentation"></a><a href="https://nathangrigg.com/vimhelp/">Vim PDF Documentation</a></h3><p>Vim 9.0 PDF Documentation.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Privacy </tag>
            
            <tag> Vim </tag>
            
            <tag> React </tag>
            
            <tag> Shell </tag>
            
            <tag> Blockchain </tag>
            
            <tag> Business </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 21</title>
      <link href="/2022/07/31/issue-21-202207-3/"/>
      <url>/2022/07/31/issue-21-202207-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Ways-Hackers-Can-Steal-Information-from-Your-Device"><a href="#Ways-Hackers-Can-Steal-Information-from-Your-Device" class="headerlink" title="Ways Hackers Can Steal Information from Your Device"></a><a href="https://www.hackread.com/ways-hackers-can-steal-information-from-device/">Ways Hackers Can Steal Information from Your Device</a></h3><ul><li>Social Engineering;</li><li>Keylogger;</li><li>Public Wi-Fi Eavesdropping;</li><li>SIM Swap Fraud;</li><li>Browser Hijacking;</li><li>IP Spoofing;</li><li>Domain Name System (DNS) Spoofing &#x2F; Poisoning;</li><li>Domain Spoofing;</li><li>Session Hijacking;</li></ul><h3 id="什么是数据仓库"><a href="#什么是数据仓库" class="headerlink" title="什么是数据仓库"></a><a href="https://insights.thoughtworks.cn/what-is-data-warehouse/">什么是数据仓库</a></h3><p>数据仓库是一个面向主题的(Subject Oriented)、集成的(Integrated)、相对稳定的(Non-Volatile)、反映历史变化(Time Variant)的数据集合，用于支持管理决策。</p><p>相比于技术，更重要的是产生业务价值。</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Privacy </tag>
            
            <tag> Warehouse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 20</title>
      <link href="/2022/07/10/issue-20-202207-2/"/>
      <url>/2022/07/10/issue-20-202207-2/</url>
      
        <content type="html"><![CDATA[<h3 id="硬件知识：如何选择硬盘"><a href="#硬件知识：如何选择硬盘" class="headerlink" title="硬件知识：如何选择硬盘"></a><a href="https://www.biaodianfu.com/disk.html">硬件知识：如何选择硬盘</a></h3><p>有关硬盘的一些基础知识。</p><h3 id="Software-Engineering-at-Google"><a href="#Software-Engineering-at-Google" class="headerlink" title="Software Engineering at Google"></a><a href="https://qiangmzsx.github.io/Software-Engineering-at-Google/#/">Software Engineering at Google</a></h3><p>《Software Engineering at Google》的中文翻译版本。</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> 硬盘 </tag>
            
            <tag> 软件工程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 19</title>
      <link href="/2022/07/03/issue-19-202207-1/"/>
      <url>/2022/07/03/issue-19-202207-1/</url>
      
        <content type="html"><![CDATA[<h3 id="SDKMAN"><a href="#SDKMAN" class="headerlink" title="SDKMAN!"></a><a href="https://sdkman.io/">SDKMAN!</a></h3><p>A tool for managing parallel versions of multiple Software Development Kits on most Unix based systems.</p><p>You can use it to install Flink, Gradle, Groovy, Hadoop, JDK, JDK Mission Control (JMC), JMeter, Kotlin, Maven, Maven Daemon, Quarkus, sbt, Scala, Spark, Spring Boot CLI, Tomcat, Vert.x, VisualVM, etc.</p><p>For each package, SDKMAN appends its path to the Shell <code>PATH</code>. If you install all the packages above, the <code>PATH</code> will be very long.</p><h3 id="fnm"><a href="#fnm" class="headerlink" title="fnm"></a><a href="https://github.com/Schniz/fnm">fnm</a></h3><p>Fast and simple Node.js version manager, built in Rust.</p><p>Other Node.js version managers <a href="https://nodejs.org/en/download/package-manager/">here</a>.</p><h3 id="中华古诗词数据库"><a href="#中华古诗词数据库" class="headerlink" title="中华古诗词数据库"></a><a href="https://github.com/chinese-poetry/chinese-poetry">中华古诗词数据库</a></h3><p>唐宋两朝近一万四千古诗人，接近 5.5 万首唐诗加 26 万宋诗。两宋时期 1564 位词人，21050 首词。</p><p>基于此数据的诗词网站：<a href="https://shici.store/huajianji/">中文诗歌</a>，<a href="https://hz.xusenlin.com/#/tang_si">汉字之美</a></p><p>🐮🐮🐮</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Java </tag>
            
            <tag> Node.js </tag>
            
            <tag> 诗词 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 18</title>
      <link href="/2022/06/19/issue-18-202206-1/"/>
      <url>/2022/06/19/issue-18-202206-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Code-first-vs-Product-first"><a href="#Code-first-vs-Product-first" class="headerlink" title="Code-first vs. Product-first"></a><a href="https://thezbook.com/code-first-vs-product-first?x-host=thezbook.com">Code-first vs. Product-first</a></h3><p>Code-first programmers love the code they write – the code is the thing.</p><p>For product-first programmers, the end product is, well, the product, not the code, and what matters to them is how well that product actually solves the underlying problem.</p><p>Which one are you? or both?</p><h3 id="Side-Project-指南"><a href="#Side-Project-指南" class="headerlink" title="Side Project 指南"></a><a href="https://sideproject.guide/zh">Side Project 指南</a></h3><p>快速实现一个 Side Project、获取用户并赚钱的小手册。</p><h3 id="Programming-Notes-for-Professionals-books"><a href="#Programming-Notes-for-Professionals-books" class="headerlink" title="Programming Notes for Professionals books"></a><a href="https://books.goalkicker.com/">Programming Notes for Professionals books</a></h3><p>There are 48 books, Java, C++, JavaScript, Linux etc. They are compiled from <a href="https://archive.org/details/documentation-dump.7z">Stack Overflow Documentation</a>.</p><p>The book content is the answers written by the people at Stack Overflow.</p><h3 id="Inspecting-Web-Views-in-macOS"><a href="#Inspecting-Web-Views-in-macOS" class="headerlink" title="Inspecting Web Views in macOS "></a><a href="https://blog.jim-nielsen.com/2022/inspecting-web-views-in-macos/">Inspecting Web Views in macOS </a></h3><p>Using the Safari Web Inspector to inspect web components within native macOS apps.</p><h3 id="Quick-and-Dirty-Text-Diffing"><a href="#Quick-and-Dirty-Text-Diffing" class="headerlink" title="Quick and Dirty Text Diffing "></a><a href="https://blog.jim-nielsen.com/2022/quick-dirty-text-diffing/">Quick and Dirty Text Diffing </a></h3><p>Do a quick diff on two sets of text:</p><ul><li><p><code>diff file1.txt file2.txt</code>;</p></li><li><p><code>code --diff file1.txt file2.txt</code>;</p><p>Will launch Visual Studio Code.</p></li><li><p>In Visual Studio Code, <code>CMD + Shift + P</code> -&gt; “Compare Active File With…”;</p></li><li><p><code>vim -d file1.txt file2.txt</code>;</p></li></ul><p>Also can use:</p><ul><li><p><code>diff -u file1.txt file2.txt | vim -R -</code>;</p><p>Has code highlighting.</p></li><li><p><code>git diff file1.txt file2.txt</code>;</p><p>Both files can not be in a Git Repository, but no file name Auto-completion.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> Personal Growth </tag>
            
            <tag> Side Project </tag>
            
            <tag> Book </tag>
            
            <tag> Diff </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 17</title>
      <link href="/2022/05/08/issue-17-202205-1/"/>
      <url>/2022/05/08/issue-17-202205-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Browser-Strangeness"><a href="#Browser-Strangeness" class="headerlink" title="Browser Strangeness"></a><a href="https://browserstrangeness.bitbucket.io/css_hacks.html">Browser Strangeness</a></h3><p>Some browser-specific CSS properties.</p><h3 id="Fully-Embracing-HTTPS"><a href="#Fully-Embracing-HTTPS" class="headerlink" title="Fully Embracing HTTPS"></a><a href="https://www.hackerfactor.com/blog/index.php?/archives/957-Fully-Embracing-HTTPS.html">Fully Embracing HTTPS</a></h3><p>TLS Tracking, be careful.</p><h3 id="Linux-Man-Pages-–-Dash-Dash"><a href="#Linux-Man-Pages-–-Dash-Dash" class="headerlink" title="Linux Man Pages – Dash Dash"></a><a href="https://dashdash.io/">Linux Man Pages – Dash Dash</a></h3><p>Dash Dash takes the Unix (Linux, BSD, macOS) open source manual pages and sets the content in a beautiful set of typefaces while adding just a bit of animation and design.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Linux </tag>
            
            <tag> CSS </tag>
            
            <tag> Privacy </tag>
            
            <tag> TLS </tag>
            
            <tag> Command Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 16</title>
      <link href="/2022/04/17/issue-16-202204-2/"/>
      <url>/2022/04/17/issue-16-202204-2/</url>
      
        <content type="html"><![CDATA[<h3 id="What-is-the-difference-between-POST-and-PUT-in-HTTP"><a href="#What-is-the-difference-between-POST-and-PUT-in-HTTP" class="headerlink" title="What is the difference between POST and PUT in HTTP?"></a><a href="https://stackoverflow.com/questions/630453/what-is-the-difference-between-post-and-put-in-http">What is the difference between POST and PUT in HTTP?</a></h3><p>Some considerations to use <code>POST</code> and <code>PUT</code> HTTP methods for creating a resource when designing RESTful APIs.</p><h3 id="Linux-Signals"><a href="#Linux-Signals" class="headerlink" title="Linux Signals"></a><a href="https://devopedia.org/linux-signals">Linux Signals</a></h3><p>What is the Linux signal mechanism? How to use it.</p><h3 id="A-list-of-new-ish-command-line-tools"><a href="#A-list-of-new-ish-command-line-tools" class="headerlink" title="A list of new(ish) command line tools"></a><a href="https://jvns.ca/blog/2022/04/12/a-list-of-new-ish--command-line-tools/">A list of new(ish) command line tools</a></h3><p>Alternatives to common unix commands. Like <code>dust</code>: a more intuitive version of <code>du</code>.</p><p>Some tools are new. Like <code>jq</code>: a lightweight and flexible command-line JSON processor.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Linux </tag>
            
            <tag> RESTful </tag>
            
            <tag> Command Line </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 15</title>
      <link href="/2022/04/05/issue-15-202204-1/"/>
      <url>/2022/04/05/issue-15-202204-1/</url>
      
        <content type="html"><![CDATA[<h3 id="The-Illustrated-TLS-Connection"><a href="#The-Illustrated-TLS-Connection" class="headerlink" title="The Illustrated TLS Connection"></a><a href="https://tls.ulfheim.net/">The Illustrated TLS Connection</a></h3><p>Every byte of a TLS connection explained and reproduced.</p><h3 id="Design-Patterns-for-Humans"><a href="#Design-Patterns-for-Humans" class="headerlink" title="Design Patterns for Humans"></a><a href="https://roadmap.sh/guides/design-patterns-for-humans">Design Patterns for Humans</a></h3><p>A language agnostic, ultra-simplified explanation to design patterns.</p><h3 id="vimcolorschemes"><a href="#vimcolorschemes" class="headerlink" title="vimcolorschemes"></a><a href="https://vimcolorschemes.com/">vimcolorschemes</a></h3><p>Trending vim color schemes.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> TLS </tag>
            
            <tag> Design Patterns </tag>
            
            <tag> Vim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 14</title>
      <link href="/2022/03/08/issue-14-202203-1/"/>
      <url>/2022/03/08/issue-14-202203-1/</url>
      
        <content type="html"><![CDATA[<h3 id="C-Cheat-Sheets"><a href="#C-Cheat-Sheets" class="headerlink" title="C++ Cheat Sheets"></a><a href="https://hackingcpp.com/cpp/cheat_sheets.html">C++ Cheat Sheets</a></h3><p>Graphical C++ cheat sheets.</p><h3 id="A-Visual-Guide-to-Graph-Traversal-Algorithms"><a href="#A-Visual-Guide-to-Graph-Traversal-Algorithms" class="headerlink" title="A Visual Guide to Graph Traversal Algorithms"></a><a href="https://workshape.github.io/visual-graph-algorithms/">A Visual Guide to Graph Traversal Algorithms</a></h3><p>Graph Traversal Algorithms are a key topic of study in Computer Science and lay a foundation for Artificial Intelligence. In this blog the resource is interactive and readers can use the visualizations to see how the algorithms can be applied to search graphs and solve certain problems.</p><h3 id="endoflife-date"><a href="#endoflife-date" class="headerlink" title="endoflife.date"></a><a href="https://endoflife.date/">endoflife.date</a></h3><p>It is a community-maintained project to document end-of-life dates, and support lifecycles of various products. Like JDK 8, its active support will end on 31 Mar 2022.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Algorithm </tag>
            
            <tag> C++ </tag>
            
            <tag> endoflife.date </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 13</title>
      <link href="/2022/02/21/issue-13-202202-2/"/>
      <url>/2022/02/21/issue-13-202202-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Big-O-Algorithm-Complexity-Cheat-Sheet"><a href="#Big-O-Algorithm-Complexity-Cheat-Sheet" class="headerlink" title="Big-O Algorithm Complexity Cheat Sheet"></a><a href="https://www.bigocheatsheet.com/">Big-O Algorithm Complexity Cheat Sheet</a></h3><p>The space and time Big-O complexities of common algorithms used in Computer Science.</p><h3 id="LXC-vs-Docker"><a href="#LXC-vs-Docker" class="headerlink" title="LXC vs Docker"></a><a href="https://earthly.dev/blog/lxc-vs-docker/">LXC vs Docker</a></h3><p>Which container platform is right for you?</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Algorithm </tag>
            
            <tag> Container </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 12</title>
      <link href="/2022/02/13/issue-12-202202-1/"/>
      <url>/2022/02/13/issue-12-202202-1/</url>
      
        <content type="html"><![CDATA[<h3 id="ValidKube"><a href="#ValidKube" class="headerlink" title="ValidKube"></a><a href="https://validkube.com/">ValidKube</a></h3><p>ValidKube combines the best open-source tools to help ensure Kubernetes YAML best practices, hygiene &amp; security.</p><h3 id="JLess"><a href="#JLess" class="headerlink" title="JLess"></a><a href="https://pauljuliusmartinez.github.io/">JLess</a></h3><p>JLess is a command-line JSON viewer designed for reading, exploring, and searching through JSON data.</p><h3 id="How-Postgres-Stores-Rows"><a href="#How-Postgres-Stores-Rows" class="headerlink" title="How Postgres Stores Rows"></a><a href="https://ketansingh.me/posts/how-postgres-stores-rows/">How Postgres Stores Rows</a></h3><p>How PostgreSQL stores the data onto the disk and there are a few interesting things that might be useful for application developers.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Kubernetes </tag>
            
            <tag> JSON </tag>
            
            <tag> PostgreSQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 11</title>
      <link href="/2022/01/23/issue-11-202201-2/"/>
      <url>/2022/01/23/issue-11-202201-2/</url>
      
        <content type="html"><![CDATA[<h3 id="git-annex"><a href="#git-annex" class="headerlink" title="git-annex"></a><a href="https://git-annex.branchable.com/">git-annex</a></h3><p>git-annex allows managing large files with git, without storing the file contents in git.</p><p>It can sync, backup, and archive your data, offline and online.</p><p>Checksums and encryption keep your data safe and secure.</p><h3 id="Online-Privacy-101"><a href="#Online-Privacy-101" class="headerlink" title="Online Privacy 101"></a><a href="https://onlineprivacy101.info/">Online Privacy 101</a></h3><p>A practical, open-source guide to protect yourself online.</p><h3 id="CSS-Gradient-Generator"><a href="#CSS-Gradient-Generator" class="headerlink" title="CSS Gradient Generator"></a><a href="https://www.joshwcomeau.com/gradient-generator/">CSS Gradient Generator</a></h3><p>To generate beautiful CSS gradient elements.</p><h3 id="How-To-Web3"><a href="#How-To-Web3" class="headerlink" title="How To Web3"></a><a href="https://www.howtoweb3.guide/">How To Web3</a></h3><p>A collection of Web3 resources.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> Git </tag>
            
            <tag> Privacy </tag>
            
            <tag> Web3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 10</title>
      <link href="/2022/01/03/issue-10-202201-1/"/>
      <url>/2022/01/03/issue-10-202201-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Why-IndexedDB-is-slow-and-what-to-use-instead"><a href="#Why-IndexedDB-is-slow-and-what-to-use-instead" class="headerlink" title="Why IndexedDB is slow and what to use instead"></a><a href="https://rxdb.info/slow-indexeddb.html">Why IndexedDB is slow and what to use instead</a></h3><p>IndexedDB is slow in multiple transactions, fast in a single transaction.</p><p>It is not easy to use a single transaction because of user operations and the browser’s multiple tabs.</p><p>Using IndexedDB as a filesystem, not as a database: All data is loaded into the memory on the initial page load, then persist the memory state into IndexedDB with a single write transaction.</p><p><a href="https://github.com/techfort/LokiJS">LokiJS: javascript embeddable &#x2F; in-memory database</a> is an alternative.</p><h3 id="Stanford-machine-learning-cheatsheets"><a href="#Stanford-machine-learning-cheatsheets" class="headerlink" title="Stanford machine learning cheatsheets"></a><a href="https://stanford.edu/~shervine/teaching/cs-229/">Stanford machine learning cheatsheets</a></h3><p><a href="https://github.com/afshinea/stanford-cs-229-machine-learning">Here</a> is the PDF versions. Available in <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/ar">العربية</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/en">English</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/es">Español</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/fa">فارسی</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/fr">Français</a> - <a href="https://stanford.edu/~shervine/l/ko/teaching/cs-229/cheatsheet-machine-learning-tips-and-tricks">한국어</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/pt">Português</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/tr">Türkçe</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/vi">Tiếng Việt</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/zh">简中</a> - <a href="https://github.com/afshinea/stanford-cs-229-machine-learning/tree/master/zh-tw">繁中</a></p><h3 id="My-First-5-Minutes-On-A-Server-Or-Essential-Security-for-Linux-Servers"><a href="#My-First-5-Minutes-On-A-Server-Or-Essential-Security-for-Linux-Servers" class="headerlink" title="My First 5 Minutes On A Server; Or, Essential Security for Linux Servers"></a><a href="https://sollove.com/2013/03/03/my-first-5-minutes-on-a-server-or-essential-security-for-linux-servers/">My First 5 Minutes On A Server; Or, Essential Security for Linux Servers</a></h3><ul><li><p>Change the root password to something long and complex;</p></li><li><p>Install <a href="http://www.fail2ban.org/">Fail2ban</a>;</p></li><li><p>Require SSH public key authentication;</p></li><li><p>Test the non-root user &amp; enable sudo;</p></li><li><p>Configure SSH to prevent password &amp; root logins and lock SSH to particular IPs;</p></li><li><p>Set up a firewall;</p></li><li><p>Enable automatic security updates;</p></li><li><p>Install <a href="http://linux.die.net/man/8/logwatch">Logwatch</a> to keep an eye on things.</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> Linux </tag>
            
            <tag> IndexedDB </tag>
            
            <tag> Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 9</title>
      <link href="/2021/12/26/issue-9-202112-1/"/>
      <url>/2021/12/26/issue-9-202112-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Tig"><a href="#Tig" class="headerlink" title="Tig"></a><a href="https://jonas.github.io/tig/">Tig</a></h3><p>Tig is an ncurses-based text-mode interface for git.</p><h3 id="Get-Programming-with-Go"><a href="#Get-Programming-with-Go" class="headerlink" title="Get Programming with Go"></a><a href="https://www.manning.com/books/get-programming-with-go">Get Programming with Go</a></h3><p>The book is good for Golang beginners.</p><h3 id="Firefox-Profilemaker"><a href="#Firefox-Profilemaker" class="headerlink" title="Firefox Profilemaker"></a><a href="https://ffprofile.com/">Firefox Profilemaker</a></h3><p>This tool will help you to create a Firefox profile with the defaults you like.</p><h3 id="Postgres-is-a-great-pub-sub-job-server"><a href="#Postgres-is-a-great-pub-sub-job-server" class="headerlink" title="Postgres is a great pub&#x2F;sub &amp; job server"></a><a href="https://webapp.io/blog/postgres-is-the-answer/">Postgres is a great pub&#x2F;sub &amp; job server</a></h3><p>If you need a publish&#x2F;subscribe or job server at any point in your project, it’s not a bad idea to start by using Postgres. It’ll give you lots of data integrity and performance guarantees, and it doesn’t require you or your team learning any new technology.</p><h3 id="理解-Log4Shell-漏洞"><a href="#理解-Log4Shell-漏洞" class="headerlink" title="理解 Log4Shell 漏洞"></a><a href="https://sspai.com/post/70394">理解 Log4Shell 漏洞</a></h3><p>Log4Shell 漏洞介绍的比较通俗易懂。</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> Git </tag>
            
            <tag> Java </tag>
            
            <tag> Golang </tag>
            
            <tag> Firefox </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 8</title>
      <link href="/2021/04/18/issue-8-202104-2/"/>
      <url>/2021/04/18/issue-8-202104-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Linaria"><a href="#Linaria" class="headerlink" title="Linaria"></a><a href="https://github.com/callstack/linaria">Linaria</a></h3><p>A tool to extract the CSS from CSS-in-JS components at build time.</p><h3 id="HTML-Boilerplate"><a href="#HTML-Boilerplate" class="headerlink" title="HTML Boilerplate"></a><a href="https://www.matuzo.at/blog/html-boilerplate/">HTML Boilerplate</a></h3><p>A HTML boilerplate.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> HTML </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 7</title>
      <link href="/2021/04/10/issue-7-202104-1/"/>
      <url>/2021/04/10/issue-7-202104-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Flex-Cheatsheet"><a href="#Flex-Cheatsheet" class="headerlink" title="Flex Cheatsheet"></a><a href="http://yoksel.github.io/flex-cheatsheet/">Flex Cheatsheet</a></h3><p>Interactive Flex demos.</p><h3 id="React-D3-js"><a href="#React-D3-js" class="headerlink" title="React + D3.js"></a><a href="https://wattenberger.com/blog/react-and-d3">React + D3.js</a></h3><p>Using D3.js inside of a React application to visualize data.</p><h3 id="Security-txt"><a href="#Security-txt" class="headerlink" title="Security.txt"></a><a href="https://securitytxt.org/">Security.txt</a></h3><p>A proposed standard which allows websites to define security policies.</p><h3 id="Fraidycat"><a href="#Fraidycat" class="headerlink" title="Fraidycat"></a><a href="https://fraidyc.at/">Fraidycat</a></h3><p>Fraidycat is a desktop app or browser extension for Firefox or Chrome. You can use it to follow people (hundreds) on whatever platform they choose - Twitter, a blog, YouTube, even on a public TiddlyWiki.</p><h3 id="ts-Command"><a href="#ts-Command" class="headerlink" title="ts Command"></a><a href="https://www.putorius.net/ts-command-add-convert-timestamps-linux.html">ts Command</a></h3><p>Add or convert timestamps for any output in Linux.</p><h3 id="The-Strange-Roots"><a href="#The-Strange-Roots" class="headerlink" title="The Strange Roots"></a><a href="https://www.thestrangeroots.com/posts/">The Strange Roots</a></h3><p>The origin of words used in technology and computer science.</p><h3 id="TheOldNet-Browser-Proxy"><a href="#TheOldNet-Browser-Proxy" class="headerlink" title="TheOldNet Browser Proxy"></a><a href="https://theoldnet.com/docs/httpproxy/index.html">TheOldNet Browser Proxy</a></h3><p>Return a website from the <a href="https://web.archive.org/">archive</a> instead of a live, present day website.</p><p>If you set the proxy port to <code>1996</code>, it will return the <code>1996</code> version of the website.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Weekly </tag>
            
            <tag> Linux </tag>
            
            <tag> CSS </tag>
            
            <tag> React </tag>
            
            <tag> Visualization </tag>
            
            <tag> Fraidycat </tag>
            
            <tag> The Strange Roots </tag>
            
            <tag> TheOldNet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 6</title>
      <link href="/2020/06/21/issue-6-202006-2/"/>
      <url>/2020/06/21/issue-6-202006-2/</url>
      
        <content type="html"><![CDATA[<h3 id="Box-shadow-generator"><a href="#Box-shadow-generator" class="headerlink" title="Box-shadow generator"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Background_and_Borders/Box-shadow_generator">Box-shadow generator</a></h3><p><img src="/images/box-shadow-generator.png" alt="Box-shadow generator"></p><h3 id="Researchers-and-Founders"><a href="#Researchers-and-Founders" class="headerlink" title="Researchers and Founders"></a><a href="https://blog.samaltman.com/researchers-and-founders">Researchers and Founders</a></h3><p>If you want to be one of the best people in the two groups:</p><ul><li>Think about the most important problems in your field and try to fix them;</li><li>Work hard;</li><li>Focus on the next step and the future;</li><li>Push you towards action;</li><li>Think independently;</li></ul><h3 id="CSS-Grid-Layout-Generator"><a href="#CSS-Grid-Layout-Generator" class="headerlink" title="CSS Grid Layout Generator"></a><a href="https://css-grid-layout-generator.pw/">CSS Grid Layout Generator</a></h3><p>Build complex CSS grid layouts — visually.</p><p><img src="/images/css-grid-layout-generator.png" alt="CSS Grid Layout Generator"></p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> Personal Growth </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 5</title>
      <link href="/2020/06/08/issue-5-202006-1/"/>
      <url>/2020/06/08/issue-5-202006-1/</url>
      
        <content type="html"><![CDATA[<h3 id="VIBE"><a href="#VIBE" class="headerlink" title="VIBE"></a><a href="https://github.com/mkocabas/VIBE">VIBE</a></h3><p>Official implementation of CVPR2020 paper “VIBE: Video Inference for Human Body Pose and Shape Estimation”.</p><p><img src="/images/vibe.gif" alt="VIBE"></p><h3 id="Finding-secrets-by-decompiling-Python-bytecode-in-public-repositories"><a href="#Finding-secrets-by-decompiling-Python-bytecode-in-public-repositories" class="headerlink" title="Finding secrets by decompiling Python bytecode in public repositories"></a><a href="https://blog.jse.li/posts/pyc/">Finding secrets by decompiling Python bytecode in public repositories</a></h3><p>Since <code>v3.2</code>, Python moved <code>.pyc</code> byte-code files to a directory <code>__pycache__</code>. Many text editors and IDEs, such as PyCharm, hide the directory, making it easy to forget that they even exist. If you stored keys, passwords in a file <code>keys.py</code>, and ignored <code>keys.py</code> in the <code>.gitignore</code> file, but forgot <code>__pycache__</code>, then pushed the code to the public repository. Someone can decompile the <code>.pyc</code> files and find the keys, passwords.</p><h3 id="A-collection-of-useful-gitignore-templates"><a href="#A-collection-of-useful-gitignore-templates" class="headerlink" title="A collection of useful .gitignore templates"></a><a href="https://github.com/github/gitignore">A collection of useful .gitignore templates</a></h3><p>This is GitHub’s collection of <code>.gitignore</code> file templates.</p><h3 id="Choose-an-open-source-license"><a href="#Choose-an-open-source-license" class="headerlink" title="Choose an open source license"></a><a href="https://choosealicense.com/">Choose an open source license</a></h3><p>A site to provide non-judgmental guidance on choosing a license for your open source project. The GitHub repository: <a href="https://github.com/github/choosealicense.com">https://github.com/github/choosealicense.com</a>.</p><h3 id="PureCSS-Gaze"><a href="#PureCSS-Gaze" class="headerlink" title="PureCSS Gaze"></a><a href="https://diana-adrianne.com/purecss-gaze/">PureCSS Gaze</a></h3><p>A pure CSS oil painting.</p><p><img src="/images/pure-css-gaze.png" alt="PureCSS Gaze"></p><h3 id="CSS-Transform-Functions-Visualizer"><a href="#CSS-Transform-Functions-Visualizer" class="headerlink" title="CSS Transform Functions Visualizer"></a><a href="https://css-transform.moro.es/">CSS Transform Functions Visualizer</a></h3><p>CSS Transform Playground. Online tool to visualize 2D &amp; 3D CSS3 Transform functions. </p><p><img src="/images/css-transform-functions-visualizer.png" alt="CSS Transform Functions Visualizer"></p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> Git </tag>
            
            <tag> Open Source License </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 4</title>
      <link href="/2020/05/31/issue-4-202005-4/"/>
      <url>/2020/05/31/issue-4-202005-4/</url>
      
        <content type="html"><![CDATA[<h3 id="呼吸习惯与身心健康相关"><a href="#呼吸习惯与身心健康相关" class="headerlink" title="呼吸习惯与身心健康相关"></a><a href="https://www.solidot.org/story?sid=64454">呼吸习惯与身心健康相关</a></h3><p>绝大多数人对呼吸有误解。我们认为呼吸是一种被动的行为。呼吸意味着活着，停止呼吸意味着死亡。但呼吸并非是简单的二元关系。<a href="https://www.wsj.com/articles/the-healing-power-of-proper-breathing-11590098696">如何呼吸至关重要</a>。我们呼吸摄入的空气分子比地球上所有沙滩上的沙砾还要多。我们每天呼入呼出的空气分子重约 30 磅，远超饮食。呼吸的方式与饮食、运动和基因一样重要。正确的呼吸能让我们活得更久更健康，糟糕的呼吸可能导致一系列慢性疾病，可能会改变我们的身体结构。古代的人对此主题有更深入的理解。主要宗教和文化都认为正确的呼吸对健康很关键。中国古代学者还写了多本关于呼吸的书籍。印度瑜伽修行者更是<a href="https://www.ncbi.nlm.nih.gov/pmc/articles/PMC3221193/">呼吸的大师</a>。我们许多人的呼吸习惯都不够好，我们会将其归罪于身体年龄。大约 30 岁之后，胸部骨骼会变薄向内收缩。到  50 岁时我们失去了 12% 的肺容量。这一收缩之后会加速。我们被迫更快更艰难的呼吸。但好消息是我们可以在任何时候改变呼吸习惯，逆转肺容量损失。1980 年代，长达 70 年的心脏疾病研究项目 Framingham Study 发现，衡量寿命的一个最关键指标不是遗传、饮食和每天的锻炼量，而是肺容量。肺容量越大寿命越长。更大的肺部可以用更少的呼吸吸入更多的空气，减少身体的磨损。健康呼吸的第一步是延长呼吸，更深入更长点。用大约 5 秒钟的时间慢慢吸气，然后用类似的时间呼气，每分钟大约完成六次呼吸。按照这样的节奏呼气吸气，几分钟就能将血压降低 10 个甚至 15 个点。健康呼吸的第二步：用鼻子呼吸。</p><p><em>但是我想知道日常生活中一分钟呼吸6次如何做到。</em></p><h3 id="Patroni"><a href="#Patroni" class="headerlink" title="Patroni"></a><a href="https://github.com/zalando/patroni">Patroni</a></h3><p>A template for PostgreSQL High Availability with Etcd, Consul, ZooKeeper, or Kubernetes.</p><h3 id="So-you-want-to-learn-Microservices"><a href="#So-you-want-to-learn-Microservices" class="headerlink" title="So you want to learn Microservices?"></a><a href="https://dev.to/kgoralski/deep-dive-into-microservices-architecture-h54">So you want to learn Microservices?</a></h3><p>Micro services architecture is complicated.</p><h3 id="A-list-of-beginner-friendly-NLP-projects—using-pre-trained-models"><a href="#A-list-of-beginner-friendly-NLP-projects—using-pre-trained-models" class="headerlink" title="A list of beginner-friendly NLP projects—using pre-trained models"></a><a href="https://towardsdatascience.com/a-list-of-beginner-friendly-nlp-projects-using-pre-trained-models-dc4768b4bec0">A list of beginner-friendly NLP projects—using pre-trained models</a></h3><p>To build production software projects based on NLP (natural language processing): ML-powered autocomplete, customer support bots , predictive text generators, language identifiers, media monitors.</p><h3 id="Prometheus-Basics"><a href="#Prometheus-Basics" class="headerlink" title="Prometheus-Basics"></a><a href="https://github.com/yolossn/Prometheus-Basics">Prometheus-Basics</a></h3><p>A beginner friendly introduction to <em>prometheus</em>. <em>Prometheus</em> is a system monitoring and alerting system.</p><h3 id="MySQL-sharding-at-Quora"><a href="#MySQL-sharding-at-Quora" class="headerlink" title="MySQL sharding at Quora"></a><a href="https://www.quora.com/q/quoraengineering/MySQL-sharding-at-Quora?share=1">MySQL sharding at Quora</a></h3><p>How Quora scaled MySQL to meet the growing content requirements.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Weekly </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> Health </tag>
            
            <tag> 健康 </tag>
            
            <tag> Microservices </tag>
            
            <tag> NLP </tag>
            
            <tag> Prometheus </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 3</title>
      <link href="/2020/05/24/issue-3-202005-3/"/>
      <url>/2020/05/24/issue-3-202005-3/</url>
      
        <content type="html"><![CDATA[<h3 id="Automatically-Enable-the-Dark-Mode"><a href="#Automatically-Enable-the-Dark-Mode" class="headerlink" title="Automatically Enable the Dark Mode"></a><a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">Automatically Enable the Dark Mode</a></h3><p>Use the <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme">prefers-color-scheme</a> CSS media feature to detect whether the OS(Operating System) is using the dark color theme.</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@media</span> <span class="token punctuation">(</span><span class="token property">prefers-color-scheme</span><span class="token punctuation">:</span> dark<span class="token punctuation">)</span></span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Why-is-This-Website-Port-Scanning-me"><a href="#Why-is-This-Website-Port-Scanning-me" class="headerlink" title="Why is This Website Port Scanning me?"></a><a href="https://nullsweep.com/why-is-this-website-port-scanning-me/">Why is This Website Port Scanning me?</a></h3><p>Some websites do port scanning on the local host, such as eBay.</p><h3 id="FunctionTrace"><a href="#FunctionTrace" class="headerlink" title="FunctionTrace"></a><a href="https://functiontrace.com/">FunctionTrace</a></h3><p>A graphical Python profiler. It consists of a Rust server and a Python client. The Firefox Profiler can process generated trace files.</p><h3 id="Materialize"><a href="#Materialize" class="headerlink" title="Materialize"></a><a href="https://materialize.io/">Materialize</a></h3><p>A streaming database for real-time applications, based on PostgreSQL.</p><h3 id="SOCODE-PRO"><a href="#SOCODE-PRO" class="headerlink" title="SOCODE.PRO"></a><a href="https://socode.pro/">SOCODE.PRO</a></h3><p>A search box for programming, to search programming documents, public APIs, cheat sheets, packages, code snippets, GitHub repositories.</p><h3 id="iHateRegex"><a href="#iHateRegex" class="headerlink" title="iHateRegex"></a><a href="https://ihateregex.io/">iHateRegex</a></h3><p>Regular expression cheat sheets.</p><h3 id="Python-Developers-Survey-2019-Results"><a href="#Python-Developers-Survey-2019-Results" class="headerlink" title="Python Developers Survey 2019 Results"></a><a href="https://www.jetbrains.com/lp/python-developers-survey-2019/">Python Developers Survey 2019 Results</a></h3><p>The Python Software Foundation and JetBrains released the survey results.</p><h3 id="ZipFly"><a href="#ZipFly" class="headerlink" title="ZipFly"></a><a href="https://github.com/BuzonIO/zipfly">ZipFly</a></h3><p>To study how to process large files.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> PostgreSQL </tag>
            
            <tag> SOCODE.PRO </tag>
            
            <tag> Regular Expression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 2</title>
      <link href="/2020/05/17/issue-2-202005-2/"/>
      <url>/2020/05/17/issue-2-202005-2/</url>
      
        <content type="html"><![CDATA[<h3 id="React-Native-For-Windows-Mac"><a href="#React-Native-For-Windows-Mac" class="headerlink" title="React Native For Windows &amp; Mac"></a><a href="https://microsoft.github.io/react-native-windows/">React Native For Windows &amp; Mac</a></h3><p>Bring React Native to <em>Windows &amp; Mac</em> devices. Microsoft’s open source projects.</p><h3 id="Mojo"><a href="#Mojo" class="headerlink" title="Mojo"></a><a href="https://github.com/chromium/chromium/tree/master/mojo">Mojo</a></h3><p>Mojo is an IPC mechanism used in Chromium. It supports transfer of native object handles (e.g. file descriptors) across process boundaries. </p><p>Mojo has C++, JavaScript, Java bindings.</p><h3 id="Everysize"><a href="#Everysize" class="headerlink" title="Everysize"></a><a href="https://everysize.kibalabs.com/">Everysize</a></h3><p>Check your responsive webpage looks great in every size 🖥 💻 📱 👀.</p><h3 id="Web-Vitals"><a href="#Web-Vitals" class="headerlink" title="Web Vitals"></a><a href="https://web.dev/vitals/">Web Vitals</a></h3><p><em>Web Vitals</em> can help you quantify the experience of your site and identify opportunities to improve.</p><h3 id="HTTP-3原理与实践"><a href="#HTTP-3原理与实践" class="headerlink" title="HTTP&#x2F;3原理与实践"></a><a href="https://mp.weixin.qq.com/s/7tKgSmkMWHdIyvrTWJE8sg">HTTP&#x2F;3原理与实践</a></h3><p>基于QQ兴趣部落接入HTTP&#x2F;3的实践，讲解HTTP&#x2F;3 的原理以及业务接入的方式。</p><h3 id="How-I-learned-1500-Chinese-Characters-in-a-Month-Heisig-Method-Review"><a href="#How-I-learned-1500-Chinese-Characters-in-a-Month-Heisig-Method-Review" class="headerlink" title="How I learned 1500 Chinese Characters in a Month - Heisig Method Review"></a><a href="https://underscorehao.net/2020/05/learning-1500-chinese-characters-in-a-month-heisig-method-review/">How I learned 1500 Chinese Characters in a Month - Heisig Method Review</a></h3><p>Each chinese character consists of several basic character components. One basic character component, one English keyword attached. Build a story for a chinese character with these English keywords using your familiar people or things.</p><h3 id="New-CSS-Dimensions"><a href="#New-CSS-Dimensions" class="headerlink" title="New CSS Dimensions"></a><a href="https://drafts.csswg.org/css-values-4/#dimensions">New CSS Dimensions</a></h3><p><code>lh</code>: Line height of the element.</p><p><code>rlh</code>: Line height of the root element.</p><h3 id="Let’s-Take-a-Deep-Dive-Into-the-CSS-Contain-Property"><a href="#Let’s-Take-a-Deep-Dive-Into-the-CSS-Contain-Property" class="headerlink" title="Let’s Take a Deep Dive Into the CSS Contain Property"></a><a href="https://css-tricks.com/lets-take-a-deep-dive-into-the-css-contain-property/">Let’s Take a Deep Dive Into the CSS Contain Property</a></h3><p>The <code>contain</code> CSS property allows an author to indicate that an element and its contents are, as much as possible, independent of the rest of the document tree.</p><p>Safari doesn’t support the property.</p><p>If you are using React or Vue.js, they have already did some similar things.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Weekly </tag>
            
            <tag> CSS </tag>
            
            <tag> React Native </tag>
            
            <tag> Mojo </tag>
            
            <tag> HTTP/3 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Weekly - issue 1</title>
      <link href="/2020/05/10/issue-1-202005-1/"/>
      <url>/2020/05/10/issue-1-202005-1/</url>
      
        <content type="html"><![CDATA[<h3 id="Rich"><a href="#Rich" class="headerlink" title="Rich"></a><a href="https://github.com/willmcgugan/rich">Rich</a></h3><p>A Python library for rendering rich text and beautiful formatting to the terminal.</p><h3 id="iFixit-chiphell"><a href="#iFixit-chiphell" class="headerlink" title="iFixit, chiphell"></a><a href="https://www.ifixit.com/Teardown">iFixit</a>, <a href="https://www.chiphell.com/">chiphell</a></h3><p>Two electronic products teardown websits. <a href="https://www.chiphell.com/">chiphell</a> has a <a href="https://www.youtube.com/watch?v=WAngQWXXGIQbilibili">YouTube channel</a>.</p><h3 id="Caddy"><a href="#Caddy" class="headerlink" title="Caddy"></a><a href="https://github.com/caddyserver/caddy">Caddy</a></h3><p>A multi-platform web server with automatic HTTPS, supports HTTP&#x2F;1.1, HTTP&#x2F;2, HTTP&#x2F;3.</p><h3 id="Canvas-Engines-Comparison"><a href="#Canvas-Engines-Comparison" class="headerlink" title="Canvas Engines Comparison"></a><a href="https://benchmarks.slaylines.io/">Canvas Engines Comparison</a></h3><p>PixiJS has the fastest FPS(60 FPS &#x2F; 1000 count, 60 FPS &#x2F; 2000 count, 43 FPS &#x2F; 5000 count), then Two.js, Fabric.js, Paper.js. Paper.js’s data look like so bad.</p><h3 id="为什么穷人总是做出错误的决策？"><a href="#为什么穷人总是做出错误的决策？" class="headerlink" title="为什么穷人总是做出错误的决策？"></a><a href="https://www.solidot.org/story?sid=63532">为什么穷人总是做出错误的决策？</a></h3><p>为什么穷人更容易犯罪？更容易变胖？更容易酗酒和吸毒？总而言之，<a href="https://thecorrespondent.com/283/poverty-isnt-a-lack-of-character-its-a-lack-of-cash/37442933638-a4773584">为什么穷人做出如此多的错误决策</a>？统计数据显示，穷人花的多存得少，吸烟多锻炼少，喝得多吃的不健康。在求职时，他们简历材料写的很糟糕面试时也非常不专业。普林斯顿心理学家 Eldar Shafir 认为这一现象背后的原因是心理学上的稀缺性。对经济学家来说，一切都围绕着稀缺，即使你有钱也买不到一切。稀缺影响到你的思维，进而影响到你的行为。时间、金钱、友谊和食物都与“稀缺心态”相关。有稀缺感的人更长于管理短期问题。穷人有着惊人的短期管理能力。但“稀缺心态”的缺点比优点更大。稀缺迫使你将注意力集中在迫在眉睫的匮乏上，比如明天要支付的账单。这是一种消耗，你无法集中注意力到其它重要的问题上。这和计算机类似，同时运行多个高占用程序会导致计算机越来越慢，这不是因为它性能差。穷人之所以频繁犯错，不是因为他们蠢，而是因为生活在一个任何人都会做出错误决策的环境中。</p><p><a href="https://thecorrespondent.com/283/poverty-isnt-a-lack-of-character-its-a-lack-of-cash/37442933638-a4773584">Poverty isn’t a lack of character. It’s a lack of cash</a></p><h3 id="AI-想要一切照旧"><a href="#AI-想要一切照旧" class="headerlink" title="AI 想要一切照旧"></a><a href="https://www.solidot.org/story?sid=63165">AI 想要一切照旧</a></h3><p>围绕 AI 的炒作已经达到了荒谬的程度，而对 AI 的批评没有比 Molly Sauter 的《Instant Recall》一文更入木三分了。Sauter 认为，<a href="http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/">机器学习本质上是保守的</a>，讨厌变化。如果你以“Hey darling”开头给伴侣发短信，那么下一次当你输入“Hey”时它会自动加上“darling”，即使你其实想发的是分手短信。如果你输入一个以前没有输入过的词或短语，那么自动完成建议会提示你统计学上所有用户最常用的短语。这种保守性渗透到了每一个算法推断系统：搜索冰箱或一双鞋，那么这一记录会一直伴随着你从一个地方到另一个地方，即使你已经买过了冰箱或鞋子。在 YouTube 上看了几部视频了解下白人民族主义或地球是平的阴谋论，那么算法会推荐类似的视频去增强你的“兴趣”。机器学习擅长关联但不擅长因果，它不太可能产生可靠的推断意图方法。这是人类学的基石：没有对话意图是不可知的。而机器学习所寻找的是与已建模的东西相似的东西：相似的汽车相似的面孔。这种保守性会让机器学习变得有害。如果你让机器学习系统预测应该逮捕谁，那么它会建议警察去逮捕与过去被捕的人相似的人。所以预测犯罪系统预测的不是犯罪而是警察习惯的治安管理。世界各地技术人员所持的一个糟糕的经验主义意识形态是断言数据不会撒谎，因此所有基于数据的政策能脱离政治进入证据的范围：假装数据能告诉你社会需要或想要的结果，但实际上数据是帮助你得到你想要的结果。</p><p><a href="http://blog.lareviewofbooks.org/provocations/neophobic-conservative-ai-overlords-want-everything-stay/">Our Neophobic, Conservative AI Overlords Want Everything to Stay the Same</a> </p><h3 id="Kim-Jong-Undead"><a href="#Kim-Jong-Undead" class="headerlink" title="Kim Jong Undead"></a><a href="https://www.hackerfactor.com/blog/index.php?/archives/881-Kim-Jong-Undead.html">Kim Jong Undead</a></h3><p>There were rumors of North Korea’s leader, Kim Jong Un in April, 2020, maybe he was dead. The North Korean State Media released a video of Kim Jong Un on May 1st, 2020. The author has lots of posts about digital photo analysis. He analyzed the video and had a conclusion, this was not a viable proof-of-life video.</p><h3 id="Noob’s-Guide-to-Linux-Audio-ALSA-OSS-and-Pulse-Audio-Explained"><a href="#Noob’s-Guide-to-Linux-Audio-ALSA-OSS-and-Pulse-Audio-Explained" class="headerlink" title="Noob’s Guide to Linux Audio: ALSA, OSS, and Pulse Audio Explained"></a><a href="https://linuxhint.com/guide_linux_audio/">Noob’s Guide to Linux Audio: ALSA, OSS, and Pulse Audio Explained</a></h3><p>OSS, ALSA are APIs between sound car drivers and applications. OSS already belongs to the past. PulseAudio and JACK are sound servers. We usually use PulseAudio on Linux. PulseAudio is for general Linux users, JACK is for DJs and audio professionals.</p><h3 id="Startup-financial-models-12-templates-compared-for-SaaS"><a href="#Startup-financial-models-12-templates-compared-for-SaaS" class="headerlink" title="Startup financial models - 12 templates compared for SaaS"></a><a href="https://www.stephnass.com/blog/startup-financial-model">Startup financial models - 12 templates compared for SaaS</a></h3><p><img src="/images/startup-financial-models.png" alt="Startup financial models"></p><h3 id="Making-Emacs-popular-again"><a href="#Making-Emacs-popular-again" class="headerlink" title="Making Emacs popular again"></a><a href="https://lwn.net/SubscriberLink/819452/1480c3a59d3d9093/">Making Emacs popular again</a></h3><p>Emacs has fallen into relative obscurity over the years. </p><p>Its appearance is not like a modern application. The X-based GUIs needs rewriting by an expert, and has needed it for decades.</p><p>The keyboard shortcuts and the terminology used by Emacs don’t match with what users expect, it isn’t friendly to new users.</p><p>GTK+ is not really cross-platform, QT is only available for GPL 2 and 3. The license issues make it is difficult to maintain a consistent appearance and find free icons.</p><p>Shortage of human power.</p>]]></content>
      
      
      <categories>
          
          <category> Weekly </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Python </tag>
            
            <tag> Weekly </tag>
            
            <tag> iFixit </tag>
            
            <tag> AI </tag>
            
            <tag> Linux </tag>
            
            <tag> Startup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>React notes</title>
      <link href="/2020/03/02/react-notes/"/>
      <url>/2020/03/02/react-notes/</url>
      
        <content type="html"><![CDATA[<p>Some concepts I don’t know from backend programming languages, some places I might make mistakes.</p><p>React: <code>&gt;= v16.13.0</code></p><span id="more"></span><h2 id="When-to-use"><a href="#When-to-use" class="headerlink" title="When to use"></a>When to use</h2><p>React is for developing <em>big</em> client-side web applications.</p><p>React is a library that keeps the DOM in sync with your data. It is not equal to Web Components, they solve different problems.</p><h2 id="Kinds-of-web-applications"><a href="#Kinds-of-web-applications" class="headerlink" title="Kinds of web applications"></a>Kinds of web applications</h2><ul><li>Round-Trip<br>Clicking a link or button leads the browser to load a new page, the browser shows HTML pages, most of application logics and data are resident on the server.</li><li>Single-Page<br>SPA(Single-Page Applications) is an another approach. The browser loads an initial HTML page, the page will not be reloaded or replaced later, user interactions lead to HTTP requests for parts of the page or data, then update the existing HMTL elements.</li></ul><p> React is well-suited to SPAs.</p><h2 id="Other-solutions"><a href="#Other-solutions" class="headerlink" title="Other solutions"></a>Other solutions</h2><p>React is a library that is the ‘V’ of MVC.</p><ul><li><p>Angular<br>A framework. You need to walk along the direction that it specified.</p></li><li><p>Vue.js<br>It is between Angular and React.</p></li></ul><h2 id="JSX"><a href="#JSX" class="headerlink" title="JSX"></a>JSX</h2><ul><li><p><code>true</code>, <code>false</code>, <code>null</code>, <code>undefined</code> are ignored;</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token boolean">true</span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p> This code is valid, but doesn’t render anything.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>showHeader <span class="token operator">&amp;&amp;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Header</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> JSX renders the <code>&lt;Header /&gt;</code> component only if <code>showHeader</code> is true.</p><p> But </p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>messages<span class="token punctuation">.</span>length <span class="token operator">&amp;&amp;</span> <span class="token operator">&lt;</span>MessageList messages<span class="token operator">=</span><span class="token punctuation">&#123;</span>props<span class="token punctuation">.</span>messages<span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> JSX still renders the <code>MessageList</code> component if the length is <code>0</code>. Need to use the condition <code>props.messages.length &gt; 0</code>.</p></li><li><p>Always start component names with a capital letter, otherwise React treats the components as DOM tags.</p></li><li><p>React requires components to return a single top-level element. Use the following special React element to return multiple elements.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token plain-text">       </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.Fragment</span></span><span class="token punctuation">></span></span><span class="token comment">// OR</span><span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">       </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text">       </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>       <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Multiple line JSX statements should be enclosed by parentheses, it isn’t required, but should be, to avoid the pitfalls of JavaScript’s automatic semicolon insertion.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// "element" is a React component</span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">Hello, </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token comment">// OR </span><span class="token keyword">const</span> element <span class="token operator">=</span> <span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span><span class="token punctuation">></span></span><span class="token plain-text">        Hello, </span><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h2><p>The methods to style:</p><ul><li>Plain CSS stylesheet (as usual), just import the CSS files and use the <code>class</code>(<code>className</code> in React) attribute on HTML elements. Could use <a href="http://getbem.com/">BEM</a> (Block Element Modifier) to solve the global namespace issue and use other existing libraries and tools, such as <a href="https://sass-lang.com/">Sass</a>, <a href="https://tailwindcss.com/">Tailwind CSS</a>;</li><li>CSS modules. It works with <em>webpack</em> or <em>Browserify</em> and is not an official spec. Create a <code>button.module.css</code> or <code>button.module.scss</code>, only import it into <code>button.js</code>, the rules only apply to the components within <code>button.js</code>;</li><li>Web Components. The CSS styles of the components are local scoped;</li><li>CSS-in-JS, like the <a href="https://github.com/styled-components/styled-components">styled-components</a> third-party library. This method unlocks some features, such as theme nesting, dynamic styles;</li><li>Inline styling;</li></ul><h3 id="Sass-and-styled-components"><a href="#Sass-and-styled-components" class="headerlink" title="Sass and styled-components"></a>Sass and styled-components</h3><p>Sometimes we use a CSS framework and also want to use styled-components to customize it. The example created by <code>create-react-app</code> uses <a href="https://github.com/jgthms/bulma">bulma</a>:</p><ul><li><p>Install node-sass, bulma, styled-components;</p></li><li><p>Import the bulma button element;</p><p><code>button.scss</code>:</p> <pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"bulma/sass/utilities/_all.sass"</span><span class="token punctuation">;</span></span><span class="token atrule"><span class="token rule">@import</span> <span class="token string">"bulma/sass/elements/button.sass"</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>App.js</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token comment">// import styled from 'styled-components/macro';</span><span class="token keyword">import</span> styled <span class="token keyword">from</span> <span class="token string">'styled-components'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">"./button.scss"</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Button</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// => className = 'sc-AxjCm fzAihE'</span>    <span class="token keyword">const</span> <span class="token punctuation">&#123;</span>className<span class="token punctuation">,</span> <span class="token operator">...</span>rest<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>props<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">// => &lt;button class="button sc-AxjCm fzAihE">Click&lt;/button></span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">className</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">button </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>className<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span>rest<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> StyledButton <span class="token operator">=</span> <span class="token function">styled</span><span class="token punctuation">(</span>Button<span class="token punctuation">)</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">    color: red;    </span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// return &lt;Button css="color: red"/>;  // another way to style</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">StyledButton</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>CSS modules</em> could work together with Sass and styled-components, but it treats all class names from the two common files and customized class names within <code>button.module.scss</code>(renamed <code>button.css</code> to <code>button.module.css</code>) as local class names. This is not good, it is very hard to avoid using common CSS files completely in practice. Exported common class names like this:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">exports<span class="token punctuation">.</span>locals <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">"button"</span><span class="token operator">:</span> <span class="token string">"button_button__13ZnZ"</span><span class="token punctuation">,</span>    <span class="token string-property property">"is-loading"</span><span class="token operator">:</span> <span class="token string">"button_is-loading__3N-29"</span><span class="token punctuation">,</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>Web Components</em> also could isolate CSS styles via the Shadow DOM. No random generated class names, more natural.</p></li></ul><h2 id="Props"><a href="#Props" class="headerlink" title="Props"></a>Props</h2><ul><li><p>The value of React Props can be a literal string or an expression(in <code>&#123;&#125;</code>).</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">text</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Click<span class="token punctuation">"</span></span> <span class="token attr-name">disabled</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token boolean">false</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>React components could pass data props or function props to its child components. If the callback functions have arguments, the expression includes parentheses that leads a function call, must put them into a function.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> props<span class="token punctuation">.</span><span class="token function">promoteCallback</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p> Not like this:</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// React will invoke the function when the component renders its content, not when the user clicks the button.</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span><span class="token function">promoteCallback</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">    </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Props could have type checking and default values. Be performed only during development. </p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">SimpleButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span>SimpleButton<span class="token punctuation">.</span>defaultProps <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">disabled</span><span class="token operator">:</span> <span class="token boolean">false</span><span class="token punctuation">&#125;</span>SimpleButton<span class="token punctuation">.</span>propTypes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">text</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    <span class="token comment">// ...</span>    <span class="token literal-property property">disabled</span><span class="token operator">:</span> PropTypes<span class="token punctuation">.</span><span class="token function">oneOfType</span><span class="token punctuation">(</span><span class="token punctuation">[</span>PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token comment">// class-based components also support these features</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Elements generated from arrays are required to have a <code>key</code> property, React is able to minimize the number of changes to display a change. Its value must be unique and stable.</p></li></ul><h2 id="State"><a href="#State" class="headerlink" title="State"></a>State</h2><ul><li><p>Stateless and stateful components</p><p>stateless</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token comment">// ...</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>stateful</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// Only one Clock instance for a same DOM node, but call the render method each time an update happens</span><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Clock</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">date</span><span class="token operator">:</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token comment">// ...</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Also could use the <code>useState</code> Hook to implement a stateful function-based component.</p></li><li><p>Only modify state data through the <code>setState</code> function. React will batch individual updates to the same state data together for efficiency and the process is asynchronous. Pass a function as the first argument if having a series of dependent changes.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">setState</span><span class="token punctuation">(</span>updater<span class="token punctuation">[</span><span class="token punctuation">,</span> callback<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>The <code>updater</code> could be an object or a function;</p></blockquote><blockquote><p>The <code>callback</code> is a function which will be executed once <code>setState</code> is completed and the component is re-rendered. Recommend using <code>componentDidUpdate()</code> instead of it;</p></blockquote> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// callback function</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>            <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">buttonClicked</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">></span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// the updater is a function for a same data property of the state</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> More details here:<br> <a href="https://reactjs.org/docs/react-component.html#setstate">https://reactjs.org/docs/react-component.html#setstate</a></p></li></ul><h2 id="Shallow-copy"><a href="#Shallow-copy" class="headerlink" title="Shallow copy"></a>Shallow copy</h2><p>Props, <code>setState</code> returned objects, <code>useState</code>‘s updater function returned objects all are shallow-copied objects. Like this:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> clonedObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token operator">===</span> clonedObj<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x <span class="token operator">===</span> clonedObj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => false true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The <code>x</code> object is same and <em>mutable</em>, the cloned object is different every time. If all properties of an object are primitive values, it is simple.</p><p>Class-based components could use <code>shouldComponentUpdate(nextProps, nextState)</code> to do deep checks to prevent further updates as a performance optimization. </p><p>Function-based components could use <code>React.memo</code> to check for prop changes, no state checks.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> WrappedFnComponent <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">memo</span><span class="token punctuation">(</span>FnComponent<span class="token punctuation">,</span> areEqual<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token comment">// usage</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedFnComponent</span></span> <span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>However React doesn’t recommend doing deep checks.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyLabel</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token comment">// ...</span><span class="token operator">&lt;</span>MyLabel msg <span class="token operator">=</span> <span class="token punctuation">&#123;</span> anObject <span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>props.msg</code> is read-only, but objects within it are <em>mutable</em>.</p><p>The following example would like to say don’t think the deferred operation, such as <code>useEffect</code>, already captured a <em>props</em> or <em>state</em> snapshot, especially when don’t know whether they contain mutable objects. The <em>props</em> and <em>state</em> objects aren’t <em>immutable</em> objects.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// App.js</span><span class="token keyword">import</span> React <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token punctuation">&#123;</span>useState<span class="token punctuation">,</span> useEffect<span class="token punctuation">,</span> useRef<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Count</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>number<span class="token punctuation">,</span> setNumber<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">let</span> timer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// const savedNumber = props.count.obj.num;  // make a snapshot</span>        <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>            timer<span class="token punctuation">.</span>current <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'timer'</span><span class="token punctuation">,</span> timer<span class="token punctuation">.</span>current<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// setNumber(savedNumber);</span>                        <span class="token comment">// In a closure, use the final value of the variable</span>            <span class="token function">setNumber</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>count<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Timer: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>timer<span class="token punctuation">.</span>current<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">, count: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>number<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">obj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">num</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>num<span class="token punctuation">,</span> <span class="token string">'=>'</span><span class="token punctuation">,</span> count<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>num <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        count<span class="token punctuation">.</span>obj<span class="token punctuation">.</span>num <span class="token operator">+=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">// make sure the object is different, let React render the component again</span>        <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">count</span> <span class="token operator">=></span> <span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>count<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Count</span></span> <span class="token attr-name">count</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MyButton</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Quickly click several times within 10 seconds, would see the <code>span</code> element shows the final number of clicks, then keep it. Except the first timer(no click), other timers see and set a same state value, so don’t re-render the <code>Count</code> component. Saving the variable that will be used when firing an effect fixed the problem.</p><p>More details here:<br><a href="https://reactjs.org/docs/react-component.html#shouldcomponentupdate">https://reactjs.org/docs/react-component.html#shouldcomponentupdate</a><br><a href="https://reactjs.org/docs/react-api.html#reactmemo">https://reactjs.org/docs/react-api.html#reactmemo</a></p><h2 id="Sharing-data"><a href="#Sharing-data" class="headerlink" title="Sharing data"></a>Sharing data</h2><p>Sharing data between react components:</p><ul><li>Lift the shared state up to the closest common ancestor, then distribute the state as <em>props</em>;</li><li><em>context</em> feature;</li><li>Data store, such as Redux;</li><li>URL routing, some state data encoded in the URL;</li></ul><h2 id="Events"><a href="#Events" class="headerlink" title="Events"></a>Events</h2><ul><li><p>Accessing component data in an event handing method.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>        <span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Clicked!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token comment">// ...</span>                        <span class="token comment">// don't work, "this" is undefined when calling the event handler</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleEvent <span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>                        <span class="token comment">// ...</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Three alternative ways to fix the problem:</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// To change handleEvent, the arrow function finds the "this" from its enclosing scope(automatic binding).</span><span class="token function-variable function">handleEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token string">"Clicked!"</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// To change onClick</span>onClick<span class="token operator">=</span><span class="token punctuation">&#123;</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleEvent</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// To bind handleEvent</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>handleEvent <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">handleEvent</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>React doesn’t support all DOM events and doesn’t allow components to create and publish custom events.</p></li><li><p>React always provides a <code>SyntheticEvent</code> object for an event handler, but it will reuse <code>SyntheticEvent</code> objects and reset all the properties to <code>null</code> once an event has been handled, can’t use its properties within asynchronous operations.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function-variable function">handleEvent</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">event</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    event<span class="token punctuation">.</span><span class="token function">persist</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// must add, otherwise event.type is null</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">counter</span><span class="token operator">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setState</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span> <span class="token literal-property property">message</span><span class="token operator">:</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>event<span class="token punctuation">.</span>type<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>counter<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Event handing excludes the custom HTML elements that are used to apply components.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// CustomButton is a React component that custom the &lt;button> element</span><span class="token comment">// Won't invoke the handleClick, no errors</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">CustomButton</span></span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>handleClick <span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>Event phase</p><ul><li>Capture phase: The event is being propagated through the target’s ancestor objects, This process starts with the <code>Window</code>, and through descendent elements until the target’s parent is reached. Would invoke the event handles that are added by <code>addEventListener()</code> with <code>useCapture</code> option. In React, use the <code>onClickCapture</code> property of an element to specify the event handler.</li><li>Bubble phase: The event is being propagated in reverse order of the capture phase, staring with the parent and eventually reaching the <code>Window</code>. Once the event is handled by the target element, it enters the bubble phase.</li></ul><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase">https://developer.mozilla.org/en-US/docs/Web/API/Event/eventPhase</a></p></li></ul><h2 id="Component-lifecycle"><a href="#Component-lifecycle" class="headerlink" title="Component lifecycle"></a>Component lifecycle</h2><p>Class-based components:</p><ul><li>Mount phase: <code>constructor()</code> -&gt; <code>getDerivedStateFromProps()</code> -&gt; <code>render()</code> -&gt; <code>componentDidMount()</code></li><li>Update phase: <code>getDerivedStateFromProps()</code> -&gt; <code>shouldComponentUpdate()</code> -&gt; <code>render()</code> -&gt; <code>getSnapshotBeforeUpdate()</code> -&gt; <code>componentDidUpdate()</code></li><li>Unmount phase: <code>componentWillUnmount()</code></li></ul><p><img src="/images/react-lifecycle.png" alt="React Lifecycles"></p><p>Initializing a component and changing the state or props will call the render method.</p><p>When a component’s <em>props</em> or <em>state</em> change, React compares the newly returned element with the previous rendered one. When they are not equal, React will update the DOM. This process is called <em>reconciliation</em>. The process uses React’s diffing algorithm to minimize changes to the DOM on every update.</p><p>The main use of the <code>componentDidUpdate</code> method is to directly manipulate the HTML elements in the DOM using the React refs feature, the refs feature provides access to the HTML elements rendered by a component after they have been added to the DOM, the method is called even if the <em>reconciliation</em> process determines that the content generated by the component has not changed.</p><p>A component’s state can be passed to its descendant components as props, its state is changed, its descendant components are rendered as well. If the update is unnecessary, let its descendant components’ <code>shouldComponentUpdate</code> method return false, React won’t call these components’ <code>render</code> and <code>componentDidUpdate</code> methods.</p><p>React will trigger the component’s update phase when an ancestor’s state has changed, the <code>getDerivedStateFromProps</code> method may be called even though none of the prop values on which the component depends has changed.</p><p>Use the <code>getSnapshotBeforeUpdate</code> method to capture information from the DOM before it is potentially changed. Could be used in conjunction with the refs feature, such as to remember and restore the scroll position.</p><p>Changing the top-level element within a component will cause React to replace its descendant components without the <em>reconciliation</em> process. Don’t do it whenever possible.</p><p>Don’t make HTTP requests in the <code>render</code> method that is called often, move the requests to the <code>componentDidMount</code> method, but if the component would be mounted and unmounted frequently, lifting the requests up to a stable component to avoid unnecessary data requests. Once the data arrives in the <code>componentDidMount</code> method, it changes the state, the update phase comes into play, the <code>render</code> method is called again.</p><p>More details here:<br><a href="https://reactjs.org/docs/react-component.html">https://reactjs.org/docs/react-component.html</a><br><a href="https://github.com/wojtekmaj/react-lifecycle-methods-diagram">https://github.com/wojtekmaj/react-lifecycle-methods-diagram</a></p><p>Function-based components:</p><ul><li>Function-based components can’t participate in the component lifecycle in the same way like class-based components. The <code>React.useEffect</code> Hook is used to register a function that will be invoked when the component is mounted, updated, and unmounted, it is a three-in-one function.</li></ul><h2 id="Composition-vs-Inheritance"><a href="#Composition-vs-Inheritance" class="headerlink" title="Composition vs Inheritance"></a>Composition vs Inheritance</h2><p>Composition instead of inheritance to reuse components.</p><ul><li><p>Use the special <code>children</code> prop</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">FancyBorder</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token comment">// ...</span>                <span class="token punctuation">&#123;</span> props<span class="token punctuation">.</span>children <span class="token punctuation">&#125;</span>                <span class="token comment">// ...</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>              <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FancyBorder</span></span><span class="token punctuation">></span></span><span class="token plain-text">                </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FancyBorder</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> The <code>WelcomeDialog</code> component reuses the <code>FancyBorder</code> component. The <code>props.children</code> will be replaced by the elements included by <code>FancyBorder</code> in the <code>WelcomeDialog</code> component.</p><p> There are <code>map</code>, <code>forEach</code>, <code>toArray</code>, etc. methods in <code>React.Children</code>, could use them to get advanced knowledge about these children, with <code>React.cloneElement</code> to modify them, such as adding new props.</p></li><li><p>Pass components as props</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token operator">&lt;</span>SplitPane left <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Contacts</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span> right <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Chat</span></span> <span class="token punctuation">/></span></span> <span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Contacts</code> and <code>Chat</code> are components, and are also objects, could pass them as props.</p></li><li><p>A <em>specific</em> component renders a <em>generic</em> one</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">WelcomeDialog</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Dialog</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Welcome<span class="token punctuation">'</span></span> <span class="token attr-name">message</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>Hi<span class="token punctuation">'</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The <code>WelcomeDialog</code> component configures a generic <code>Dialog</code> with props, making it specific.</p></li></ul><h2 id="Higher-order-components-HOCs"><a href="#Higher-order-components-HOCs" class="headerlink" title="Higher-order components (HOCs)"></a>Higher-order components (HOCs)</h2><p>A HOC is a function that takes a component and returns a new component. It composes the original component by wrapping it in a container component.</p><p>Some tasks, like logging, data retrieval, have same logical process flow. HOCs abstract this logic in the container component and share it across many components, the wrapped component receives data that generated by this logic as props to do its own jobs.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">withSubscription</span><span class="token punctuation">(</span><span class="token parameter">WrappedComponent<span class="token punctuation">,</span> selectData</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// takes a component</span>    <span class="token keyword">return</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> React<span class="token punctuation">.</span>Component <span class="token punctuation">&#123;</span>                 <span class="token comment">// return a component</span>        <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// ...</span>                        <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token literal-property property">data</span><span class="token operator">:</span> <span class="token function">selectData</span><span class="token punctuation">(</span>DataSource<span class="token punctuation">,</span> props<span class="token punctuation">)</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>                <span class="token comment">// ...</span>                <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">WrappedComponent</span></span> <span class="token attr-name">data</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">.</span>data<span class="token punctuation">&#125;</span></span> <span class="token spread"><span class="token punctuation">&#123;</span><span class="token operator">...</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Put HOCs outside the component definition so that it is created only once, otherwise a new version of the component is returned and unmount&#x2F;remount it each time.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> BlogPostWithSubscription <span class="token operator">=</span> <span class="token function">withSubscription</span><span class="token punctuation">(</span>    BlogPost<span class="token punctuation">,</span>    <span class="token punctuation">(</span><span class="token parameter">DataSource<span class="token punctuation">,</span> props</span><span class="token punctuation">)</span> <span class="token operator">=></span> DataSource<span class="token punctuation">.</span><span class="token function">getBlogPost</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>id<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">App</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The wrapped components or container components could be function-base components or class-based components, stateless components or stateful components. </p><p>The wrapped components could be wrapped many times.</p><h2 id="Render-props"><a href="#Render-props" class="headerlink" title="Render props"></a>Render props</h2><p>This is a technique for sharing code between React components using a prop whose value is a function.</p><p>Alternative model of wrapping one component in another. It could implement most HOCs using a regular component with a <code>render</code> prop. It is simpler than HOCs.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">class</span> <span class="token class-name">Mouse</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ...</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">0</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">// ...</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token comment">// ...</span>                         <span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>state<span class="token punctuation">)</span><span class="token punctuation">&#125;</span>                        <span class="token comment">// ...</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">MouseTracker</span> <span class="token keyword">extends</span> <span class="token class-name">React<span class="token punctuation">.</span>Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token comment">// ...</span>                        <span class="token comment">/* The place of the render prop needs a function,               * could use other names rather than "render", but             * make sure to change the name of the line 12             */</span>            <span class="token operator">&lt;</span>Mouse render <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token parameter">mouse</span> <span class="token operator">=></span> <span class="token punctuation">(</span> <span class="token operator">&lt;</span>Cat mouse <span class="token operator">=</span>  <span class="token punctuation">&#123;</span>mouse<span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span> <span class="token punctuation">)</span> <span class="token punctuation">&#125;</span> <span class="token operator">/</span><span class="token operator">></span>                        <span class="token comment">// ...</span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Context"><a href="#Context" class="headerlink" title="Context"></a>Context</h2><p>Context provides a way to pass data through the top-down component tree without having to pass props down manually at the intermediate components.</p><p>Only context consumers inside the context provider could consume the data. Context is also top-down hierarchy. </p><p>Context makes component reuse more difficult, use it if the same data needs to be accessible by many components in the tree, and at different nesting levels.</p><p>If only to avoid passing props, component composition is a simpler alternative solution: lifting the components that use these props up to the top component that have these props, then pass them as one or more props through the intermediate components, but this method also makes the high-level components to focus on the low-level components.</p><p>In function-based components, use the <code>React.useContext</code> Hook to get the context value.</p><p>More details here:<br><a href="https://reactjs.org/docs/context.html">https://reactjs.org/docs/context.html</a></p><h2 id="Error-boundaries"><a href="#Error-boundaries" class="headerlink" title="Error boundaries"></a>Error boundaries</h2><p>Error boundaries are React components that handle and recover JavaScript errors anywhere in their child component tree instead of crash the component tree.</p><p>Error boundaries apply only to errors that are thrown in: </p><ul><li>constructors</li><li>lifecycle methods</li><li>during rendering</li></ul><p>But don’t catch errors from: </p><ul><li>event handlers</li><li>asynchronous code(such as HTTP requests, setTimeout)</li><li>the error boundary itself</li></ul><p>Error handling: <code>getDerivedStateFromError()</code> -&gt; <code>componentDidCatch()</code> -&gt; <code>render()</code>.</p><p>The <code>getDerivedStateFromError</code> method receives the error and returns a value to update state, don’t make something that have side-effects, if have to do, use the <code>componentDidCatch</code> method instead. The rendered content is handled using the mounting phase of the component lifecycle, so could show error messages and include the original components with the special <code>children</code> prop, or do something to recover.</p><h2 id="Refs"><a href="#Refs" class="headerlink" title="Refs"></a>Refs</h2><p>The Refs feature provides access to the HTML elements rendered by a component after they have been added to the DOM, such as invoking the <code>focus</code> method on the <code>input</code> element. This is another way except props that parent components interact with their children.</p><p>Refs are not assigned until React invokes the <code>render</code> method. Ref updates happen before <code>componentDidMount</code> or <code>componentDidUpdate</code>, the two lifecycle methods can access the elements with a ref. If the component is re-created, the <code>componentWillUnmount</code> can be used to access the refs.</p><p>When to use</p><ul><li>Use features of a specific HTML element, such as focus, selection;</li><li>Triggering imperative animations;</li><li>Integrating with third-party DOM libraries;</li></ul><p>Use refs only as the last resort, a component that makes excessive use of refs is difficult to manage.</p><p>What it is</p><ul><li><p>A reference to a DOM node</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">class</span> <span class="token class-name">Profile</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>props<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment">// ...</span>                <span class="token keyword">this</span><span class="token punctuation">.</span>nameRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function-variable function">focusTextInput</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text">                        &lt;input type="text" ref = </span><span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>nameRef <span class="token punctuation">&#125;</span><span class="token plain-text"> />                        </span><span class="token punctuation">&#123;</span><span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span>        <span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>this.nameRef.current</code> is the <code>&lt;input&gt;</code> element.</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">FunctionBasedProfile</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> nameRef <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">useRef</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">click</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        nameRef<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focus</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token comment">// ...</span>                <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>nameRef<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span>                <span class="token comment">// ...</span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>nameRef.current</code> is the <code>&lt;input&gt;</code> element.</p></li><li><p>The mounted instance of a class-based component</p> <pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// ...</span><span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>textInput <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ...</span><span class="token punctuation">&#125;</span><span class="token function">componentDidMount</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// call the Profile component's focusTextInput method</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">.</span>current<span class="token punctuation">.</span><span class="token function">focusTextInput</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>        <span class="token comment">// ...</span><span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Profile</span></span> <span class="token attr-name">ref</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>textInput<span class="token punctuation">&#125;</span></span> <span class="token punctuation">/></span></span><span class="token punctuation">&#125;</span>    <span class="token comment">// ...</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>this.textInput.current</code> is an instance of the <code>Profile</code> component rather than a DOM node.</p></li><li><p>Function-based components don’t have instances, can’t use refs on them directly. Could use <code>forwardRef</code> (possibly in conjunction with <code>useImperativeHandle</code>) to take a ref.</p></li></ul><p>Exposing DOM Refs to Parent Components</p><ul><li><p>Receive the ref through the <code>ref</code> attribute, like the above two examples, can’t work with function-based components if no <code>forwardRef</code>;</p></li><li><p>Receive the ref as a normal prop whose name isn’t <code>ref</code> from parent components, then pass the ref to children;</p></li><li><p>Use <code>React.forwardRef</code>;</p><p> More details here:<br> <a href="https://reactjs.org/docs/refs-and-the-dom.html">https://reactjs.org/docs/refs-and-the-dom.html</a><br> <a href="https://reactjs.org/docs/hooks-reference.html#useimperativehandle">https://reactjs.org/docs/hooks-reference.html#useimperativehandle</a></p></li></ul><p>Callback Refs</p><p>Could pass a function to the <code>ref</code> attribute. The function receives a React component or an HTML element as its argument which is guaranteed to be up-to-date before <code>componentDidMount</code> or <code>componentDidUpdate</code> fires. React will call the callback function when the component mounts and unmounts. If the callback function is inline, it would be call twice during updates: one is to clear the old ref, one is to set up the new ref, could define the callback function as a class method and bind the method to the class, this shouldn’t matter in most cases.</p><h2 id="Portals"><a href="#Portals" class="headerlink" title="Portals"></a>Portals</h2><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>child<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>child</code> is any component returned by the <code>render</code> method of class-based components or the function-based components;</p><p><code>container</code> is a DOM element;</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// class-based</span><span class="token keyword">class</span> <span class="token class-name">ClsPortal</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// ...</span>                <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Parent</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ClsPortal</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnyChildComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ClsPortal</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token comment">// function-based</span><span class="token keyword">function</span> <span class="token function">FnPortal</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token keyword">return</span> ReactDOM<span class="token punctuation">.</span><span class="token function">createPortal</span><span class="token punctuation">(</span>props<span class="token punctuation">.</span>children<span class="token punctuation">,</span> container<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">Parent</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">FnPortal</span></span><span class="token punctuation">></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">AnyChildComponent</span></span> <span class="token punctuation">/></span></span><span class="token plain-text"> </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">FnPortal</span></span><span class="token punctuation">></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>They render <code>AnyChildComponent</code> to the <code>container</code> DOM node instead of the <code>Parent</code> component.</p><p>A portal allows a component to render its content into a specific DOM node that exists outside the DOM hierarchy of the parent component.</p><p>If placing a portal in a component (<code>Parent</code>), the portal behaves like a normal child component, features like context, event bubbling work normally and don’t care it is a portal, the component (<code>Parent</code>) would catch uncaught event from the portal, not the portal attached DOM node (<code>container</code>).</p><p>Can’t use a portal with an element using a ref. Portals are used during the render process, Refs are assigned after the process.</p><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><p>Hooks are a new <strong>addition</strong> in React 16.8, it doesn’t break anything. We could use state and other React features without writing a class.</p><p>It is hard to reuse stateful logic between components, <em>render props</em> and <em>higher-order components(HOC)</em> try to solve the problem, but the two patterns require to restructure the components, Hooks allow to reuse stateful logic without changing the component hierarchy.</p><p>Hooks are <strong>functions</strong> that let you “hook into” React state and lifecycle features from function-based components.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">Clock</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>date<span class="token punctuation">,</span> setDate<span class="token punctuation">]</span><span class="token operator">=</span><span class="token function">useState</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> document<span class="token punctuation">.</span>title <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Current time: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>date<span class="token punctuation">.</span><span class="token function">toDateString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// ...</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>useState</code> and <code>useEffect</code> are Hooks. Use <code>useState</code> to get and set state. <code>useEffect</code> will be invoked after every render(mount phase, update phase).</p><h3 id="useState"><a href="#useState" class="headerlink" title="useState"></a>useState</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token constant">XXX</span><span class="token punctuation">,</span> setXXX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span>initialXXX<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token constant">XXX</span><span class="token punctuation">,</span> setXXX<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* expensive computation */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// Lazy initialization</span><span class="token comment">// Example:</span><span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// XXX is a state, setXXX is the function to update it;</span><span class="token comment">// setXXX syntax:</span><span class="token function">setXXX</span><span class="token punctuation">(</span> expression <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">setXXX</span><span class="token punctuation">(</span><span class="token parameter">prevState</span> <span class="token operator">=></span> nextState<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>The function returned by <code>useState</code> doesn’t automatically merge updated objects, it simply accepts its argument as the new state and overwrite the old one. <code>useReducer</code> is more suited for managing multiple sub-values state objects;</li><li>If the new state is computed using the previous state, pass a function instead of an expression to the function returned by <code>useState</code> when updating state;</li><li>If the initial value of a state is an expensive computation, pass a function instead of a normal expression to <code>useState</code>;</li><li>If <code>setXXX</code> returns a same value as the current state, React doesn’t render the children and fire the effects, but it doesn’t mean that React doesn’t render any component before making the decision. Use <code>useMemo</code> to optimize expensive calculations when rendering;</li></ul><h3 id="useEffect"><a href="#useEffect" class="headerlink" title="useEffect"></a>useEffect</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token comment">// ...</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>                <span class="token comment">// ...</span>            <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>condition1<span class="token punctuation">,</span> condition2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">/* * The returned cleanup function and the condition array are optional; * The condition array is not passed as arguments to the effect function; */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Do works that have side effects during rendering, such as timer, logging. React might pause, abort, restart the render;</li><li>It runs both after the first render and after every update;</li><li>Unlike <code>componentDidMount</code> or <code>componentDidUpdate</code>, effects scheduled with <code>useEffect</code> don’t block the browser from updating the screen, they are deferred. For effects that maintain DOM to show immediately, use <code>useLayoutEffect</code> instead;</li><li>If the effect returns a function, the function is a cleanup function that does things like <code>componentWillUnmount</code>(unmount phase), the function is invoked <strong>before running the next effect</strong> and <strong>during unmounting</strong>;</li><li><code>useEffect</code> has an optional second argument, pass an array to it as a condition to determine whether to run the effect and its cleanup function. If the array is an empty array, the effect only runs once and its cleanup function is only invoked during unmounting;</li><li>Could call <code>useEffect</code> multiple times in a function-based component, and they are independent, so invoke the cleanup function before running the next effect to avoid bugs;</li><li>Every referenced value inside the effect function should appear in the condition array, including props and the state;</li><li>Should declare functions needed by the effect function inside of it, it is easy to see what values are depended on. Functions that don’t use any value from the component scope could be moved out. Also could use <code>useCallback</code> to wrap functions, then the wrapper appears in the condition array, the effect depend on it;</li></ul><h3 id="useLayoutEffect"><a href="#useLayoutEffect" class="headerlink" title="useLayoutEffect"></a>useLayoutEffect</h3><ul><li>The signature is identical to <code>useEffect</code>;</li><li><code>useLayoutEffect</code> fires after a component is mounted and before the browser updates the screen. It is in the same phase as <code>componentDidMount</code> and <code>componentDidUpdate</code>;</li></ul><h3 id="useContext"><a href="#useContext" class="headerlink" title="useContext"></a>useContext</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> value <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>MyContext<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>useContext<span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token punctuation">;</span><span class="token keyword">import</span> <span class="token string">'./App.css'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">Text</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> curTheme <span class="token operator">=</span> <span class="token function">useContext</span><span class="token punctuation">(</span>ThemeContext<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">left</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">bottom</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">right</span><span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token literal-property property">position</span><span class="token operator">:</span> <span class="token string">'fixed'</span><span class="token punctuation">,</span>        <span class="token literal-property property">zIndex</span><span class="token operator">:</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">background</span><span class="token operator">:</span> curTheme<span class="token punctuation">.</span>background<span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span></span><span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> themes <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">light</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#eeeeee"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">dark</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">background</span><span class="token operator">:</span> <span class="token string">"#222222"</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> ThemeContext <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createContext</span><span class="token punctuation">(</span>themes<span class="token punctuation">.</span>light<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">ThemeContext.Provider</span></span> <span class="token attr-name">value</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>themes<span class="token punctuation">.</span>dark<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">            </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">Text</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">ThemeContext.Provider</span></span><span class="token punctuation">></span></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">export</span> <span class="token keyword">default</span> App<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>A changed context value trigger a rerender of the <code>Text</code> component. <code>React.memo</code> or <code>shouldComponentUpdate</code> checks props and&#x2F;or state to prevent an unnecessary rerender, they can’t prevent context.</p><p>Putting a callback function into the context to let child components to call it and update the context values.</p><h3 id="useReducer"><a href="#useReducer" class="headerlink" title="useReducer"></a>useReducer</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> <span class="token punctuation">[</span>state<span class="token punctuation">,</span> dispatch<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useReducer</span><span class="token punctuation">(</span>reducer<span class="token punctuation">,</span> initialArg<span class="token punctuation">,</span> init<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function-variable function">reducer</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">state<span class="token punctuation">,</span> action</span><span class="token punctuation">)</span> <span class="token operator">=></span> nextState<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><blockquote><p>Calling <code>dispatch(action)</code> will call the reducer;</p></blockquote><blockquote><p><code>initialArg</code> is the initial state;</p></blockquote><blockquote><p><code>init(initialArg)</code> will be used to create the initial state lazily (the state is the result of an expensive computation, and will be executed only on the initial render) or to reset the state later;</p></blockquote><ul><li>An alternative to <code>useState</code>;</li><li>Use it when having complex state logic that involves multiple sub-values;</li><li>Use it when the next state depends on the previous one;</li><li>Use it when components trigger deep updates. Could pass the <code>dispatch</code> function down as <strong>context</strong> or <strong>props</strong>. The function is stable and won’t change on re-renders, reading it doesn’t cause a re-render, unlike state;</li><li>If the <code>dispatch</code> function returns a same value as the current state, React doesn’t render the children and fire the effects, but it doesn’t mean that React doesn’t render any component before making the decision. Use <code>useMemo</code> to optimize expensive calculations when rendering;</li></ul><h3 id="useMemo"><a href="#useMemo" class="headerlink" title="useMemo"></a>useMemo</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedValue <span class="token operator">=</span> <span class="token function">useMemo</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">computeExpensiveValue</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// The condition array is not passed as arguments to the function;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li>Returns a <strong>memoized value</strong>, it can be reused on the next render;</li><li>Use it to <strong>optimize performance</strong> when have expensive computations <strong>during rendering</strong>, the code should also work without it;</li><li>If <strong>no condition array</strong> is provided, a new value will be computed on every render. If you pass an <strong>empty array</strong>, the values in the list never change, so <code>useMemo</code> could always return the stored value;</li><li>Every value referenced inside the <code>computeExpensiveValue</code> function should appear in the condition array, like <code>useEffect</code>;</li></ul><h3 id="useCallback"><a href="#useCallback" class="headerlink" title="useCallback"></a>useCallback</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> memoizedCallback <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>arguments<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>useCallback(fn, deps)</code> is equivalent to <code>useMemo(() =&gt; fn, deps)</code>;</p></blockquote><blockquote><p>The condition array is not passed as arguments to the callback function;</p></blockquote><blockquote><p>The callback might have arguments;</p></blockquote><ul><li>Returns a <strong>memoized version</strong> of the callback if one of the conditions has changed;</li><li>Every value referenced inside the callback function should appear in the condition array, like <code>useEffect</code>;</li><li>It could be passed as a prop to child components, re-render the child components only when its dependencies and itself are changed. Leave the logic and data in the parent component;</li></ul><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// create a new handleClick function every time when entering the MyButton function</span>    <span class="token keyword">const</span> <span class="token function-variable function">handleClick</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count: </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token comment">// use useCallback</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// Only create the handleClick function once</span>    <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token function">setCount</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count: </span><span class="token punctuation">&#123;</span>count<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token comment">// Sometimes don't use useCallback in this way</span><span class="token keyword">function</span> <span class="token function">MyButton</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count2<span class="token punctuation">,</span> setCount2<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count3<span class="token punctuation">,</span> setCount3<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">const</span> handleClick <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span>         <span class="token punctuation">&#123;</span><span class="token function">setCount2</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token function">setCount3</span><span class="token punctuation">(</span><span class="token parameter">c</span> <span class="token operator">=></span> c <span class="token operator">+</span> count2<span class="token punctuation">&#125;</span>        <span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count2: </span><span class="token punctuation">&#123;</span>count2<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">count3: </span><span class="token punctuation">&#123;</span>count3<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span> <span class="token attr-name">onClick</span><span class="token script language-javascript"><span class="token script-punctuation punctuation">=</span><span class="token punctuation">&#123;</span>handleClick<span class="token punctuation">&#125;</span></span><span class="token punctuation">></span></span><span class="token plain-text">Click</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span></span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token comment">/* * the value of count2 in the setCount3 function is always 1,  * useCallback returns a memoized callback. If change  * count2 to this style: * const [count2, setCount2] = useState(&#123;obj: &#123;num: 1&#125;&#125;),  * it works, React does shallow copy for count2 every time, but * the &#123;num: 1&#125; object is always same, the callback function  * can read the increased value of num. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <strong>difference</strong> between <code>useCallback</code> and <code>useMemo</code>: <code>useCallback</code> returns a <strong>memoized function</strong>, <code>useMemo</code> returns a <strong>memoized value</strong>.</p><h3 id="useRef"><a href="#useRef" class="headerlink" title="useRef"></a>useRef</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">const</span> refContainer <span class="token operator">=</span> <span class="token function">useRef</span><span class="token punctuation">(</span>initialValue<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p><code>refContainer</code> is mutable;</p></blockquote><blockquote><p><code>refContainer</code> has a <code>.current</code> property whose value is initialized to <code>initialValue</code>;</p></blockquote><blockquote><p><code>refContainer</code> will persist for the full lifetime of the component;</p></blockquote><ul><li>Could pass any normal value to the <code>.current</code> property, as well as a DOM node on the <code>ref</code> attribute of a component;</li><li>The ref object is stable and won’t change on re-renders;</li><li><code>useRef</code> doesn’t notify when the <code>.current</code> property changes and doesn’t cause a re-render;</li></ul><p>Callback Refs:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">CallbackRef</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> cbRef <span class="token operator">=</span> <span class="token function">useCallback</span><span class="token punctuation">(</span><span class="token parameter">node</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token operator">&lt;</span>h1 ref <span class="token operator">=</span> <span class="token punctuation">&#123;</span> cbRef <span class="token punctuation">&#125;</span><span class="token operator">/</span><span class="token operator">></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>The callback ref will be called only when the component mounts(attach a DOM node) and unmounts(detach a DOM node).</p><h3 id="useImperativeHandle"><a href="#useImperativeHandle" class="headerlink" title="useImperativeHandle"></a>useImperativeHandle</h3><ul><li><code>useImperativeHandle</code> customizes the element instance that is exposed to parent components, such as replacing the native focus function with your own, changing the returned ref of a table to a table cell;</li><li><code>useImperativeHandle</code> should be used with <code>forwardRef</code>. <code>forwardRef</code> lets a component pass the received ref further down to a child;</li></ul><h3 id="useDebugValue"><a href="#useDebugValue" class="headerlink" title="useDebugValue"></a>useDebugValue</h3><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token function">useDebugValue</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">useDebugValue</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span> <span class="token parameter">value</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span> <span class="token comment">/* ... */</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><ul><li><code>useDebugValue</code> displays a label for custom hooks in React DevTools;</li></ul><h3 id="Hook-rules"><a href="#Hook-rules" class="headerlink" title="Hook rules"></a>Hook rules</h3><ul><li>Only call Hooks at the top level of function-based components, not inside loops, conditions, or nested functions. React relies on the order of Hooks to restore the state during re-render;</li><li>Only call Hooks from function-based components or custom Hooks;</li></ul><h3 id="Custom-Hooks"><a href="#Custom-Hooks" class="headerlink" title="Custom Hooks"></a>Custom Hooks</h3><ul><li>The Hook name <strong>should</strong> always start with <strong>use</strong>;</li></ul><p>There are no Hook equivalents to <code>getSnapshotBeforeUpdate</code>, <code>getDerivedStateFromError</code> and <code>componentDidCatch</code> lifecycles yet.</p><h2 id="Strict-mode"><a href="#Strict-mode" class="headerlink" title="Strict mode"></a>Strict mode</h2><p>Strict mode checks potential problems. It doesn’t render any visible UI and runs in development mode only.</p><p>An important functionality is to detect unexpected side effects. The frequently used methods, constructor, <code>render</code> and <code>setState</code>, might be called more than once. These methods should not contain side-effects, it means giving same arguments to these functions should get the same results.</p><p>For finding side-effects early, React invokes constructor, <code>render</code>, <code>setState</code>, functions passed to <code>useState</code>, <code>useMemo</code> and <code>useReducer</code>, function-based component body and other methods or functions(<a href="https://reactjs.org/docs/strict-mode.html#detecting-unexpected-side-effects">here</a>) twice.</p><p><code>create-react-app</code> created projects have the following code in <code>index.js</code>:</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx">ReactDOM<span class="token punctuation">.</span><span class="token function">render</span><span class="token punctuation">(</span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token plain-text">        </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">App</span></span> <span class="token punctuation">/></span></span><span class="token plain-text">    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span><span class="token class-name">React.StrictMode</span></span><span class="token punctuation">></span></span><span class="token punctuation">,</span>    document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'root'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It opens the strict mode by default.</p><pre class="line-numbers language-jsx" data-language="jsx"><code class="language-jsx"><span class="token keyword">function</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token parameter">props</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token punctuation">[</span>count<span class="token punctuation">,</span> setCount<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">useState</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">call useCount: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">useEffect</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">set count from </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token string"> to </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>count <span class="token operator">+</span> <span class="token number">1</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>props<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">MySpan</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token function">useCount</span><span class="token punctuation">(</span><span class="token string">'nothing'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">call MySpan: </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>val<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#123;</span>val<span class="token punctuation">&#125;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">App</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token class-name">MySpan</span></span><span class="token punctuation">/></span></span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The code in <code>App.js</code> will print the following log:</p><pre class="line-numbers language-none"><code class="language-none">call useCount: 0call MySpan: 0call useCount: 0call MySpan: 0set count from 0 to 1call useCount: 1call MySpan: 1call useCount: 1call MySpan: 1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> React </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Know JavaScript</title>
      <link href="/2020/01/20/know-javascript/"/>
      <url>/2020/01/20/know-javascript/</url>
      
        <content type="html"><![CDATA[<p>This is a JavaScript guide for developers who already knew other programming languages and want to know JavaScript systematically and quickly.</p><span id="more"></span><h2 id="What-it-is"><a href="#What-it-is" class="headerlink" title="What it is"></a>What it is</h2><ul><li>Untyped, prototype-based, single-threaded scripting language;</li><li>Native Unicode (UTF-16);</li><li>Case-sensitive;</li><li>First-class functions (support functional programming styles);</li><li>A minimal API for working with text, arrays, dates, and regular expressions. But no Input&#x2F;Output, networking, storage, and graphics, these are supported by web browsers;</li></ul><h2 id="Identifiers"><a href="#Identifiers" class="headerlink" title="Identifiers"></a>Identifiers</h2><p>Begin with letter, <code>_</code>, <code>$</code>, then followed by letters, digits, <code>_</code>, <code>$</code>.</p><h2 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h2><ul><li><code>//</code>, for single line;</li><li><code>/* ... */</code>, for single line or multiple lines;</li></ul><h2 id="Statements"><a href="#Statements" class="headerlink" title="Statements"></a>Statements</h2><p>The semicolon (<code>;</code>) is used to separate statements. It is optional, but no surprising cases when using it.</p><h2 id="Data-types"><a href="#Data-types" class="headerlink" title="Data types"></a>Data types</h2><ul><li><p>Primitive types</p><ul><li>number</li><li>string</li><li>boolean</li><li>null</li><li>undefined</li><li>Symbol</li><li>BigInt</li></ul><p>They are immutable and compared by <em>value</em>.</p></li><li><p>Object types</p><p>Arrays and functions are special objects.</p><p>They are mutable and compared by <em>reference</em>.</p></li></ul><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><p>Array indexes and the bitwise operators’ operands are 32-bit integers, all other numbers are represented as 64-bit binary floating-point values(IEEE-754).</p><p>These floating-point values can exactly represent <code>1/2</code>, <code>1/8</code>, …, <code>1/2^n</code>, but can’t exactly represent <code>1/10</code>, <code>1/100</code>, they are decimal fractions.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">x <span class="token operator">=</span> <span class="token number">.3</span> <span class="token operator">-</span><span class="token number">.2</span>  <span class="token comment">// => 0.09999999999999998</span>y <span class="token operator">=</span> <span class="token number">.2</span> <span class="token operator">-</span><span class="token number">.1</span>  <span class="token comment">// => 0.1</span>x <span class="token operator">==</span> y      <span class="token comment">// => false</span><span class="token number">100</span>         <span class="token comment">// base-10 integer</span><span class="token number">0xff</span><span class="token operator">/</span><span class="token number">0Xff</span>   <span class="token comment">// hexadecimal integer</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Arithmetic operators: </p><ul><li><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>**</code>, <code>++</code>, <code>--</code>;</li><li>Math object: <code>Math.log(100)</code>;</li></ul><p>Doesn’t raise overflow, underflow, division by zero errors, but the arithmetic results are special values: </p><ul><li>Overflow: Infinity &#x2F; -Infinity;</li><li>Underflow: 0 &#x2F; -0;</li><li>Division by zero: Infinity &#x2F; -Infinity, but 0 &#x2F; 0 is NaN(not a number);</li></ul><p><code>Infinity</code>, <code>NaN</code> are global variables. <code>Infinity</code> represents infinity. <code>NaN</code> represents not-a-number.</p><p>To check <code>x</code> is <code>NaN</code>: <code>x != x</code>, it is true if only if <code>x</code> is <code>NaN</code>, don’t use <code>x == NaN</code>.</p><h3 id="string"><a href="#string" class="headerlink" title="string"></a>string</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"abcde"</span><span class="token string">'abcde'</span><span class="token string">"ab'cd'e"</span><span class="token string">'ab"cd"e'</span><span class="token string">'can\'t'</span><span class="token string">'one \very \long \line'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Enclose a string with single or double quotes (<code>&#39;</code> or <code>&quot;</code>). When combining JavaScript and HTML, one style of quotes for JavaScript, the other for HTML.</p><p>A string likes a read-only array, could use indexes to access.</p><h4 id="Template-strings"><a href="#Template-strings" class="headerlink" title="Template strings"></a>Template strings</h4><p>A template string is enclosed by the back-tick (``). The dollar sign and curly braces (<code>$&#123;expression&#125;</code>) indicate a placeholder.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name <span class="token operator">=</span> <span class="token string">'JavaScript'</span><span class="token punctuation">;</span><span class="token keyword">const</span> msg <span class="token operator">=</span> <span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hi, </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>name<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span>  <span class="token comment">// a template string</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">;</span>           <span class="token comment">// => Hi, JavaScript</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Tagged templates</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">tag</span><span class="token punctuation">(</span><span class="token parameter">strings<span class="token punctuation">,</span> place</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// => 2 Hey, where are you?\n &lt;empty string></span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length<span class="token punctuation">,</span> strings<span class="token punctuation">.</span>raw<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strings<span class="token punctuation">.</span>raw<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* =>     * 2 Hey, where are you?     * &lt;empty string>     */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>strings<span class="token punctuation">.</span>length<span class="token punctuation">,</span> strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> strings<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">/* =>     * Hey, where are you?     * moon     */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">`</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>strings<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>place<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">const</span> place <span class="token operator">=</span> <span class="token string">'moon'</span><span class="token punctuation">;</span>tag<span class="token template-string"><span class="token template-punctuation string">`</span><span class="token string">Hey, where are you?\n</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">$&#123;</span>place<span class="token interpolation-punctuation punctuation">&#125;</span></span><span class="token template-punctuation string">`</span></span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals</a></p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><p>Any values can be converted to a boolean value: <code>undefined</code>, <code>null</code>, <code>0</code>, <code>-0</code>, <code>NaN</code>, <code>&quot;&quot;</code> are converted to <code>false</code>, others are <code>true</code>.</p><h3 id="null"><a href="#null" class="headerlink" title="null"></a>null</h3><p><code>null</code> is an object, indicates “no value”.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>  <span class="token comment">// => "object"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="undefined"><a href="#undefined" class="headerlink" title="undefined"></a>undefined</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// => "undefined"</span><span class="token keyword">null</span> <span class="token operator">==</span> <span class="token keyword">undefined</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Get an <code>undefined</code> value when accessing an uninitialized variable, a non-existed object property or array element, a function argument that you don’t supply a value, the return value of a function that returns nothing.</p><p><code>undefined</code> is an error-like absence of value. If you want a variable that hasn’t any value, assign <code>null</code> to it.</p><h3 id="Wrapper-objects"><a href="#Wrapper-objects" class="headerlink" title="Wrapper objects"></a>Wrapper objects</h3><p>Numbers, strings, booleans are not objects, but they have properties and methods, because of JavaScript converts them to an object when to refer a property value or invoke a method. JavaScript will discard the wrapper object soon.</p><p><code>String()</code>, <code>Number()</code>, <code>Boolean()</code> return wrapper objects.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>x <span class="token operator">==</span> <span class="token number">123</span>   <span class="token comment">// => true, only compare the value</span>x <span class="token operator">===</span> <span class="token number">123</span>  <span class="token comment">// => false, compare the value and the type</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><h3 id="Variable-declaration"><a href="#Variable-declaration" class="headerlink" title="Variable declaration"></a>Variable declaration</h3><ul><li><code>var</code></li></ul><p><code>var</code> declares a local or global variable, optionally initializing it to a value.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> i<span class="token punctuation">;</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> j<span class="token punctuation">,</span> k<span class="token punctuation">;</span><span class="token keyword">var</span> m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span> p <span class="token operator">=</span> <span class="token string">'1'</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> <span class="token number">100</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// automatically create a global variable y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Actually there is a global object, we can refer to it outside functions using <code>this</code> keyword. We define a property of the global object when declaring a global variable with <code>var</code> (outside functions).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> globalVar <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">this</span><span class="token punctuation">.</span>globalVar<span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span class="token comment">// JavaScript's built-in global variables</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token number">NaN</span><span class="token punctuation">;</span>        <span class="token comment">// => NaN</span><span class="token keyword">this</span><span class="token punctuation">.</span>undefined<span class="token punctuation">;</span>  <span class="token comment">// => undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><code>let</code></li></ul><p><code>let</code> declares a block-scoped variable, optionally initializing it to a value. Likes <code>var</code>, the most important difference is the scope.</p><ul><li><code>const</code></li></ul><p><code>const</code> declares a block-scoped constant. The constant value can’t be changed via reassignment.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> name1 <span class="token operator">=</span> value1 <span class="token punctuation">[</span><span class="token punctuation">,</span> name2 <span class="token operator">=</span> value2 <span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> nameN <span class="token operator">=</span> valueN<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>nameN</code> can be any legal identifier.</p><p><code>valueN</code> can be any legal expression, including a function expression.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> outsideConstant <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// outside functions or blocks</span><span class="token comment">// not a property of the global object, unlike the global variables declared by var.</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>outsideConstant<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => undefined</span><span class="token punctuation">&#123;</span>    <span class="token comment">/* => ReferenceError: can't access lexical declaration `i' before initialization     * Unlike var, the variables declared by var don't raise a ReferenceError, they are undefined.     */</span>    <span class="token comment">// console.log(i);</span>        <span class="token comment">/* => SyntaxError: missing = in const declaration     * Constants must be initialized.     */</span>    <span class="token comment">// const i;</span>        <span class="token keyword">const</span> i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">/* => SyntaxError: redeclaration of const i     * Can't be redeclared, unlike the variables declared by var.     */</span>    <span class="token comment">// const i = '1';</span>        <span class="token comment">/* => TypeError: invalid assignment to const `i'     * Constants can't be reassigned to a new value.     */</span>    <span class="token comment">// i = 2;</span>        <span class="token comment">// obj has a read-only reference to &#123;x: 1, y: 2&#125;.</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">// but can change its properties.</span>    obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Object &#123; x: 2, y: 2 &#125;</span>        <span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Array [ 1, 2 ]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>How to choose:</p><p><code>let</code>&#x2F;<code>const</code> vs <code>var</code>:</p><ul><li>Can’t be redeclared;</li><li>Declared variables outside functions or blocks aren’t a property of the global object;</li><li>Can’t be used before declaring it;</li></ul><p><code>const</code> vs <code>let</code>:</p><ul><li>Must be initialized;</li><li>Can’t be reassigned;</li></ul><p>If the value of a variable won’t be changed, use <code>const</code>, otherwise use <code>let</code> whenever possible.</p><h3 id="Untyped-variables"><a href="#Untyped-variables" class="headerlink" title="Untyped variables"></a>Untyped variables</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token string">'a string'</span><span class="token punctuation">;</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// now becomes a number</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="Variable-scope"><a href="#Variable-scope" class="headerlink" title="Variable scope"></a>Variable scope</h3><p>Available scopes:</p><ul><li>block</li><li>local</li><li>global</li></ul><p>The following sample code uses <code>var</code> to declare variables, it is more complicated.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// define global variables</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token string">'global variable: x'</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'global variable: y'</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">testScope</span><span class="token punctuation">(</span> k <span class="token comment">/* a local variable */</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// x is the above x, is global, not local</span>    x <span class="token operator">=</span> <span class="token string">'changed the global variable: x'</span><span class="token punctuation">;</span>        <span class="token comment">// automatically create a global variable z</span>    z <span class="token operator">=</span> <span class="token string">'new global variable: z'</span><span class="token punctuation">;</span>            <span class="token comment">// define a local variable</span>    <span class="token keyword">var</span> localVar <span class="token operator">=</span> <span class="token string">'local variable: localVar'</span><span class="token punctuation">;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'y:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => y: undefined</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">// define a local variable and hide the global one that has the same name</span>        <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token string">'local variable: y'</span><span class="token punctuation">;</span>        <span class="token comment">// OR</span>        <span class="token comment">// var y;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">testScope</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => changed the global variable: x</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global variable: y</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Function parameters are local variables, like <code>k</code>.</p><p>Local variables that are within function body must always use the <code>var</code>&#x2F;<code>let</code>&#x2F;<code>const</code> statement to declare, don’t ignore them, otherwise the variable is global, like <code>z</code>.</p><p><code>x</code>, <code>y</code>(outside <code>testScope</code>), <code>z</code> are global variables.</p><p>Could declare local variables anywhere within a function, all of them have a same scope, like <code>localVar</code>, <code>y</code>(declared in <code>testScope</code>).</p><p>All variables declared within a function are visible everywhere in the function, even places before they are declared. like <code>y</code>:</p><ul><li>Line 15, at first glance, should be <code>y: global variable: y</code>. But the local <code>y</code> already hides the global one, even use it before declaring it(line 15, line 19). The local one hides the global one throughout the function;</li><li>The code won’t go to line 19, but the declaration of <code>y</code> is still available;</li></ul><p>Declaring all variables at the top of the function is obvious to reflect their scope.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>x</code> in the code block doesn’t hide the global one. Could redeclare variables declared by <code>var</code>.</p><h2 id="Objects"><a href="#Objects" class="headerlink" title="Objects"></a>Objects</h2><h3 id="Create-new-objects"><a href="#Create-new-objects" class="headerlink" title="Create new objects"></a>Create new objects</h3><ul><li>Using object initializers</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// empty object, no properties</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// add properties later</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">name</span><span class="token operator">:</span> <span class="token string">'obj'</span><span class="token punctuation">,</span>        <span class="token literal-property property">nestedObj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">foo</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function">bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar is an ES6 shorthand method'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// z's getter function</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// z's setter function</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token operator">=</span> val<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>obj.z</code> calls <code>z</code>‘s getter function. <code>obj.z = 1</code> calls <code>z</code>‘s setter function. More details in the following <em>Getters&#x2F;Setters</em> section.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> y <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token string">"zz"</span><span class="token punctuation">;</span><span class="token comment">/* x, y are ES6 shorthand property names. * zz is an ES6 computed property name. The value in brackets [] is a property name. */</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span>z<span class="token punctuation">]</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Object &#123; x: 1, y: "a", zz: 2 &#125;</span><span class="token comment">// use the spread operator(...) to copy properties</span><span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span>obj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Object &#123; x: 1, y: "a", zz: 2 &#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More details about the spread operator in <em>Operators</em> -&gt; <em>Spread operator</em> section.</p><ul><li>Using a constructor function</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// empty object, call the built-in constructor. Same as &#123;&#125;</span><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token keyword">const</span> anotherObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> dateObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 1. write a constructor function</span><span class="token keyword">function</span> <span class="token function">Car</span><span class="token punctuation">(</span><span class="token parameter">model</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>model <span class="token operator">=</span> model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// 2. call the new operator to create an instance</span><span class="token keyword">const</span> myCar <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Car</span><span class="token punctuation">(</span><span class="token string">'Tesla'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The constructor functions have statements like line 12, to define its own properties, not global variables.</p><ul><li>Using the <code>Object.create</code> method</li></ul><p><code>Object.create</code> creates a new object, using an existing object as the prototype of the newly created object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span class="token keyword">const</span> nullObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>foo</code> is <code>bar</code>‘s prototype object.</p><p><code>nullObj</code> hasn’t a prototype object. It is an empty object, but doesn’t inherit anything, even basic methods, like <code>toString()</code>.</p><h3 id="Accessing-properties"><a href="#Accessing-properties" class="headerlink" title="Accessing properties"></a>Accessing properties</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   <span class="token comment">// empty object</span><span class="token keyword">const</span> obj2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// same as obj</span><span class="token keyword">const</span> obj3 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>   <span class="token comment">// same as obj</span><span class="token keyword">const</span> obj4 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">b</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>a <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">// now obj has the same properties as obj4</span><span class="token comment">// nested, simply think a simple object is a dictionary</span><span class="token keyword">const</span> obj5 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token string-property property">'b'</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">:</span> <span class="token string">'c'</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj5<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// ReferenceError: a is not defined</span>obj5<span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// => Object &#123; x: 1, y: 2 &#125;</span>obj5<span class="token punctuation">.</span>b<span class="token punctuation">;</span>         <span class="token comment">// => 2</span>obj5<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// => 'c', implicitly convert 3 to '3'</span>obj5<span class="token punctuation">[</span><span class="token string">'3'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// => 'c'</span>obj5<span class="token punctuation">.</span><span class="token number">3</span><span class="token punctuation">;</span>         <span class="token comment">// => SyntaxError: unexpected token: numeric literal</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Use identifier</li></ul><pre class="line-numbers language-none"><code class="language-none">expression.identifier<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The property name must be a legal identifier, otherwise use the property name to access, like line 16, 17. </p><p>Identifiers must be typed literally. If the property name is determined at runtime, use the name to access it.</p><ul><li>Use name</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">expression <span class="token punctuation">[</span> expression <span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Property names are strings, including the empty string. The value of the second expression is converted to a string as the property name, like line 15, 16.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> xo <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> yo <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">a</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token keyword">const</span> zo <span class="token operator">=</span> yoxo <span class="token operator">==</span> yo  <span class="token comment">// => false</span>zo <span class="token operator">==</span> yo  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Assigning an object to a variable simply assigns the reference to the variable.</p><h3 id="Getters-Setters"><a href="#Getters-Setters" class="headerlink" title="Getters&#x2F;Setters"></a>Getters&#x2F;Setters</h3><p>A getter is a method that gets the value of a specific property. </p><p>A setter is a method that sets the value of a specific property.</p><ul><li>Defined by object initializers</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token operator">=</span> val <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token operator">=</span> val <span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span><span class="token comment">// no setter, read-only</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">// do nothing</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.x ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.x = 1</span><span class="token comment">// no getter, write-only</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.y ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.y = undefined</span><span class="token comment">// read/write</span>obj<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.z ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.z = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Defined by <code>Object.defineProperty()</code> or <code>Object.defineProperties()</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">defineProperties</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token punctuation">&#123;</span>    <span class="token string-property property">'y'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token operator">=</span> val <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token string-property property">'z'</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>        <span class="token function-variable function">get</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>        <span class="token function-variable function">set</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token operator">=</span> val <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// no setter, read-only</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                      <span class="token comment">// do nothing</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.x ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.x = 1</span><span class="token comment">// no getter, write-only</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.y ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.y = undefined</span><span class="token comment">// read/write</span>obj<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.z ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.z = 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Prototype-and-inheritance"><a href="#Prototype-and-inheritance" class="headerlink" title="Prototype and inheritance"></a>Prototype and inheritance</h3><p>All constructor functions have a <code>prototype</code> property, the property is a <strong>template</strong> object for storing properties and methods that is used to build the <code>__proto__</code> property of a new object when creating the object with the <code>new</code> operator, making the new object is an instance of the current object. Other normal objects haven’t it unless setting it manually, but this makes no sense, normal objects haven’t a constructor function to new an instance.</p><p>Any object has the <code>__proto__</code> property, or the object returned by <code>Object.getPrototypeOf()</code>. The property is a part of the prototype chain, used to look up properties and methods.</p><p>A fairly common pattern for more object definitions is to define the properties inside the constructor, and the methods on the prototype object. If defining a method in the constructor, the method would be different for every object creation, might have performance issues, more details <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Performance_considerations">here</a>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Foo constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>let obj = new Foo</code> actually does the following: </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Object</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">=</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">;</span><span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><code>Foo.call(obj)</code> makes the <code>this</code> within <code>Foo()</code> to point to <code>obj</code>. All properties and methods defined with <code>this.</code> belong to <code>obj</code> now, <code>obj</code> inherits <code>Foo</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span> <span class="token operator">===</span> obj<span class="token punctuation">.</span>__proto__<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj <span class="token keyword">instanceof</span> <span class="token class-name">Foo</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                            <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>When looking up the properties or methods of <code>obj</code>, the lookup chain is <code>obj</code> -&gt; <code>obj.__proto__</code>(<code>Foo.prototype</code>) -&gt; <code>Foo.prototype.__proto__</code>(<code>Object.prototype</code>) -&gt; <code>Object.prototype.__proto__</code>(<code>null</code>).</p><p>At this time, <code>Foo.prototype</code> is an empty normal object, we didn’t add any property or method. It likes an object created by <code>new Object</code>, so its prototype is <code>Object.prototype</code>.</p><p><code>Foo.prototype</code> isn’t <code>Foo</code>, it is <code>Foo</code>‘s template object used to be inherited by other objects. If you don’t care about performance, put all properties and methods into <code>Foo</code>, that’s OK.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token comment">// Foo.call(this);  // don't inherit Foo.x</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bar constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">AnotherBar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// Like a C++'s subclass calls its superclass's constructor during initializing the class.</span>    <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// inherit Foo.x</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'AnotherBar constructor'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">// Bar inherits Foo</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Bar.prototype.constructor();   // => "Foo constructor", not Bar()</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bar<span class="token punctuation">;</span>  <span class="token comment">// reset the constructor</span><span class="token comment">// AnotherBar inherits Foo</span><span class="token class-name">AnotherBar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">AnotherBar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> AnotherBar<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token class-name">AnotherBar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => false</span><span class="token comment">// => Bar constructor</span>obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Bar</span><span class="token punctuation">;</span>  <span class="token comment">// don't call Foo()</span><span class="token comment">/* => Foo constructor *    AnotherBar constructor */</span><span class="token keyword">const</span> anotherObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AnotherBar</span><span class="token punctuation">;</span>  <span class="token comment">// call Foo()</span><span class="token comment">// => true undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherObj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">AnotherBar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> anotherObj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> foo <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>     <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     <span class="token comment">// z's getter function</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// z's setter function</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token operator">=</span> val<span class="token punctuation">;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>m <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> bar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// foo is bar's prototype object</span>bar<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// create a new bar.x, not to change foo.x</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar.x ='</span><span class="token punctuation">,</span> bar<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => bar.x = 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo.x ='</span><span class="token punctuation">,</span> foo<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => foo.x = 1, no change</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar.z ='</span><span class="token punctuation">,</span> bar<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => bar.z = undefined</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo.z ='</span><span class="token punctuation">,</span> foo<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => foo.z = undefined</span><span class="token comment">// z has a setter, don't create a new bar.z, call foo.z(val)</span>bar<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar.z ='</span><span class="token punctuation">,</span> bar<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => bar.z = 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo.z ='</span><span class="token punctuation">,</span> foo<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => foo.z = undefined</span><span class="token comment">// m is created in foo.z(val), but it belongs to bar, not foo</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar.m ='</span><span class="token punctuation">,</span> bar<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => bar.m = 1</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'foo.m ='</span><span class="token punctuation">,</span> foo<span class="token punctuation">.</span>m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => foo.m = undefined</span>foo<span class="token punctuation">.</span>sharedProp <span class="token operator">=</span> <span class="token string">'shared'</span><span class="token punctuation">;</span><span class="token keyword">const</span> anotherBar <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>sharedProp<span class="token punctuation">,</span> anotherBar<span class="token punctuation">.</span>sharedProp<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => shared shared</span><span class="token comment">// bar is a normal object, not a constructor function</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>bar<span class="token punctuation">.</span>prototype <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The difference between the <code>new</code> operator and <code>Object.create()</code>:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => 1, inherit x</span><span class="token keyword">const</span> anotherObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherObj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => undefined, don't inherit x</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>new</code> operator calls the constructor function, but <code>Object.create</code> doesn’t.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create</a><br><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Object_prototypes</a><br><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Objects/Inheritance</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model</a>  </p><p>About multiple inheritance here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model#No_multiple_inheritance">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Details_of_the_Object_Model#No_multiple_inheritance</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Classical_inheritance_with_Object.create">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/create#Classical_inheritance_with_Object.create</a></p><h3 id="Object-attributes"><a href="#Object-attributes" class="headerlink" title="Object attributes"></a>Object attributes</h3><p>Each object has three attributes:</p><ul><li><code>prototype</code>, a reference to the inherited object</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token keyword">const</span> anotherObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>anotherObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// => true</span><span class="token keyword">function</span> <span class="token function">CustomObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">CustomObject</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">const</span> myObj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CustomObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span><span class="token function">isPrototypeOf</span><span class="token punctuation">(</span>myObj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// => true</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">getPrototypeOf</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">===</span> <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>class, a string that categorizes the type of the object</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => "[object Number]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "[object Array]"</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "[object String]"</span><span class="token keyword">function</span> <span class="token function">CustomConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">CustomConstructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "[object Object]"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>No way to set the attribute. <code>Object.prototype.toString()</code> is the only way to query it.</p><p>In <code>[object Number]</code>, <code>Number</code> is the class name.</p><ul><li>extensible, whether new properties can be added</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span>Object<span class="token punctuation">.</span><span class="token function">preventExtensions</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isExtensible</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => false, can't make it extensible again</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>            <span class="token comment">// do nothing</span>obj<span class="token punctuation">.</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token comment">// The preventExtensions function only affects the object itself</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myVar <span class="token operator">=</span> <span class="token string">'inherited'</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>myVar<span class="token punctuation">;</span>  <span class="token comment">// => "inherited"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Property-attributes"><a href="#Property-attributes" class="headerlink" title="Property attributes"></a>Property attributes</h3><p>Each property has three attributes:</p><ul><li><code>writable</code>. Whether the value can be set;</li><li><code>enumerable</code>. Whether the name is returned by <code>for...in</code> loop. Properties created by normal JavaScript code are enumerable unless you change them explicitly. More details <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Enumerability_and_ownership_of_properties">here</a>;</li><li><code>configurable</code>. Whether can be deleted or the property descriptor can be altered;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// An object called property descriptor represents the four attributes</span><span class="token comment">// => Object &#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// make 'x' non-writable</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">writable</span><span class="token operator">:</span> <span class="token boolean">false</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>                      <span class="token comment">// do nothing</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.x ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.x = 1</span><span class="token comment">// but 'x' is still configurable</span>Object<span class="token punctuation">.</span><span class="token function">defineProperty</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">"x"</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">value</span><span class="token operator">:</span> <span class="token number">2</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'obj.x ='</span><span class="token punctuation">,</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => obj.x = 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Normally use <code>configurable</code> and <code>writable</code> attributes with <code>extensible</code> <em>object attribute</em> to lock down an object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token operator">=</span> val <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_z <span class="token operator">=</span> val <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token literal-property property">nestedObj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token comment">// => Object &#123; value: 1, writable: true, enumerable: true, configurable: true &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; get: y(), set: y(), enumerable: true, configurable: true &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; get: z(), set: z(), enumerable: true, configurable: true &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// make the object non-extensible, non-configurable</span>Object<span class="token punctuation">.</span><span class="token function">seal</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isSealed</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true, can't unseal it</span><span class="token comment">// => Object &#123; value: 1, writable: true, enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; get: y(), set: y(), enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// Object &#123; get: z(), set: z(), enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// non-extensible</span>obj<span class="token punctuation">.</span>newProp <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>newProp<span class="token punctuation">;</span>  <span class="token comment">// => undefined</span>obj<span class="token punctuation">.</span>z <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token comment">// z was not assigned before, doesn't exist</span>obj<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token comment">// => undefined</span><span class="token comment">// writable, still can set</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token comment">// => 0</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token comment">// => 0</span><span class="token comment">// make the object non-extensible, non-configurable, non-writable</span>Object<span class="token punctuation">.</span><span class="token function">freeze</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>Object<span class="token punctuation">.</span><span class="token function">isFrozen</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true, can't unfreeze it</span><span class="token comment">// => Object &#123; value: 0, writable: false, enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'x'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Object &#123; get: y(), set: y(), enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Object &#123; get: z(), set: z(), enumerable: true, configurable: false &#125;</span>Object<span class="token punctuation">.</span><span class="token function">getOwnPropertyDescriptor</span><span class="token punctuation">(</span>obj<span class="token punctuation">,</span> <span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token comment">// => 0, no change</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y<span class="token punctuation">;</span>  <span class="token comment">// => 0, no change</span><span class="token comment">// only affect the object itself</span>obj<span class="token punctuation">.</span>nestedObj<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>nestedObj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>myObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>myObj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>      <span class="token comment">// => 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Testing-properties"><a href="#Testing-properties" class="headerlink" title="Testing properties"></a>Testing properties</h3><p>Check whether an object has a property with a given name:</p><ul><li>Directly query the property;</li><li><code>in</code> operator;</li><li><code>hasOwnProperty()</code>, returns <code>true</code> if the property belongs to the object itself, not the prototype objects;</li><li><code>propertyIsEnumerable()</code>, returns true only if <code>hasOwnProperty()</code> returns <code>true</code> and the <code>enumerable</code> attribute is <code>true</code>;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>x <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// => false, directly query, exists</span>obj<span class="token punctuation">.</span>z <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// => true, doesn't exist</span><span class="token string">'z'</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span>  <span class="token comment">// => false, doesn't exist</span>obj<span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>y <span class="token operator">===</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span> <span class="token comment">// => true, but exists</span><span class="token comment">// should use the in operator to check, not depending on the value "undefined"</span><span class="token string">'y'</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span>  <span class="token comment">// => true, exists</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Enumerating-properties"><a href="#Enumerating-properties" class="headerlink" title="Enumerating properties"></a>Enumerating properties</h3><ul><li><code>for...in</code>, iterates over all enumerable properties’ name, including inherited;</li><li><code>Object.getOwnPropertyNames()</code>, returns all own property names, including enumerable and non-enumerable;</li><li><code>Object.keys()</code>, returns all own enumerable property names;</li></ul><h4 id="Only-get-non-enumerable-properties"><a href="#Only-get-non-enumerable-properties" class="headerlink" title="Only get non-enumerable properties"></a>Only get non-enumerable properties</h4><p>Use the <code>Array.prototype.filter()</code> function to remove the result of <code>Object.keys()</code> from <code>Object.getOwnPropertyNames()</code>‘s.</p><h2 id="Arrays"><a href="#Arrays" class="headerlink" title="Arrays"></a>Arrays</h2><ul><li>Untyped: an element may be of any type;</li><li>Dynamic: no need to declare a fixed size, growing or shrinking as needed;</li><li>Sparse: no need to have contiguous indexes, maybe have gaps, length is larger than the number of indexes;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// empty array</span><span class="token keyword">let</span> arr2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// => 1, use index 0 to access, JavaScript converts the number 0 to a string "0"</span>arr2<span class="token punctuation">[</span><span class="token string">'0'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// => 1, use the property name '0' to access, an array is also an object</span>arr2<span class="token punctuation">[</span><span class="token number">1.0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// => 2, floating-point, same as arr2[1]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>All indexes are property names, but only property names that are non-negative integers are indexes.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">delete</span> arr2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// => Array(5) [ undefined, 2, "3", &#123;…&#125;, (2) […] ]</span>arr2<span class="token punctuation">;</span>  <span class="token comment">// didn't change the length, arr2 is a sparse array now</span>arr2<span class="token punctuation">.</span><span class="token function">shift</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Array(4) [ 2, "3", &#123;…&#125;, (2) […] ]</span>arr2<span class="token punctuation">;</span>  <span class="token comment">// the length was changed, arr2 becomes dense again</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> arr3 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// the second element is undefined, sparse array</span><span class="token keyword">const</span> arr4 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// same as arr3</span><span class="token comment">// => Array [ "0", "2" ]</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr3<span class="token punctuation">)</span><span class="token punctuation">;</span>arr3<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// => 3, sparse array, the length isn't equal to the number of indexes</span><span class="token number">1</span> <span class="token keyword">in</span> arr3<span class="token punctuation">;</span>      <span class="token comment">// => false</span><span class="token comment">// => Array(3) [ 1, undefined, 3 ]</span>arr3<span class="token punctuation">;</span>arr3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">;</span>  <span class="token comment">// growing the array, to add new empty slots</span><span class="token comment">// => Array(5) [ 1, undefined, 3, undefined, undefined ]</span>arr3<span class="token punctuation">;</span>arr3<span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token comment">// shortening the array</span><span class="token comment">// => Array(4) [ 1, undefined, 3, undefined ]</span>arr3<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr5 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// same as []</span><span class="token keyword">let</span> arr6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// create 5 empty slots, sparse array</span><span class="token comment">// => Array(5) [ undefined, undefined, undefined, undefined, undefined ]</span>arr6<span class="token punctuation">;</span>arr6<span class="token punctuation">[</span><span class="token string">'6'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">6</span><span class="token punctuation">;</span>  <span class="token comment">// same as arr6[6]</span><span class="token comment">// If the given string can be converted to a big number, will create large number of empty slots.</span><span class="token comment">// => Array(7) [ undefined, undefined, undefined, undefined, undefined, undefined, 6 ]</span>arr6<span class="token punctuation">;</span>arr6<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// => 7, grew the array automatically</span>arr6<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// convert -1 to '-1', is property name</span><span class="token comment">// => Array(7) [ undefined, undefined, undefined, undefined, undefined, undefined, 6 ]</span>arr6<span class="token punctuation">;</span>arr6<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">// => 7</span>arr6<span class="token punctuation">[</span><span class="token string">'-1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment">// => -1</span><span class="token comment">// => Array [ "6" ]</span>Object<span class="token punctuation">.</span><span class="token function">keys</span><span class="token punctuation">(</span>arr6<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token keyword">in</span> arr6<span class="token punctuation">;</span>      <span class="token comment">// => false</span>arr6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">// => undefined, empty slots' value are undefined, but don't exist.</span>arr6<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token keyword">in</span> arr6<span class="token punctuation">;</span>      <span class="token comment">// => true, don't use 'undefined' to determine whether an element exists.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Iterating-arrays"><a href="#Iterating-arrays" class="headerlink" title="Iterating arrays"></a>Iterating arrays</h3><ul><li><code>for</code></li><li><code>Array.prototype.forEach()</code></li><li><code>for...of</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span>  <span class="token punctuation">,</span> <span class="token string">'3'</span><span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">val<span class="token punctuation">,</span> idx</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* =>    index: 0 value: 1    index: 2 value: 3    index: 4 value: 5    */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span>idx<span class="token punctuation">,</span> <span class="token string">'value:'</span><span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arr<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>i <span class="token keyword">in</span> arr<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">continue</span><span class="token punctuation">;</span>  <span class="token comment">// skip non-existence elements</span>    <span class="token comment">// => , same as forEach</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">,</span>i<span class="token punctuation">,</span> <span class="token string">'value:'</span><span class="token punctuation">,</span> arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>     <span class="token comment">// can't distinguish an element is non-existence or its value is undefined </span><span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">const</span> val <span class="token keyword">of</span> arr<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* =>    value: 1    value: undefined    value: 3    value: undefined    value: 5    */</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'value:'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>Function definitions can be nested within other functions. The nested functions can access any variables within a same scope where they are defined, so JavaScript functions are closures. Functions are first-class objects in JavaScript.</p><h3 id="Defining-functions"><a href="#Defining-functions" class="headerlink" title="Defining functions"></a>Defining functions</h3><h4 id="Function-descriptions"><a href="#Function-descriptions" class="headerlink" title="Function descriptions"></a>Function descriptions</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span> <span class="token comment">/* zero or more parameters, comma-separated */</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/* ... */</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="Function-expressions"><a href="#Function-expressions" class="headerlink" title="Function expressions"></a>Function expressions</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// 1. anonymous</span><span class="token keyword">var</span> <span class="token function-variable function">fnVar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'An anonymous function expression.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fnVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 2. named</span><span class="token comment">// easily find the origin of an error from the call stack</span><span class="token keyword">var</span> <span class="token function-variable function">namedFnVar</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token function">namedFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A named function expression.'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">namedFnVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">namedFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => ReferenceError: namedFn is not defined</span><span class="token comment">// 3. one-time</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">msg</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'A one-time function expression, msg:'</span><span class="token punctuation">,</span> msg<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token string">'Oh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// 4. arrow</span><span class="token keyword">var</span> <span class="token function-variable function">arrowFn</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'An arrow function expression.'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">arrowFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Function-constructors"><a href="#Function-constructors" class="headerlink" title="Function constructors"></a>Function constructors</h4><ul><li>Create functions dynamically;</li><li>Only execute the code within the global scope, can’t access local variables;</li><li>The function body is a string, can’t optimize it, parsing the function body each time it is called;</li><li>Similar security and performance issues to <code>eval</code>;</li></ul><p>It is not recommended to use normally. </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> constructorFn <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'msg'</span><span class="token punctuation">,</span>     <span class="token string">'console.log("A function created by a function constructor, msg:", msg)'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">constructorFn</span><span class="token punctuation">(</span><span class="token string">'Oh'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>The argument names, such as <code>msg</code>, must be strings and valid identifiers.</p><h3 id="Function-scope"><a href="#Function-scope" class="headerlink" title="Function scope"></a>Function scope</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => hi</span><span class="token function">fnVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => TypeError: fnVar is not a function</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token function-variable function">fnVar</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fnVar</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => hello</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Function expressions are not visible everywhere within the current scope, don’t like variables declared by <code>var</code> and function descriptions.</p><h3 id="Binding-functions"><a href="#Binding-functions" class="headerlink" title="Binding functions"></a>Binding functions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">[</span><span class="token punctuation">,</span> arg1<span class="token punctuation">[</span><span class="token punctuation">,</span> arg2<span class="token punctuation">[</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>bind</code> binds a function to an object and returns a new function with the specified <code>this</code> value and initial arguments.</p><p>It is not recommended to use <code>new</code> operator to construct new instances of bound functions.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> globalObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token function-variable function">getX</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token function-variable function">add</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">===</span> globalObject<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>   obj<span class="token punctuation">.</span><span class="token function">getX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => 1</span><span class="token keyword">const</span> savedGetX <span class="token operator">=</span> obj<span class="token punctuation">.</span>getX<span class="token punctuation">;</span><span class="token function">savedGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => undefined, called as a function, not a method, "this" is the global object</span><span class="token keyword">const</span> boundGetX <span class="token operator">=</span> <span class="token function">savedGetX</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">boundGetX</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1, "this" is obj</span><span class="token comment">// with initial arguments</span><span class="token keyword">const</span> boundAdd <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// "this" is null, use the "this" of current scope</span><span class="token function">boundAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => 11 true</span><span class="token function">boundAdd</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 11 true, 2 is ignored</span><span class="token comment">// create a shortcut to a function, and could specify a special "this" value</span><span class="token keyword">const</span> add <span class="token operator">=</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>add<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => 3 true, this "this" is not special</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Determining-whether-a-function-exists"><a href="#Determining-whether-a-function-exists" class="headerlink" title="Determining whether a function exists"></a>Determining whether a function exists</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">'function'</span> <span class="token operator">===</span> <span class="token keyword">typeof</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Nested-functions"><a href="#Nested-functions" class="headerlink" title="Nested functions"></a>Nested functions</h3><p>A function description can appear in the global code or within other functions. It behaves strangely within block code(<code>if</code>, <code>for</code>, …) in non-strict mode, can’t ensure that it will be defined, but in strict mode, it is defined and its scope is the block.</p><p>No such block scope restriction for function expressions and function constructors.</p><p>Nested functions don’t inherit the <code>this</code> value from its caller. If it is invoked as a method, <code>this</code> is the object, as a function, <code>this</code> is the global object or undefined (strict mode).</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> globalObject <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function-variable function">fn</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">const</span> savedThis <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span>                <span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>             console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> globalObject<span class="token punctuation">,</span> savedThis <span class="token operator">===</span> obj<span class="token punctuation">)</span>  <span class="token comment">// => true true</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                obj<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function-variable function">nestedFn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// => true false true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> obj<span class="token punctuation">.</span>fn<span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">===</span> globalObject<span class="token punctuation">,</span> savedThis <span class="token operator">===</span> obj<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>                <span class="token keyword">return</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// => true false true</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span> <span class="token operator">===</span> anotherObj<span class="token punctuation">,</span> <span class="token keyword">this</span> <span class="token operator">===</span> globalObject<span class="token punctuation">,</span> savedThis <span class="token operator">===</span> obj<span class="token punctuation">)</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> anotherObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>anotherObj<span class="token punctuation">.</span>fn <span class="token operator">=</span> obj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>obj<span class="token punctuation">.</span>fn<span class="token punctuation">.</span><span class="token function">nestedFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>anotherObj<span class="token punctuation">.</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Invoking-functions-indirectly"><a href="#Invoking-functions-indirectly" class="headerlink" title="Invoking functions indirectly"></a>Invoking functions indirectly</h3><p>The following two methods accept an explicit <code>this</code> value, so could invoke any function as a method of any object, writing a method once and then inherit it in any object.</p><ul><li><code>Function.prototype.call()</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> arg1<span class="token punctuation">,</span> arg2<span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>All arguments are optional.<br>In non-strict mode, <code>thisArg</code> is <code>null</code> or <code>undefined</code>, which will be replaced with the global object, primitive values will be converted to wrapper objects.</p><p>Using <code>call()</code> to chain constructors for an object. Like a C++’s subclass calls its superclass’s constructor during initializing the class.</p><p>Using <code>call()</code> to invoke an anonymous function for multiple objects.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/call</a></p><ul><li><code>Function.prototype.apply()</code></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>thisArg<span class="token punctuation">,</span> <span class="token punctuation">[</span>argsArray<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>thisArg</code> is same as <code>call()</code>.</p><p><code>argsArray</code> is optional, could be <code>null</code> or <code>undefined</code> if the function hasn’t arguments.</p><p>Using <code>apply()</code> to chain constructors for an object.</p><p>Using <code>apply()</code> and built-in functions cleverly.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> array <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">let</span> anotherArray <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'c'</span><span class="token punctuation">,</span> <span class="token string">'d'</span><span class="token punctuation">]</span><span class="token keyword">const</span> elements <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">// Syntax: Array.prototype.push(element1[, ...[, elementN]])</span>anotherArray<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>anotherArray<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => ["a", "b", [0, 1, 2]]</span><span class="token comment">// use the built-in functions cleverly</span>array<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span>array<span class="token punctuation">,</span> elements<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>array<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => ["a", "b", 0, 1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/apply</a></p><p>The difference of the two methods is only that one accepts an argument list, one accepts an argument array or array-like object.</p><h3 id="Closures"><a href="#Closures" class="headerlink" title="Closures"></a>Closures</h3><p>closure &#x3D; function + (its) variable scope.</p><p>The variable scope includes local(own) scope, outer function’s scope, global scope.</p><p>The variable scope is determined when the function is defined, not runtime, the function could be invoked in another scope.</p><p>A closure gives you access to an outer function’s scope from an inner function.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> fn <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token function">anonFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> counter <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token operator">++</span>counter<span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">function</span> <span class="token function">anotherAnonFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>counter<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>counter</code> variable is in the scope when defining <code>anotherAnonFn()</code>, but its value is determined when invoking <code>fn()</code>, so don’t create closures in a loop, they share the final value of a variable.</p><p>It is common using closures to create private environments which include private methods and variables, no other methods can change these private variables.</p><p>JavaScript doesn’t like C++ to use function call stack: local variables would disappear after the function returns. Have an external reference to <code>anotherAnonFn()</code> after <code>anonFn()</code> returns, the object <code>anonFn</code> won’t be garbage collected.</p><p>It is unwise to unnecessarily create functions within other functions if closures are not needed for a particular task, because of performance, more details <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Closures#Performance_considerations">here</a>.</p><p>A closure has its own <code>this</code> and <code>arguments</code>, if need outer function’s, save them to variables before using them.</p><h3 id="Function-parameters"><a href="#Function-parameters" class="headerlink" title="Function parameters"></a>Function parameters</h3><ul><li>Rest parameters</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// moreArgs is always an array</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>moreArgs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// => true [ 1, 2, 3 ]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Array<span class="token punctuation">.</span><span class="token function">isArray</span><span class="token punctuation">(</span>moreArgs<span class="token punctuation">)</span><span class="token punctuation">,</span> moreArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Default parameters</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">1</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => undefined 1</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>Destructured parameters</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// destructuring rest parameters</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span><span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1 2 3</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="The-arguments-object"><a href="#The-arguments-object" class="headerlink" title="The arguments object"></a>The <code>arguments</code> object</h3><p>Could refer to a function’s arguments within the function with <code>arguments</code>. Arrow functions haven’t it.</p><p><code>arguments</code> is an array-like object, has a <code>length</code> property. If you want a true argument array, use <em>rest parameters</em>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// => 3 Arguments &#123; 0: 1, 1: 2, 2: 3, … &#125;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">,</span> arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">anotherFn</span><span class="token punctuation">(</span><span class="token parameter">a</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => 1</span>        arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> <span class="token comment">// sync with a</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => 2</span><span class="token punctuation">&#125;</span><span class="token function">anotherFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// In non-strict mode, if the function contains rest, default, or destructured parameters, the arguments object doesn't sync with them.</span><span class="token keyword">function</span> <span class="token function">restParaFn</span><span class="token punctuation">(</span><span class="token parameter"><span class="token operator">...</span>moreArgs</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// => Arguments &#123; 0: 1, 1: 2, 2: 3, … &#125; Array(3) [ 1, 2, 3 ]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> moreArgs<span class="token punctuation">)</span><span class="token punctuation">;</span>    moreArgs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// doesn't sync with the arguments object</span>    <span class="token comment">// => Arguments &#123; 0: 1, 1: 2, 2: 3, … &#125; Array(3) [ 0, 2, 3 ]</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">,</span> moreArgs<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">restParaFn</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Generator-functions"><a href="#Generator-functions" class="headerlink" title="Generator functions"></a>Generator functions</h3><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Iterators_and_Generators</a></p><h3 id="Arrow-functions"><a href="#Arrow-functions" class="headerlink" title="Arrow functions"></a>Arrow functions</h3><p>Shorter functions and non-binding of <code>this</code>.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Functions/Arrow_functions</a></p><h2 id="Classes"><a href="#Classes" class="headerlink" title="Classes"></a>Classes</h2><p>JavaScript classes, introduced in ECMAScript 2015, are primarily syntactical sugar. In fact, they are <em>special functions</em>.</p><h3 id="Class-declarations"><a href="#Class-declarations" class="headerlink" title="Class declarations"></a>Class declarations</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">SubFoo</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Foo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Function</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubFoo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Foo<span class="token punctuation">)</span><span class="token punctuation">;</span>              <span class="token comment">// => true</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>SubFoo<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// => false</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Array</span> <span class="token punctuation">&#123;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">args</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">super</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">const</span> Animal <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token function">speak</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Dog</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Declared public or private fields are always present.</span>        <span class="token comment">// public fields</span>    dogName <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>    breed<span class="token punctuation">;</span>        <span class="token comment">/* private fields, not support yet     * #color = 'brown';     * #height;     */</span>        <span class="token keyword">static</span> type <span class="token operator">=</span> <span class="token string">'Dog'</span><span class="token punctuation">;</span>  <span class="token comment">// static data property</span>        <span class="token keyword">static</span> <span class="token function">speak</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bark, ...'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span>Dog<span class="token punctuation">.</span>dangerous <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment">// static data property</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>cuteRating <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Dog</span><span class="token punctuation">)</span><span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token comment">// To inherit from a non-constructible object</span>Object<span class="token punctuation">.</span><span class="token function">setPrototypeOf</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token class-name">Dog</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> Animal<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The constructor could be ignored. If the class is a base class, the default constructor is empty, like <code>Foo</code>. If the class is derived class, the default constructor calls the parent constructor, passing along any arguments that were provided, like <code>Bar</code>.</p><h3 id="Class-expressions"><a href="#Class-expressions" class="headerlink" title="Class expressions"></a>Class expressions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// anonymous class</span><span class="token keyword">const</span> Foo <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> AnotherFoo <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">extends</span> Array <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">// named class</span><span class="token keyword">const</span> Bar <span class="token operator">=</span> <span class="token keyword">class</span> <span class="token class-name">BarClass</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Syntactical-sugar"><a href="#Syntactical-sugar" class="headerlink" title="Syntactical sugar"></a>Syntactical sugar</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">say</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">function</span> <span class="token function">Bar</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">Foo</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token class-name">Bar</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>constructor <span class="token operator">=</span> Bar<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span>    x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>y <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">class</span> <span class="token class-name">Bar</span> <span class="token keyword">extends</span> <span class="token class-name">Foo</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>They are same. In class <code>Foo</code>, the method <code>say</code> belongs to <code>Foo.prototype</code>.</p><h3 id="Notes"><a href="#Notes" class="headerlink" title="Notes"></a>Notes</h3><ul><li><p>Class body is executed in <strong>strict mode</strong>;</p></li><li><p>Must first declare the class then access it, including class declarations and class expressions;</p></li><li><p>Static methods;</p> <pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">class</span> <span class="token class-name">Point</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">static</span> <span class="token function">distance</span><span class="token punctuation">(</span><span class="token parameter">a<span class="token punctuation">,</span> b</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// calculate distance</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">static</span> <span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// "this" is legal in static methods</span>        <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> Point<span class="token punctuation">.</span><span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "function"</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Point<span class="token punctuation">.</span><span class="token function">nothing</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token comment">// => class Point &#123;&#125;</span><span class="token comment">// call the static method, can't call it via the instances</span>Point<span class="token punctuation">.</span><span class="token function">distance</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> If assigning a static or non-static method to a variable, then call it, the value of <code>this</code> is always <code>undefined</code>.</p></li></ul><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Classes/constructor</a></p><h2 id="Operators"><a href="#Operators" class="headerlink" title="Operators"></a>Operators</h2><h3 id="Operators-and-precedence"><a href="#Operators-and-precedence" class="headerlink" title="Operators and precedence"></a>Operators and precedence</h3><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/Operator_Precedence</a></p><h3 id="Bitwise-operators"><a href="#Bitwise-operators" class="headerlink" title="Bitwise operators"></a>Bitwise operators</h3><p><code>&amp;</code>, <code>|</code>, <code>^</code>, <code>~</code>, <code>&lt;&lt;</code>, <code>&gt;&gt;</code>, <code>&gt;&gt;&gt;</code></p><p>The bitwise operators expect 32-bit integer operands, and drop any fractional part and any bits beyond the 32nd.</p><p><code>NaN</code>, <code>Infinity</code>, and <code>-Infinity</code> all are converted to <code>0</code>.</p><h3 id="Comparison-operators"><a href="#Comparison-operators" class="headerlink" title="Comparison operators"></a>Comparison operators</h3><p><code>==</code>, <code>===</code>, <code>!=</code>, <code>!==</code></p><p><code>===</code>, <code>!==</code> are the strict versions of <code>==</code>, <code>!=</code>, they check the type of operands first, then compare the values:</p><ul><li>Different types, not equal;</li><li>One of values is <code>NaN</code>, not equal;</li><li><code>0 === -0</code> is <code>true</code>;</li><li>Strings are Unicode (UTF-16) strings. Two equal strings must have a same length and same UTF-16 bit sequences;</li><li>Objects are compared by reference. Two equal objects must refer to a same object;</li></ul><p><code>==</code>, <code>!=</code> perform some type conversions, then compare. The rules:</p><ul><li>If two values have a same type, do same things like <code>===</code>, <code>!==</code>, if not, check the following rules;</li><li><code>null == undefined</code> is <code>true</code>;</li><li>One is number, one is string, convert the string to a number, then compare;</li><li>One of values is boolean, convert the boolean to a number, <code>true</code> to <code>1</code>, <code>false</code> to <code>0</code>, then compare;</li><li>One of values is object, perform object-to-primitive conversions(favor number, then string), then compare;</li><li>Any other combinations are not equal;</li></ul><p><code>&lt;</code>, <code>&gt;</code>, <code>&lt;=</code>, <code>&gt;=</code></p><p>These operators favor numbers and only perform string comparison if both operands are strings, don’t like <code>+</code>(favors strings).</p><p>The rules:</p><ul><li>One of values is an object, perform object-to-primitive conversions first;</li><li>Both are strings, compared as strings;</li><li>One of values is not string, convert all of them to numbers, then compare;</li><li><code>Infinity</code> is larger any number, <code>-Infinity</code> is the opposite;</li><li>Either of operand is <code>NaN</code>, the result is <code>false</code>;</li></ul><h3 id="in-operator"><a href="#in-operator" class="headerlink" title="in operator"></a><code>in</code> operator</h3><p>The left-side operand is a string, the right-side operand is an object. It is <code>true</code> if the left-side value is a property name of the object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token number">0</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>    <span class="token comment">// => true</span><span class="token string">'0'</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token number">5</span> <span class="token keyword">in</span> x<span class="token punctuation">;</span>    <span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="instanceof-operator"><a href="#instanceof-operator" class="headerlink" title="instanceof operator"></a><code>instanceof</code> operator</h3><p>The left-side operand is an object, the right-side operand is the constructor function to initialize the object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span> <span class="token punctuation">]</span><span class="token punctuation">;</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">;</span>    <span class="token comment">// => true</span>x <span class="token keyword">instanceof</span> <span class="token class-name">Object</span><span class="token punctuation">;</span>   <span class="token comment">// => true, all objects are instances of Object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="Logical-operators"><a href="#Logical-operators" class="headerlink" title="Logical operators"></a>Logical operators</h3><p><code>&amp;&amp;</code>, <code>||</code>, <code>~</code></p><p><code>~</code> operator converts its operand to a boolean value first, but <code>&amp;&amp;</code> and <code>||</code> don’t.</p><p>If the left-side operand can determine the result, <code>&amp;&amp;</code> and <code>||</code> don’t evaluate the right-side operand.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span> <span class="token number">1</span>              <span class="token comment">// => false</span><span class="token operator">!</span> <span class="token keyword">null</span>           <span class="token comment">// => true</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> <span class="token number">1</span>         <span class="token comment">// => 1</span><span class="token string">'a'</span> <span class="token operator">&amp;&amp;</span> <span class="token boolean">true</span>      <span class="token comment">// => true</span><span class="token keyword">null</span><span class="token punctuation">.</span>prop        <span class="token comment">// => TypeError: null has no properties</span><span class="token number">0</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">null</span><span class="token punctuation">.</span>prop   <span class="token comment">// => 0, no TypeError, don't evaluate null.prop</span><span class="token number">1</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">.</span>prop   <span class="token comment">// => 1</span><span class="token number">0</span> <span class="token operator">||</span> <span class="token keyword">null</span><span class="token punctuation">.</span>prop   <span class="token comment">// => TypeError: null has no properties</span><span class="token keyword">let</span> y<span class="token punctuation">;</span><span class="token keyword">let</span> x <span class="token operator">=</span> y <span class="token operator">||</span> <span class="token number">1</span><span class="token punctuation">;</span>   <span class="token comment">// => 1, if y is defined, assign it to x, otherwise, set x a default value 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="eval"><a href="#eval" class="headerlink" title="eval()"></a><code>eval()</code></h3><p>It is a global function which interprets a string as JavaScript source code.</p><p><code>eval</code> returns the value of the last expression or statement, or <code>undefined</code> if the last expression or statement hasn’t value.</p><p><code>eval</code> propagates exceptions.</p><p>If calling <code>eval</code> within a function, it uses the environment of the caller, to do anything like the caller within the function.</p><p>If calling <code>eval</code> outside functions, it use the global environment.</p><p>The source code in <code>eval</code> is unanalyzable. Can’t safely optimize functions that call <code>eval</code>.</p><p>If assigning <code>eval</code> to a variable within a function, this is an indirect call to <code>eval</code>. <code>eval</code> uses the global environment, not the local environment. It can’t read, write, define local variables or functions.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global x:'</span><span class="token punctuation">,</span> <span class="token function">eval</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global x: 1</span><span class="token keyword">function</span> <span class="token function">testEval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token comment">// hide the global one</span>    <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'z += 1; k = 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// also create a new global variable k</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local z, should be 2:'</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => local z, should be 2: 2</span>    <span class="token comment">// indirectly call eval, use the global environment</span>    <span class="token keyword">var</span> aliasOfEval <span class="token operator">=</span> eval<span class="token punctuation">;</span>    <span class="token function">aliasOfEval</span><span class="token punctuation">(</span><span class="token string">'y += 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// aliasOfEval('z += 1');  // => ReferenceError: z is not defined</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local y, should be 1:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => local y, should be 1: 1</span>    <span class="token comment">// redefine eval, hide the global function eval()</span>    <span class="token comment">// => TypeError: eval is not a function, the error comes from line 10</span>    <span class="token comment">// var eval = 1;</span><span class="token punctuation">&#125;</span><span class="token function">testEval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global y, should be 2:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global y, should be 2: 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'new global variable, k:'</span><span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// => new global variable, k: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Conditional-operator"><a href="#Conditional-operator" class="headerlink" title="Conditional operator (?:)"></a>Conditional operator (<code>?:</code>)</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">condition <span class="token operator">?</span> exprIfTrue <span class="token operator">:</span> exprIfFalse<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The operands may be of any type. If <code>condition</code> is truthy, to evaluate the <code>exprIfTrue</code> expression and its value is returned, otherwise is the <code>exprIfFalse</code> expression.</p><p>This operator is frequently used as a shortcut for the <code>if</code> statement.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x<span class="token punctuation">;</span><span class="token keyword">let</span> y <span class="token operator">=</span> x <span class="token operator">?</span> x <span class="token operator">:</span> <span class="token string">'default'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> x<span class="token punctuation">;</span><span class="token keyword">let</span> y<span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    y <span class="token operator">=</span> x<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token punctuation">&#123;</span>    y <span class="token operator">=</span> <span class="token string">'default'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="delete-operator"><a href="#delete-operator" class="headerlink" title="delete operator"></a><code>delete</code> operator</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">delete</span> object<span class="token punctuation">.</span>property<span class="token keyword">delete</span> object<span class="token punctuation">[</span><span class="token string">'property'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The return value is <code>true</code> or <code>false</code>.</p><p><code>delete</code> operator removes a property from an object, but:</p><ul><li>Can’t delete any properties declared by <code>var</code>, <code>let</code>, <code>const</code>;</li><li>Can’t delete function declaration;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">delete</span> obj<span class="token punctuation">.</span>x<span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token string">'x'</span> <span class="token keyword">in</span> obj<span class="token punctuation">;</span>    <span class="token comment">// => false</span><span class="token keyword">delete</span> obj<span class="token punctuation">;</span>    <span class="token comment">// => false, declared by var</span>obj2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// obj2 is a property of the global object</span><span class="token keyword">delete</span> obj2<span class="token punctuation">;</span>   <span class="token comment">// => true</span>obj2<span class="token punctuation">;</span>          <span class="token comment">// => ReferenceError: obj2 is not defined</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">// => true</span><span class="token keyword">delete</span> arr<span class="token punctuation">[</span><span class="token string">'1'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token comment">// => true</span><span class="token comment">// the size of arr was not changed, still is 5</span>arr<span class="token punctuation">;</span>                <span class="token comment">// => Array(5) [ undefined, undefined, 3, 4, 5 ]</span><span class="token number">0</span> <span class="token keyword">in</span> arr<span class="token punctuation">;</span>           <span class="token comment">// => false</span>arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>             <span class="token comment">// => undefined</span>arr<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>  <span class="token comment">// arr[2] is still there</span>arr<span class="token punctuation">;</span>                 <span class="token comment">// => Array(5) [ undefined, undefined, undefined, 4, 5 ]</span><span class="token number">2</span> <span class="token keyword">in</span> arr<span class="token punctuation">;</span>            <span class="token comment">// => true</span><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">delete</span> fn<span class="token punctuation">;</span>       <span class="token comment">// => false</span><span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>fn<span class="token punctuation">;</span>  <span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="typeof-operator"><a href="#typeof-operator" class="headerlink" title="typeof operator"></a>typeof operator</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> operand<span class="token keyword">typeof</span><span class="token punctuation">(</span>operand<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The return value is a string.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">typeof</span> <span class="token number">NaN</span><span class="token punctuation">;</span>          <span class="token comment">// => "number"</span><span class="token keyword">typeof</span> <span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "number"</span><span class="token comment">// All constructor functions, except the function constructors, will always be "object".</span><span class="token keyword">typeof</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "object"</span><span class="token comment">// => "function"</span><span class="token keyword">typeof</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">'x'</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">,</span> <span class="token string">'var z = x + y; return z'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spread-operator"><a href="#Spread-operator" class="headerlink" title="Spread operator"></a>Spread operator</h3><p>The spread operator begins with <code>...</code>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1</span><span class="token comment">// => Sat Feb 01 2020 00:00:00 GMT+0000 (Coordinated Universal Time)</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">2020</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// concatenate arrays</span><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">...</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">...</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Array(5) [ 1, 2, 3, "a", "b" ]</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token operator">...</span><span class="token string">'abc'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => a b c</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The spread operator expands an <em>iterable</em>, such as arrays, strings.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">nestedObj</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span> <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span> <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token operator">...</span> obj <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>  <span class="token comment">// clone an object</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => Object &#123; nestedObj: &#123;…&#125; &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">.</span>nestedObj <span class="token operator">===</span> obj<span class="token punctuation">.</span>nestedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token keyword">const</span> assignedObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// another way to clone objects</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>assignedObj<span class="token punctuation">.</span>nestedObj <span class="token operator">===</span> obj<span class="token punctuation">.</span>nestedObj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The spread operator expands properties to do object shallow-cloning, not deep-cloning.</p><p>The spread operator copies <em>own enumerable</em> properties from an object when applying it to <em>object literals</em>.</p><p>The <code>Object.assign()</code> method copies all <em>own enumerable</em> properties from one or more source objects to a target object. It returns the target object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token keyword">const</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> clonedObj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Foo</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">;</span><span class="token keyword">const</span> clonedObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">,</span> clonedObj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Foo</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// true false</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">.</span>__proto__ <span class="token operator">===</span> <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Object cloning excludes the <code>prototype</code> object. If <code>Object.assign</code> copies property definitions into prototypes, more details <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/assign">here</a>.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">y</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>_y <span class="token operator">=</span> val <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'do nothing for z'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">let</span> clonedObj <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">get</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'z is undefined'</span><span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token keyword">set</span> <span class="token function">z</span><span class="token punctuation">(</span><span class="token parameter">val</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'set z with the value:'</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">// => Object &#123; x: 1, y: Getter &amp; Setter, z: Getter &amp; Setter &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// => Object &#123; x: 1, y: undefined, z: 3 &#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token operator">...</span>obj<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* * => set z with the value: 3 * => Object &#123; z: Getter &amp; Setter, x: 1, y: undefined &#125; */</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>Object<span class="token punctuation">.</span><span class="token function">assign</span><span class="token punctuation">(</span>clonedObj<span class="token punctuation">,</span> obj<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>Object.assign</code> calls the getter of the source object and the setter of the target object, look at its name <strong>assign</strong>. The spread operator only calls the getter.</p><h3 id="void-operator"><a href="#void-operator" class="headerlink" title="void operator"></a><code>void</code> operator</h3><p><code>void</code> evaluates an expression, then returns <code>undefined</code> no matter the expression returned value.</p><p>If some places need a <code>undefined</code> value, use <code>void</code> ahead of the expressions.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">void</span> expression<span class="token keyword">void</span><span class="token punctuation">(</span>expression<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> val <span class="token operator">=</span> <span class="token keyword">void</span> <span class="token keyword">function</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"val ="</span><span class="token punctuation">,</span> val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => val = undefined</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => ReferenceError: fn is not defined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>fn</code> isn’t a function declaration, it is an expression.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>javascript:void(0);<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This is very common. <code>javascript:</code> is an URI. Click the link not to do URL jumping.</p><p><code>0</code> in <code>void(0)</code> can be replaced by other JavaScript expressions, such as changing the background.</p><h2 id="Expressions"><a href="#Expressions" class="headerlink" title="Expressions"></a>Expressions</h2><h3 id="Expression-evaluation-order"><a href="#Expression-evaluation-order" class="headerlink" title="Expression evaluation order"></a>Expression evaluation order</h3><p>Always left-to-right order.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> z <span class="token operator">=</span> x <span class="token operator">+</span> y<span class="token punctuation">;</span> <span class="token comment">// the evaluation order: z, x, y</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="Destructuring-assignment"><a href="#Destructuring-assignment" class="headerlink" title="Destructuring assignment"></a>Destructuring assignment</h3><h4 id="Array-destructuring"><a href="#Array-destructuring" class="headerlink" title="Array destructuring"></a>Array destructuring</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token punctuation">[</span>one<span class="token operator">=</span><span class="token string">'1'</span><span class="token punctuation">,</span> two<span class="token punctuation">,</span> <span class="token punctuation">,</span> <span class="token operator">...</span>others<span class="token punctuation">]</span> <span class="token operator">=</span> arr<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>one<span class="token punctuation">,</span> two<span class="token punctuation">,</span> others<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1 2 Array [ 4, 5 ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>one</code> has a default value.</p><p><code>3</code> is ignored, the remaining part of the array is assigned to <code>others</code>.</p><h4 id="Object-destructuring"><a href="#Object-destructuring" class="headerlink" title="Object destructuring"></a>Object destructuring</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> obj <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span><span class="token keyword">let</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo<span class="token punctuation">,</span> bar<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => undefined undefined 1 2</span><span class="token comment">// => SyntaxError: redeclaration of let foo</span><span class="token comment">// const &#123;x: foo, y: bar&#125; = obj;</span><span class="token keyword">const</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">x</span><span class="token operator">:</span> foo2<span class="token punctuation">,</span> <span class="token literal-property property">y</span><span class="token operator">:</span> bar2<span class="token punctuation">&#125;</span> <span class="token operator">=</span> obj<span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>foo2<span class="token punctuation">,</span> bar2<span class="token punctuation">,</span> <span class="token string">'foo2'</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1 2 false</span><span class="token comment">// => TypeError: invalid assignment to const `foo2'</span><span class="token comment">// foo2 = 0;</span><span class="token punctuation">&#123;</span>    <span class="token comment">// => SyntaxError: expected expression, got '='</span>    <span class="token comment">// &#123;m, n&#125; = &#123;m: 1, n: 2&#125;;</span>        <span class="token comment">// need the parentheses when destructuring a literal object without the declaration</span>    <span class="token punctuation">(</span><span class="token punctuation">&#123;</span>m<span class="token punctuation">,</span> n<span class="token punctuation">&#125;</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token literal-property property">m</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token literal-property property">n</span><span class="token operator">:</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 1 true</span>        m <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token string">'m'</span> <span class="token keyword">in</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 0 true</span><span class="token keyword">delete</span> m<span class="token punctuation">;</span> <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Type-conversions"><a href="#Type-conversions" class="headerlink" title="Type conversions"></a>Type conversions</h2><p>The primitive-to-primitive and primitive-to-object conversions are straightforward.</p><p>The object-to-primitive conversion is more complicated.</p><h3 id="Implicit-conversions"><a href="#Implicit-conversions" class="headerlink" title="Implicit conversions"></a>Implicit conversions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"0"</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Converting <code>&quot;0&quot;</code> to <code>0</code> before to compare.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">0</span> <span class="token operator">+</span> <span class="token string">""</span>   <span class="token comment">// => "0"</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token string">"0"</span>  <span class="token comment">// => "10"</span><span class="token string">"0"</span> <span class="token operator">+</span> <span class="token number">1</span>  <span class="token comment">// => "01"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>If one operand of the <code>+</code> operator is a string, the result is a string.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"1"</span>       <span class="token comment">// => 0</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"1"</span> <span class="token operator">==</span> <span class="token number">0</span>  <span class="token comment">// => true</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token string">"a"</span>       <span class="token comment">// => NaN</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>These are arithmetic operations.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">+</span><span class="token string">"0"</span>  <span class="token comment">// => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The <code>+</code> operator converts its operand to a number.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">-</span><span class="token string">"1"</span><span class="token punctuation">;</span>    <span class="token comment">// => -1</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token string">"2"</span><span class="token punctuation">;</span><span class="token operator">-</span>x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// => -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>These are arithmetic operations.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token operator">!</span><span class="token number">2</span>    <span class="token comment">// => false</span><span class="token operator">!</span><span class="token string">"0"</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>The <code>!</code> operator converts its operand to a boolean.</p><h3 id="Explicit-conversions"><a href="#Explicit-conversions" class="headerlink" title="Explicit conversions"></a>Explicit conversions</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">parseInt</span><span class="token punctuation">(</span><span class="token string">"123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 123</span><span class="token keyword">const</span> x <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// => "2"</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>   <span class="token comment">// => "10", binary</span>x<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span>  <span class="token comment">// => "2", hexadecimal</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Other global functions like <code>parseInt()</code>: <code>parseFloat()</code>.</p><p>Other methods like <code>toString()</code>: <code>toFixed()</code>, <code>toExponential()</code>, <code>toPrecision()</code>.</p><h4 id="Primitive-to-Object-conversions"><a href="#Primitive-to-Object-conversions" class="headerlink" title="Primitive-to-Object conversions"></a>Primitive-to-Object conversions</h4><p>The Primitive-to-object conversions are straightforward, using wrapper objects: <code>String()</code>, <code>Number()</code>, <code>Boolean()</code>. </p><p>No conversions and raise <code>TypeError</code> when using <code>null</code> and <code>undefined</code> on where an object is expected.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token function">String</span><span class="token punctuation">(</span><span class="token number">123</span><span class="token punctuation">)</span>        <span class="token comment">// => "123"</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token string">"0"</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span>   <span class="token comment">// => true</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token comment">// => Object(), empty object</span><span class="token function">Object</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// => Object(), empty object</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token comment">// => 0</span><span class="token function">Number</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// => NaN</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>       <span class="token comment">// => "null"</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span>  <span class="token comment">// => "undefined"</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">)</span>      <span class="token comment">// => false</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token keyword">undefined</span><span class="token punctuation">)</span> <span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Object-to-Primitive-conversions"><a href="#Object-to-Primitive-conversions" class="headerlink" title="Object-to-Primitive conversions"></a>Object-to-Primitive conversions</h4><p>Converting all objects to <code>true</code>.</p><p>All objects(don’t include web browsers defined objects) inherit <code>toString()</code> and <code>valueOf()</code>. Custom objects could override them.</p><p>The <code>toString()</code> returns a string representing the object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token comment">// => "[object Object]", by default</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// => "1,2,3"</span><span class="token comment">// => "function() &#123;console.log('hello')&#125;"</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>valueOf()</code> returns the primitive value of the object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment">// => Object &#123;  &#125;, return the object itself</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>     <span class="token comment">// => Array(3) [ 1, 2, 3 ], return the array itself</span><span class="token comment">// => function (), return the function itself</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hello'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">String</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => "1", return the wrapped primitive value</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The rules: </p><ul><li><p>To convert an object to a string</p><ol><li>Check <code>toString()</code> returned value, overrided <code>toString()</code> can return any value. If the value is primitive, then convert it to a string(if necessary), done;</li><li>Check <code>valueOf()</code>. If the value is primitive, then convert it to a string(if necessary), done;</li><li>Throw <code>TypeError</code>;</li></ol></li><li><p>To convert an object to a number</p><p>Similar to string, but check <code>valueOf()</code> first, then <code>toString()</code>;</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>   <span class="token comment">// => "1"</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">// => Array [ 1 ], return the array itself</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>          <span class="token comment">// => 2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li></ul><p>The object-to-primitive conversion is an object-to-number conversion first( <code>valueOf()</code> ), then an object-to-string conversion( <code>toString()</code> ).</p><p><code>+</code>, <code>-</code>, <code>*</code>, <code>/</code>, <code>%</code>, <code>==</code>, <code>!=</code>, <code>&lt;</code>, <code>&gt;</code> operators use the object-to-primitive conversion, and use the returned primitive value directly, no further conversion to a number or string.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token number">1</span> <span class="token operator">+</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment">// => "11", object to string</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// => "true"</span><span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">valueOf</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// => true</span><span class="token number">1</span> <span class="token operator">==</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>  <span class="token comment">// => true, object to boolean</span><span class="token number">1</span> <span class="token operator">+</span> <span class="token function">Boolean</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span>   <span class="token comment">// => 2, object to boolean, not string</span><span class="token keyword">const</span> myObject <span class="token operator">=</span> <span class="token punctuation">&#123;</span>  <span class="token function-variable function">toString</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token string">"1"</span> <span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token function-variable function">valueOf</span><span class="token operator">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">return</span> <span class="token number">3</span> <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token number">1</span> <span class="token operator">+</span> myObject   <span class="token comment">// => 4</span><span class="token number">2</span> <span class="token operator">-</span> myObject   <span class="token comment">// => -1</span><span class="token number">3</span> <span class="token operator">!=</span> myObject  <span class="token comment">// => false</span><span class="token number">3</span> <span class="token operator">></span> myObject   <span class="token comment">// => false</span><span class="token number">3</span> <span class="token operator">*</span> myObject   <span class="token comment">// => 9</span><span class="token number">3</span> <span class="token operator">/</span> myObject   <span class="token comment">// => 1</span><span class="token number">3</span> <span class="token operator">%</span> myObject   <span class="token comment">// => 0</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>If either of operands of <code>+</code> is an object, perform the object-to-primitive conversion, then if one of the operands is string, perform string concatenation, otherwise, arithmetic operation. Look at the difference of line 1, line 11.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> now <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Date</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>now <span class="token operator">+</span> <span class="token number">1</span>                <span class="token comment">// return a string</span>now <span class="token operator">==</span> now<span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>Date</code> objects are special, it’s <code>+</code>, <code>==</code>, <code>!=</code> use the object-to-string conversion( <code>toString()</code> ) first, not object-to-number( <code>valueOf()</code> ).</p><h2 id="Control-flow"><a href="#Control-flow" class="headerlink" title="Control flow"></a>Control flow</h2><h3 id="Block-statement"><a href="#Block-statement" class="headerlink" title="Block statement"></a>Block statement</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    StatementList<span class="token punctuation">&#125;</span> <span class="token comment">// no ';'</span><span class="token comment">// OR</span><span class="token literal-property property">LabelIdentifier</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    StatementList<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>In non-strict code, function declarations inside blocks behave strangely. Do not use them. When using <code>let</code> or <code>const</code> to declare variables within a block, the block also defines a block scope, these variables are only visible within the block and hide global or local variables that have the same names.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><code>&#123;&#125;</code> included code is a whole, acts as one statement. Use it anywhere that JavaScript expects a single statement.</p><h3 id="if-else"><a href="#if-else" class="headerlink" title="if...else"></a><code>if...else</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">if</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span>    statement<span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span>   <span class="token comment">// Optional</span>    statement<span class="token comment">/* ... */</span>    <span class="token keyword">else</span>                     <span class="token comment">// Optional</span>    statement     <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="switch"><a href="#switch" class="headerlink" title="switch"></a><code>switch</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">switch</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token literal-property property">value1</span><span class="token operator">:</span>   <span class="token comment">// case expression can be an arbitrary expression</span>        statement    <span class="token comment">/* ... */</span>    <span class="token keyword">case</span> <span class="token literal-property property">valueN</span><span class="token operator">:</span>        statement    <span class="token keyword">default</span><span class="token operator">:</span>       <span class="token comment">// Optional</span>        statement<span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token parameter">x</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// use === operator to match x, not == operator, no type conversions</span>    <span class="token keyword">switch</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">case</span> <span class="token string">'1'</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">default</span><span class="token operator">:</span>  <span class="token comment">// 'default' label can appear anywhere within the switch statement</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">break</span><span class="token punctuation">;</span>        <span class="token keyword">case</span> <span class="token number">1</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// no break, continue executing the following labels until encountering a break or end</span>        <span class="token keyword">case</span> <span class="token string">'2'</span><span class="token operator">:</span>        <span class="token keyword">case</span> <span class="token number">2</span><span class="token operator">:</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => "1"</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => 1 2</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => 2</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => 2</span><span class="token function">testSwitch</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => "default"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">while</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span>    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It is impossible to completely simulate the <code>for</code> loop with <code>while</code>.</p><h3 id="do-while"><a href="#do-while" class="headerlink" title="do...while"></a><code>do...while</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">do</span>    statement          <span class="token comment">// iterating at least once</span><span class="token keyword">while</span> <span class="token punctuation">(</span> expression <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// always be terminated with a semicolon, the while statement doesn't</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h3 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>initialization<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>condition<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token punctuation">[</span>final<span class="token operator">-</span>expression<span class="token punctuation">]</span><span class="token punctuation">)</span>   statement   <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="for-in"><a href="#for-in" class="headerlink" title="for...in"></a><code>for...in</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">in</span> object<span class="token punctuation">)</span>    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>It iterates over all <em>enumerable</em> properties of an object, including <em>inherited enumerable</em> properties.</p><p>Think the object is a list of key-value pairs, <code>for...in</code> returns the keys, not the values.</p><p><code>variable</code> must be an lvalue, may be an existing variable, a <code>var</code>&#x2F;<code>let</code>&#x2F;<code>const</code> declared new variable, or any expression that evaluates to an lvalue.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>               <span class="token keyword">let</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token keyword">in</span> <span class="token string">'123'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// arr is an lvalue</span>    arr<span class="token punctuation">;</span>  <span class="token comment">// => Array(3) [ "0", "1", "2" ]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>object</code> can be any expression that evaluates to an object. To do type conversions and convert the primitive value to its wrapper object.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> v <span class="token keyword">in</span> <span class="token string">'123'</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => "0" "1" "2", convert '123' to String('123')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Only enumerating <em>enumerable</em> properties of an object, not all properties. All properties and methods defined by our code are enumerable.</p><p>Iterating over the properties in an arbitrary order, don’t depend on the order you see, especially to use with an array and may be return non-integer property names(not recommended for array).</p><p>It is best not to add, modify, or remove properties from the object during iteration, no guarantee whether to enumerate the changed properties.</p><p>Most of the time, use <code>for...in</code> to debug.</p><h3 id="for-of"><a href="#for-of" class="headerlink" title="for...of"></a><code>for...of</code></h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">for</span> <span class="token punctuation">(</span>variable <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    statement<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Iterating over <em>iterable</em> objects.</p><p>Similar to <code>for...in</code>, the difference between them:</p><ul><li><code>for...in</code> iterates over the <strong>enumerable</strong> properties of an object, in an arbitrary order;</li><li><code>for...of</code> iterates over values(not keys or properties) of an <strong>iterable</strong> object. An object that implements the <code>@@iterator</code> method is an iterable object, such as <code>String</code>, <code>Array</code>;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">&#123;</span>    <span class="token class-name">Object</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fnOfObject</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">Array</span><span class="token punctuation">.</span>prototype<span class="token punctuation">.</span><span class="token function-variable function">fnOfArray</span> <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">const</span> iterable <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    iterable<span class="token punctuation">.</span>msg <span class="token operator">=</span> <span class="token string">'hello'</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "0" "1" "2" "msg" "fnOfArray" "fnOfObject"</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">in</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>iterable<span class="token punctuation">.</span><span class="token function">hasOwnProperty</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// => "0" "1" "2" "msg"</span>            <span class="token comment">// fnOfArray and fnOfObject are inherited properties, not own properties</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">const</span> i <span class="token keyword">of</span> iterable<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => 3 5 7</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="break"><a href="#break" class="headerlink" title="break"></a><code>break</code></h3><pre class="line-numbers language-none"><code class="language-none">break [label];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>break</code> breaks the current loop, <code>switch</code>, or <code>label</code> statements.</p><p>If a function itself is nested within a loop, <code>switch</code>, or label statements, <code>break</code> cannot be used within the function body to break out of the loop, <code>switch</code>, or label statements.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">blockOne</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">(</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">break</span> blockOne<span class="token punctuation">;</span> <span class="token comment">// => SyntaxError: label not found</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function-variable function">labelFn</span><span class="token operator">:</span> <span class="token keyword">function</span> <span class="token function">testBreakAndLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span> labelFn<span class="token punctuation">;</span>       <span class="token comment">// => SyntaxError: label not found</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'How are you?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token function">testBreakAndLabel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a><code>continue</code></h3><pre class="line-numbers language-none"><code class="language-none">continue [label];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Only to use <code>continue</code> within the body of a loop, with or without <code>label</code>.</p><h3 id="label-statements"><a href="#label-statements" class="headerlink" title="label statements"></a>label statements</h3><pre class="line-numbers language-none"><code class="language-none">label :    statement<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><code>label</code> must be a legal identifier.</p><p>JavaScript has not <code>goto</code> statement like C language. Can only use labels with <code>break</code> and <code>continue</code>.</p><p><code>break</code> can be used with any labeled statement and needs to be nested within the referenced label. It is able to break out of a loop, or <code>switch</code> that is not the nearest one.</p><p><code>continue</code> can be used with looping labeled statements. It is able to restart the loop that is not the nearest one.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token literal-property property">hi</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>             <span class="token comment">// => hi</span>    <span class="token keyword">break</span> hi<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'How are you?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// jump over the statement</span><span class="token punctuation">&#125;</span><span class="token literal-property property">top</span><span class="token operator">:</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> v <span class="token keyword">of</span> <span class="token punctuation">[</span><span class="token string">'hi'</span><span class="token punctuation">,</span> <span class="token string">'hey'</span><span class="token punctuation">,</span> <span class="token string">'hello'</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> v <span class="token operator">==</span> <span class="token string">'hey'</span> <span class="token punctuation">)</span>        <span class="token keyword">continue</span> top<span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => "hi" "hello", skipping "hey"</span><span class="token punctuation">&#125;</span><span class="token literal-property property">blockOne</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span> blockTwo<span class="token punctuation">;</span>  <span class="token comment">// => SyntaxError: label not found, break is not nested within label blockTwo</span><span class="token punctuation">&#125;</span><span class="token literal-property property">blockTwo</span><span class="token operator">:</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="return"><a href="#return" class="headerlink" title="return"></a><code>return</code></h3><pre class="line-numbers language-none"><code class="language-none">return [expression];<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">fn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">/* no return statement */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token function-variable function">fn2</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span> <span class="token comment">/* the return statement hasn't a value */</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => undefined</span><span class="token function">fn2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => undefined</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="try-catch"><a href="#try-catch" class="headerlink" title="try...catch"></a><code>try...catch</code></h3><p>Three forms:</p><pre class="line-numbers language-none"><code class="language-none">try...catchtry...finallytry...catch...finally<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// Nested try-blocks</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// can't miss &#123;&#125;, even only one statement </span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// throw;  // => SyntaxError: throw statement is missing an expression</span>        <span class="token keyword">throw</span> <span class="token string">'oops'</span><span class="token punctuation">;</span>  <span class="token comment">// can be any type of the expression, e.g.: throw 1</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// e is a block-scope variable</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'inner:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// => "inner: oops"</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>  <span class="token comment">// always be executed regardless of what happens in the try block</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner: finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "inner: finally"</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'outer:'</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">try</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'oops'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'inner:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => "inner: oops"</span>        <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'another oops in catch-block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// OR</span>        <span class="token comment">// throw e;  // rethrow the exception</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'inner: finally'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// => "inner: finally"</span>    <span class="token punctuation">&#125;</span>   <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'outer:'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => outer: another oops in catch-block</span><span class="token punctuation">&#125;</span><span class="token keyword">function</span> <span class="token function">testTry</span><span class="token punctuation">(</span><span class="token parameter">toThrow</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'OMG, oops!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Oops in catch-block'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">finally</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// If the finally-block itself causes a jump with a return, continue, break, or throw statement, or by calling another function that throws an exception, no matter whatever happened, performing the new jump.</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>toThrow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">Error</span><span class="token punctuation">(</span><span class="token string">'Oops in finally-blcok'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'No oops, oh, yeah!'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> <span class="token string">'OK'</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        console<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">'What happened?'</span><span class="token punctuation">,</span> e<span class="token punctuation">.</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token string">'NOT OK'</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* output:  OMG, oops!  No oops, oh, yeah!  OK*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">testTry</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">/* output:  OMG, oops!  What happened? Oops in finally-blcok  NOT OK*/</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token function">testTry</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="debugger"><a href="#debugger" class="headerlink" title="debugger"></a><code>debugger</code></h3><pre class="line-numbers language-none"><code class="language-none">debugger<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>If having an available and running debugger (the debugger of DevTools), the statement acts like setting a breakpoint in the debugger, otherwise, do nothing.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">debugger</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'How are you?'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>Run it in the console of DevTools, paused at line 2.</p><p>Run it using Node.js (<code>node testDebugger.js</code>), the statement does nothing.</p><h2 id="Strict-mode"><a href="#Strict-mode" class="headerlink" title="Strict mode"></a>Strict mode</h2><p>Use <code>&#39;use strict&#39;</code> to invoke the strict mode.</p><p><code>&quot;use strict&quot;</code> or <code>&#39;use strict&#39;</code> is a directive, not a statement, appears only at the top of a JavaScript script or a function body before any real statements.</p><p>Don’t do this:</p><ul><li>Concatenating strict code, non-strict code. The result is strict;</li><li>Concatenating non-strict code, strict code. The result is non-strict;</li></ul><p>JavaScript modules are strict by default.</p><p>Code passed to <code>eval()</code> is in strict mode if calling <code>eval()</code> (must call directly) from strict code. Also could use <code>&#39;use strict&#39;</code> directly in <code>eval()</code>.</p><h3 id="Why-to-use"><a href="#Why-to-use" class="headerlink" title="Why to use"></a>Why to use</h3><ul><li><p>Throwing errors instead of some silent errors, fix problems easier;</p></li><li><p>Making things simpler, let JavaScript engine optimize the code better;</p></li><li><p>Writing more secure JavaScript code;</p></li></ul><h3 id="What-changed"><a href="#What-changed" class="headerlink" title="What changed"></a>What changed</h3><ul><li><p>Converting mistakes into errors</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> <span class="token function-variable function">nonStrictFn</span> <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'"this" should be the global object'</span><span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">function</span> <span class="token function">testStrictMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    <span class="token comment">// not a new implicit global variable. Must declare the variable first, then assign</span>    newGlobalVar <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">// => ReferenceError: assignment to undeclared variable newGlobalVar</span>            <span class="token function">nonStrictFn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "this" should be the global object</span>        <span class="token comment">// functions(not methods of objects) in strict mode haven't "this".</span>    <span class="token comment">// Use the feature to determine whether the code is in strict mode.</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'In strict mode? '</span><span class="token punctuation">,</span> <span class="token operator">!</span><span class="token keyword">this</span> <span class="token operator">?</span> <span class="token string">'Yes'</span><span class="token operator">:</span> <span class="token string">'No'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => In strict mode? Yes</span><span class="token punctuation">&#125;</span><span class="token function">testStrictMode</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Making <code>eval()</code> and <code>arguments</code> simpler</p></li></ul><h3 id="eval-in-strict-mode"><a href="#eval-in-strict-mode" class="headerlink" title="eval() in strict mode"></a><code>eval()</code> in strict mode</h3><ul><li><p>Use the environment of the caller within a function, but can’t define new variables in the local or global scope;</p></li><li><p>Has a private environment, defined new variables are in this scope;</p></li><li><p>Can’t redefine <code>eval</code>, it is a keyword;</p></li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token string">"use strict"</span><span class="token punctuation">;</span><span class="token keyword">var</span> x <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">testEval</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> y <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token comment">// hide the global one</span>    <span class="token keyword">var</span> z <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'x += 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// strict mode</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'z += 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// strict mode</span>      <span class="token comment">// eval('k = 1');  // => ReferenceError: assignment to undeclared variable k</span>      <span class="token comment">// strict mode, varInEvalPrivateEnv is only in the private environment of eval</span>    <span class="token function">eval</span><span class="token punctuation">(</span><span class="token string">'var varInEvalPrivateEnv = 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// => ReferenceError: varInEvalPrivateEnv is not defined</span>    <span class="token comment">// console.log('varInEvalPrivateEnv:', varInEvalPrivateEnv);</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local z, should be 2:'</span><span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => local z, should be 2: 2</span>      <span class="token comment">// call eval indirectly, use the global environment, not strict mode</span>    <span class="token keyword">var</span> aliasOfEval <span class="token operator">=</span> eval<span class="token punctuation">;</span>    <span class="token function">aliasOfEval</span><span class="token punctuation">(</span><span class="token string">'y += 1; m = 1'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'local y, should be 1:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => local y, should be 1: 1</span>      <span class="token comment">// eval is a JavaScript keyword now</span>    <span class="token comment">// var eval = 1;   // => SyntaxError: 'eval' can't be defined or assigned to in strict mode code</span><span class="token punctuation">&#125;</span><span class="token function">testEval</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global x, should be 2:'</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global x, should be 2: 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global y, should be 2:'</span><span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global y, should be 2: 2</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'global m, should be 1:'</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => global m, should be 1: 1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="arguments-in-strict-mode"><a href="#arguments-in-strict-mode" class="headerlink" title="arguments in strict mode"></a><code>arguments</code> in strict mode</h3><ul><li>The properties of <code>arguments</code> are not aliases of the arguments of functions;</li><li>Can’t read or set <code>arguments.callee</code>;</li></ul><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x: %d, y: %d'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => x: 1, y: 2</span>    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'a'</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token string">'b'</span><span class="token punctuation">;</span>    <span class="token comment">// arguments[0] is an alias of x, arguments[1] is an alias of y</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x: %s, y: %s'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => x: a, y: b</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>callee<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => function () ...</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">(</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token parameter">x<span class="token punctuation">,</span> y</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token string">'use strict'</span><span class="token punctuation">;</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// => 2</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x: %d, y: %d'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => x: 5, y: 6</span>    arguments<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'c'</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token string">'d'</span><span class="token punctuation">;</span>    <span class="token comment">// arguments[0] isn't an alias of x, arguments[1] is in the same way</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'x: %s, y: %s'</span><span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => x: 5, y: d</span>    <span class="token comment">// => TypeError: 'caller', 'callee', and 'arguments' properties may not be accessed on strict mode functions</span>    <span class="token comment">// console.log(arguments.callee);</span><span class="token punctuation">&#125;</span> <span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Asynchronous-JavaScript"><a href="#Asynchronous-JavaScript" class="headerlink" title="Asynchronous JavaScript"></a>Asynchronous JavaScript</h2><p>Asynchronous approachs:</p><ul><li>Function callbacks;</li><li><code>setTimeout()</code> &#x2F; <code>setInterval()</code> &#x2F; <code>requestAnimationFrame()</code>;</li><li>Promise;</li><li><code>async</code> &#x2F; <code>await</code>;</li><li>Web Workers;</li></ul><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>A <em>Promise</em> is an object representing the eventual completion or failure of an asynchronous operation, the object could be attached callback functions for the success and failure cases.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Using_promises</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/Promise</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/resolve</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise/then</a></p><h3 id="Async-await"><a href="#Async-await" class="headerlink" title="Async &#x2F; await"></a><code>Async</code> &#x2F; <code>await</code></h3><p>Syntactic sugar built on top of <em>promises</em> that allows you to run asynchronous operations using syntax that’s more like writing synchronous callback code.</p><p><code>async</code> could be putted in front of a function declaration or object methods.</p><p><code>await</code> only works inside <code>async</code> functions.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous</a><br><a href="https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await">https://developer.mozilla.org/en-US/docs/Learn/JavaScript/Asynchronous/Async_await</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function</a></p><h2 id="Meta-programming"><a href="#Meta-programming" class="headerlink" title="Meta programming"></a>Meta programming</h2><p>The <code>Proxy</code> and <code>Reflect</code> objects allow you to intercept and define custom behavior for fundamental language operations (e.g. property lookup, assignment, enumeration, function invocation, etc).</p><ul><li><p>Proxy</p><p>To intercept certain operations on an object, these operations are through the proxy first, could add some custom behavior.</p><p>The proxy could be as a prototype object to create new objects. Operations on these new objects are also intercepted.</p></li><li><p>Reflect</p><p>If operations are intercepted, how to invoke original methods of an object? use <code>Reflect</code>.</p><p>In addition:</p><ul><li>let <code>in</code>, <code>delete</code> operators become function calls.</li><li>let some methods that throw exceptions return a boolean value.</li></ul></li></ul><p>Save multiple prototype objects into an array property of an object, then use <code>Proxy</code>, <code>Reflect</code> to intercept method invoking, to implement a non-complicated multiple inheritance.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Meta_programming</a></p><h2 id="JavaScript-modules"><a href="#JavaScript-modules" class="headerlink" title="JavaScript modules"></a>JavaScript modules</h2><p>Use of native JavaScript modules is dependent on the <code>import</code> and <code>export</code> statements. Put different features into different JavaScript files. One file, one module.</p><p>Modules are in <strong>strict</strong> mode.</p><p>Modules are <strong>deferred</strong> automatically, no need to use <strong>defer</strong> attribute in <code>&lt;script&gt;</code> tag.</p><p>Module features aren’t available in the global scope. Therefore, you will only be able to access imported features in the script they are imported into.</p><p>Can’t load modules in local HTML files(<code>file://</code> URL). One is the <em>file</em> protocol, one is the <em>http</em> protocol, will run into <em>CORS</em>, use a http server instead.</p><h3 id="Applying-modules"><a href="#Applying-modules" class="headerlink" title="Applying modules"></a>Applying modules</h3><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup">// in a HTML file<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>module<span class="token punctuation">"</span></span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main.js<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token script"></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Need to include <code>type=&quot;module&quot;</code> in the <code>&lt;script&gt;</code> tag.</p><h3 id="Creating-a-module-object"><a href="#Creating-a-module-object" class="headerlink" title="Creating a module object"></a>Creating a module object</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">as</span> Module <span class="token keyword">from</span> <span class="token string">'./modules/module.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This makes all exports as members of an object <code>Module</code>, creating a namespace which avoids conflicts.</p><h3 id="Classes-1"><a href="#Classes-1" class="headerlink" title="Classes"></a>Classes</h3><p>Could import and export classes. This is another option to avoid conflicts.</p><h3 id="Aggregating-modules"><a href="#Aggregating-modules" class="headerlink" title="Aggregating modules"></a>Aggregating modules</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// shapes.js</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> Square <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./shapes/square.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> Triangle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./shapes/triangle.js'</span><span class="token punctuation">;</span><span class="token keyword">export</span> <span class="token punctuation">&#123;</span> Circle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./shapes/circle.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">import</span> <span class="token punctuation">&#123;</span> Square<span class="token punctuation">,</span> Circle<span class="token punctuation">,</span> Triangle <span class="token punctuation">&#125;</span> <span class="token keyword">from</span> <span class="token string">'./modules/shapes.js'</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>This grabs the exports from three submodules and effectively makes them available from one module <code>shapes.js</code>.</p><h3 id="Dynamic-module-loading"><a href="#Dynamic-module-loading" class="headerlink" title="Dynamic module loading"></a>Dynamic module loading</h3><p>Calling <code>import()</code> as a function, it returns a <code>Promise</code>, to dynamically load modules only when they are needed. Such as calling <code>import()</code> in a click event callback function would only load the module when clicking.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">squareBtn<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">'click'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>    <span class="token keyword">import</span><span class="token punctuation">(</span><span class="token string">'./modules/square.js'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">Module</span><span class="token punctuation">)</span> <span class="token operator">=></span> <span class="token punctuation">&#123;</span>        <span class="token comment">// to access all exports through the Module object</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Other-module-solutions"><a href="#Other-module-solutions" class="headerlink" title="Other module solutions"></a>Other module solutions</h3><h4 id="The-revealing-module-pattern"><a href="#The-revealing-module-pattern" class="headerlink" title="The revealing module pattern"></a>The revealing module pattern</h4><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">var</span> revealingModule <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">var</span> privateVar <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">publicSetName</span><span class="token punctuation">(</span> <span class="token parameter">strName</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        privateVar <span class="token operator">=</span> strName<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">function</span> <span class="token function">publicGetName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> privateVar<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token literal-property property">setName</span><span class="token operator">:</span> publicSetName<span class="token punctuation">,</span>        <span class="token literal-property property">getName</span><span class="token operator">:</span> publicGetName    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>It is a common way using <em>closures</em> to create a private environments as a module.</p><h4 id="CommonJS-and-AMD"><a href="#CommonJS-and-AMD" class="headerlink" title="CommonJS and AMD"></a>CommonJS and AMD</h4><p>The official JavaScript specification defines APIs that are useful for building browser-based applications. CommonJS defines a series of specifications which APIs could handle many common application needs. Module definition is a part of these specifications. AMD(Asynchronous Module Definition) was split from CommonJS, is also a specification which specifies a mechanism for defining modules. The main difference for modules between AMD and CommonJS is that AMD supports asynchronous module loading. Normally, CommonJS modules are used in the server-side, AMD modules are in the browser-side.</p><p>Node.js is one of implementations of CommonJS(in partial form). Node.js also supports native JavaScript modules.</p><p>RequireJS is one of implementations of AMD. </p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export">https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/export</a><br><a href="https://auth0.com/blog/javascript-module-systems-showdown/">https://auth0.com/blog/javascript-module-systems-showdown/</a></p><h2 id="JavaScript-and-HTML"><a href="#JavaScript-and-HTML" class="headerlink" title="JavaScript and HTML"></a>JavaScript and HTML</h2><h3 id="DOM-Document-Object-Model"><a href="#DOM-Document-Object-Model" class="headerlink" title="DOM (Document Object Model)"></a>DOM (Document Object Model)</h3><p>The DOM is a programming interface for HTML and XML, can be implemented by any programming language. </p><p>A Web page is a document, a document consists of a hierarchical tree of nodes, the DOM is an object-oriented representation of the tree which can be modified with JavaScript to change its structure, style, and content.</p><p>The <code>Document</code> object represents a document.</p><p>The <code>Node</code> object represents a node. Having different kind of nodes, element node, text node, comment node, attribute node, etc.</p><p>Nodes are empty vessels, they can’t represent visual content, elements are for this. The <code>Element</code> object represents an element, which inherits from the <code>Node</code> object. HTML has an enhanced <code>HTMLElement</code> object, the <code>HTMLElement</code> object has many specific implementations, such as <code>HTMLImageElement</code> represents the <code>&lt;img&gt; </code> element, <code>HTMLInputElement</code> represents the <code>&lt;input&gt;</code> element. Each node is an HTML element in an HTML document.</p><p>Web API &#x3D; DOM + JavaScript</p><p>HTML element list here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API">https://developer.mozilla.org/en-US/docs/Web/API/HTML_DOM_API</a></p><p>More DOM details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model">https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model</a></p><h3 id="window-object"><a href="#window-object" class="headerlink" title="window object"></a><code>window</code> object</h3><p>We say the global object many times before, the <code>window</code> object is the global object in browsers.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">this</span> <span class="token operator">===</span> window<span class="token punctuation">;</span>  <span class="token comment">// => true</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window">https://developer.mozilla.org/en-US/docs/Web/API/Window</a></p><h3 id="location-object"><a href="#location-object" class="headerlink" title="location object"></a><code>location</code> object</h3><p><code>location</code> is a property of the <code>window</code> object, representing URL info, such as <code>protocol</code>, <code>host</code>, <code>port</code>, <code>href</code> of the current page. Changing properties of the <code>location</code> object lets the browser to apply them and refresh the page.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">location <span class="token operator">===</span> <span class="token keyword">this</span><span class="token punctuation">.</span>location<span class="token punctuation">;</span>  <span class="token comment">// => true</span><span class="token comment">// => Location https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/typeof</span>location<span class="token punctuation">;</span> <span class="token comment">// jump to </span><span class="token comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/instanceof</span>location<span class="token operator">=</span><span class="token string">'instanceof'</span><span class="token punctuation">;</span><span class="token comment">// location.href='instanceof'; // do the same thing</span>location <span class="token operator">=</span> <span class="token string">'https://www.bing.com'</span><span class="token punctuation">;</span> <span class="token comment">// jump to www.bing.com</span><span class="token comment">// jump to </span><span class="token comment">// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Operators/www.bing.com</span><span class="token comment">// location = 'www.bing.com'</span><span class="token comment">/** the following do the same thing * location.href = 'https://www.bing.com'; * location.assign('https://www.bing.com'); * location.replace('https://www.bing.com'); */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="history-object"><a href="#history-object" class="headerlink" title="history object"></a><code>history</code> object</h3><p><code>history.back()</code>&#x2F;<code>history.forward()</code>&#x2F;<code>history.go()</code> likes clicking&#x2F;holding the Back&#x2F;Forward button in the browser toolbar.</p><p><code>history.pushState()</code>&#x2F;<code>history.replaceState()</code> changes the browser history for the current tab or window.</p><p>Events: <code>window.onpopstate</code>, <code>window.popstate</code>, <code>windows.onhashchange</code>, <code>window.hashchange</code> (when changing <code>localtion.hash</code>)</p><h3 id="navigator-object"><a href="#navigator-object" class="headerlink" title="navigator object"></a><code>navigator</code> object</h3><p><code>navigator</code> contains the browser and OS information, such as User-Agent, language, platform, geolocation, keyboard.</p><h3 id="screen-object"><a href="#screen-object" class="headerlink" title="screen object"></a><code>screen</code> object</h3><p><code>screen</code> represents a screen on which the current window is being rendered, including width, height, orientation, color depth, etc.</p><h3 id="Selecting-HTML-elements"><a href="#Selecting-HTML-elements" class="headerlink" title="Selecting HTML elements"></a>Selecting HTML elements</h3><ul><li><p>By <code>id</code></p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return an Element object</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Only can be used by the <code>document</code> object. Any HTML element can have the <code>id</code> attribute.</p></blockquote></li><li><p>By <code>name</code> attribute</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return a live NodeList object</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Only can be used by the <code>document</code> object. The <code>name</code> attribute is only valid on a handful of HTML elements, such <code>button</code>, <code>input</code>;</p></blockquote><blockquote><p>It is deprecated on <code>&lt;img&gt;</code> element.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes">https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes</a></p></blockquote></li><li><p>By tag name </p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Return a live <code>HTMLCollection</code> object. The object is automatically updated when the DOM is changed, no need to call methods which return a <code>HTMLCollection</code> object again to retrieve changes, the <code>NodeList</code> object also;</p></blockquote><blockquote><p>Make a static snapshot using <code>Array.prototype.slice</code> to add or remove elements when iterating through such type of objects;</p></blockquote><blockquote><p>Could replace the <code>document</code> object with a specified Element object, only to search all descendants of the element except itself;</p></blockquote><blockquote><p>Sample code here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName">https://developer.mozilla.org/en-US/docs/Web/API/Element/getElementsByClassName</a>.</p></blockquote><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/** * For historical reason, the document object has shortcut properties to access * some kinds of elements: * document.anchors * document.embeds * document.forms * document.images * document.links * document.plugins * document.scripts * They all are HTMLCollection objects, exposing their members directly as properties * by both names and indexes. * * Other useful properties: * document.head * document.title * document.body * document.cookie * document.documentElement (the &lt;html> element) * document.URL * document.referrer * document.lastModified * document.location * document.domain, could use it to reduce the same-origin restrictions */</span>document<span class="token punctuation">.</span>images<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>tagName<span class="token punctuation">;</span>  <span class="token comment">// => "IMG", HTML's tag names are always upper-case</span>document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// lower-case for compatibility with XHTML</span><span class="token comment">// use a specified Element object</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'content'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">'p'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerHTML<span class="token punctuation">;</span>document<span class="token punctuation">.</span>scripts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerTextdocument<span class="token punctuation">.</span>links<span class="token punctuation">[</span><span class="token string">"skip-main"</span><span class="token punctuation">]</span>document<span class="token punctuation">.</span>links<span class="token punctuation">.</span>skipsearch<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>By <code>class</code> attribute</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">getElementsByClassName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>With <code>class</code> attribute name or names(separated by whitespace);</p></blockquote><blockquote><p>The name or names are case sensitive;</p></blockquote></li><li><p>By CSS selectors</p><p>This is a modern approach to match an element.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment">// only return the first matched element</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// return a non-live NodeList object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><blockquote><p>Could replace the <code>document</code> object with a specified Element object, only to match all descendants of the element except itself;</p></blockquote><blockquote><p>CSS pseudo-elements will never return any elements;</p></blockquote><blockquote><p>When being invoked on an element, the two methods search the whole document first, then filter. Including ancestors of the element within the CSS selector is legal, but it is weird, likes a mistake;</p></blockquote><blockquote><p>Sample code here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll">https://developer.mozilla.org/en-US/docs/Web/API/Element/querySelectorAll</a></p></blockquote></li></ul><h3 id="DOM-traversal"><a href="#DOM-traversal" class="headerlink" title="DOM traversal"></a>DOM traversal</h3><h4 id="As-tree-of-nodes"><a href="#As-tree-of-nodes" class="headerlink" title="As tree of nodes"></a>As tree of nodes</h4><p>Use properties of the <code>Node</code> object:</p><ul><li><code>parentNode</code></li><li><code>childNodes</code></li><li><code>firstChild</code></li><li><code>lastChild</code></li><li><code>nextSibling</code></li><li><code>previousSibling</code></li></ul><h4 id="As-tree-of-elements"><a href="#As-tree-of-elements" class="headerlink" title="As tree of elements"></a>As tree of elements</h4><p>Use properties of the <code>Element</code> object:</p><ul><li><code>children</code></li><li><code>firstElementChild</code></li><li><code>lastElementChild</code></li><li><code>previousElementSibling</code></li><li><code>nextElementSibling</code></li></ul><p>Text and comment nodes are not elements, they are ignored.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h2</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>properties<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Properties<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h2</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The <code>&lt;h2&gt;</code> element is in the traversal path, its text “Properties” won’t be.</p><h3 id="Element-attributes"><a href="#Element-attributes" class="headerlink" title="Element attributes"></a>Element attributes</h3><p>The <code>Element</code> object has an <code>attributes</code> property which is a live collection including all attributes of the element, also have a <code>getAttributeNames()</code> methods which returns all attribute names.</p><h4 id="Standard-HTML-attributes"><a href="#Standard-HTML-attributes" class="headerlink" title="Standard HTML attributes"></a>Standard HTML attributes</h4><p>These attributes are properties of an element, straightforward.</p><p>HTML attributes are not case sensitive, but JavaScript isn’t, the property names are lowercase. A few HTML properties are longer than one word, such as <code>http-equiv</code>, converting them to the style: <code>propNameLikeThis</code>.</p><p>If HTML attribute names are JavaScript reserved words, prefixing them with <code>html</code>, but <code>class</code> is an exception, it is <code>className</code>, not <code>htmlClass</code>.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myMeta<span class="token punctuation">"</span></span> <span class="token attr-name">http-equiv</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>X-UA-Compatible<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>IE=Edge<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>myLabel<span class="token punctuation">"</span></span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>main-q<span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>visually-hidden<span class="token punctuation">"</span></span> <span class="token attr-name">draggable</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>false<span class="token punctuation">"</span></span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>Search MDN<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>...<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myMeta'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>httpEquiv<span class="token punctuation">;</span>  <span class="token comment">// => "X-UA-Compatible"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>htmlFor<span class="token punctuation">;</span>   <span class="token comment">// => "main-q"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>for<span class="token punctuation">;</span>       <span class="token comment">// => undefined, for is a reserved word</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>htmlClass<span class="token punctuation">;</span> <span class="token comment">// => undefined</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>className<span class="token punctuation">;</span> <span class="token comment">// => "visually-hidden"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>draggable<span class="token punctuation">;</span> <span class="token comment">// => false, convert it to a boolean, numbers also</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#myLabel'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>style<span class="token punctuation">;</span>     <span class="token comment">// => CSS2Properties(0), an object</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="Non-standard-HTML-attributes"><a href="#Non-standard-HTML-attributes" class="headerlink" title="Non-standard HTML attributes"></a>Non-standard HTML attributes</h4><p>Use methods:</p><ul><li><code>getAttribute()</code></li><li><code>hasAttribute()</code></li><li><code>setAttribute()</code></li><li><code>removeAttribute()</code></li></ul><p><code>getAttribute()</code> returns a string, or <code>null</code>, or <code>&quot;&quot;</code>.</p><p>Use <code>hasAttribute()</code> to check for an attribute’s existence, not the return value of <code>getAttribute()</code>.</p><p><code>setAttribute()</code> always converts its argument value to a string. It doesn’t care about boolean attributes’ actual value, they’re present, they’re <code>true</code>, we can just set their value to <code>&quot;&quot;</code>.</p><p><code>removeAttribute()</code> can be used to remove a standard attribute, but it just empties its value in Javascript, the HTML attribute in the web page will disappear.</p><h4 id="data-attributes"><a href="#data-attributes" class="headerlink" title="data-* attributes"></a><code>data-*</code> attributes</h4><p>HTML5 defines a standard way to attach additional data. Any attribute whose name is lowercase and begins with the prefix <code>data-</code> is a valid custom data attribute. e.g.</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name">data-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Technologies<span class="token punctuation">"</span></span> <span class="token attr-name">role</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>menuitem<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Valid custom data attribute names can only include lowercase letters, numbers, dash(<code>-</code>), underscore(<code>_</code>), dot(<code>.</code>), colon(<code>:</code>).</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>li</span> <span class="token attr-name"><span class="token namespace">data-abc:</span>123-efg_-h32.hi</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">'</span>1<span class="token punctuation">'</span></span> <span class="token attr-name">data-item</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>Tech<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>The property name in JavaScript is <code>abc:123Efg_H32.hi</code>, removing <code>data-</code> and dashes, the letters that follow a dash are transformed into its uppercase.</p><p>The <code>dataset</code> property is a <code>DOMStringMap</code> which stores all custom data attributes of the element and<br>is live, the property itself is read-only, but can read, write, delete its members.</p><p>Each property in <code>dataset</code> is always a string.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// => DOMStringMap &#123; "abc:123Efg_H32.hi" → "1", item → "Tech" &#125;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>item<span class="token punctuation">;</span>  <span class="token comment">// => "Tech"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">[</span><span class="token string">"abc:123Efg_H32.hi"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token comment">// => "1"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getAttribute</span><span class="token punctuation">(</span><span class="token string">'data-abc:123-efg_-h32.hi'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// => "1"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// do nothing, read-only</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>item <span class="token operator">=</span> <span class="token string">"Technologies"</span><span class="token punctuation">;</span><span class="token keyword">delete</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'li'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">.</span>item<span class="token punctuation">;</span><span class="token string">'item'</span> <span class="token keyword">in</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'meta'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>dataset<span class="token punctuation">;</span>  <span class="token comment">// => false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Notes:</p><ul><li>Don’t store content that should be visible and accessible in data attributes;</li><li>Poor read performance;</li></ul><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes">https://developer.mozilla.org/en-US/docs/Learn/HTML/Howto/Use_data_attributes</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/dataset">https://developer.mozilla.org/en-US/docs/Web/API/HTMLOrForeignElement/dataset</a><br><a href="https://bugzilla.mozilla.org/show_bug.cgi?id=802157">https://bugzilla.mozilla.org/show_bug.cgi?id=802157</a> </p><h3 id="Element-content"><a href="#Element-content" class="headerlink" title="Element content"></a>Element content</h3><h4 id="As-HTML"><a href="#As-HTML" class="headerlink" title="As HTML"></a>As HTML</h4><ul><li><code>innerHTML</code> property. It gets or replaces the HTML code contained within the element;</li><li><code>outerHTML</code> property. Like <code>innerHTML</code>, but applying to the element itself and its descendants;</li><li><code>insertAdjacentHTML()</code> method. Inserting HTML code;</li></ul><p>If an element has no parent element, setting its <code>outerHTML</code> property does nothing.</p><p>The markup and formatting of the returned HTML by <code>innerHTML</code> or <code>outerHTML</code> is likely not to match the original page markup.</p><p>HTML5 doesn’t execute <code>&lt;script&gt;</code> tag in <code>innerHTML</code> and <code>outerHTML</code>, but there are still other ways to execute JavaScript, don’t use them to insert untrusted HTML code or plain text (use <code>textContent</code> property instead).</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML">https://developer.mozilla.org/en-US/docs/Web/API/Element/innerHTML</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML">https://developer.mozilla.org/en-US/docs/Web/API/Element/outerHTML</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML">https://developer.mozilla.org/en-US/docs/Web/API/Element/insertAdjacentHTML</a></p><h4 id="As-plain-text"><a href="#As-plain-text" class="headerlink" title="As plain text"></a>As plain text</h4><ul><li><code>textContent</code> property. It gets the text content of an element and its descendants, or replaces them with a single text node;</li><li><code>innerText</code> property. Like <code>textContent</code>, but the text is <em>rendered</em>;</li></ul><p><code>textContent</code> returns concatenated text which is like <code>innerHTML</code> returned HTML code, but stripping all HTML tags, so ignores <code>&lt;br&gt;</code>, a newline is gone, but preserves tabs and spaces that are within these tags. It gets the content of all elements, including <code>&lt;script&gt;</code> and <code>&lt;style&gt;</code> elements.</p><p><code>innerText</code> returns concatenated text which is like we highlight an area of a web page with the cursor and then copy it, only shows <em>human-readable</em> elements, no <code>&lt;script&gt;</code>, <code>&lt;style&gt;</code> and hidden (e.g. <code>display:none</code>) elements, these elements are not rendered.</p><p>The returned values by <code>textContent</code> and <code>innerText</code> are same if the element is not rendered, such as:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// => true</span>document<span class="token punctuation">.</span>scripts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>innerText <span class="token operator">===</span> document<span class="token punctuation">.</span>scripts<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>textContent<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent">https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent</a></p><h3 id="Text-in"><a href="#Text-in" class="headerlink" title="Text in &lt;script&gt;"></a>Text in <code>&lt;script&gt;</code></h3><p>Could embed arbitrary text into <code>&lt;script&gt;</code>, just set an invalid MIME type, to make the script non-executable.</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">let</span> noexesrc <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noexesrc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'id'</span><span class="token punctuation">,</span> <span class="token string">'whoknows'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>noexesrc<span class="token punctuation">.</span><span class="token function">setAttribute</span><span class="token punctuation">(</span><span class="token string">'type'</span><span class="token punctuation">,</span> <span class="token string">'text/x-whoknows'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// invalid MIME type</span>noexesrc<span class="token punctuation">.</span>text<span class="token operator">=</span><span class="token string">'alert("Yeah")'</span><span class="token punctuation">;</span>document<span class="token punctuation">.</span>body<span class="token punctuation">.</span><span class="token function">appendChild</span><span class="token punctuation">(</span>noexesrc<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// should be no popup dialog</span><span class="token comment">// => "alert(\"Yeah\")"</span>document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#whoknows'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>text<span class="token punctuation">;</span>  <span class="token comment">// text property is same to textContent</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="DOM-tree-manipulation"><a href="#DOM-tree-manipulation" class="headerlink" title="DOM tree manipulation"></a>DOM tree manipulation</h3><h4 id="Creating-nodes"><a href="#Creating-nodes" class="headerlink" title="Creating nodes"></a>Creating nodes</h4><p>Methods in the <code>Document</code> object:</p><ul><li><code>createElement()</code></li><li><code>createTextNode()</code></li><li><code>createDocumentFragment()</code></li><li><code>createAttribute()</code></li><li><code>createComment()</code></li><li><code>importNode()</code></li><li><code>adoptNode()</code></li></ul><blockquote><p><code>createDocumentFragment()</code> returns a <code>DocumentFragment</code> object that is a mini <code>Document</code> object and has no parent. A common use is to assemble a DOM subtree within the <code>DocumentFragment</code> object, then put the subtree (not the <code>DocumentFragment</code> object itself) into current active DOM tree, this will empty the object, it likes a temporary nodes container.</p></blockquote><p>Methods in the <code>Node</code> object:</p><ul><li><p><code>cloneNode()</code></p><blockquote><p>Cloned node has a same id attribute, should modify it manually if it exists.</p></blockquote></li></ul><h4 id="Inserting-nodes"><a href="#Inserting-nodes" class="headerlink" title="Inserting nodes"></a>Inserting nodes</h4><p>Methods in the <code>Node</code> object:</p><ul><li><code>appendChild()</code></li><li><code>insertBefore()</code></li><li><code>replaceChild()</code></li></ul><blockquote><p>Invoke these methods on the parent node and pass the child node to them.</p></blockquote><h4 id="Deleting-nodes"><a href="#Deleting-nodes" class="headerlink" title="Deleting nodes"></a>Deleting nodes</h4><p>Methods in the <code>Node</code> object:</p><ul><li><p><code>removeChild()</code></p><blockquote><p>Invoke the method on the parent node and pass the child node to it.</p></blockquote></li></ul><h3 id="Element-coordinates"><a href="#Element-coordinates" class="headerlink" title="Element coordinates"></a>Element coordinates</h3><p>Document Coordinates: a point <code>(x, y)</code> of an element is relative to the top-left corner of the document.</p><p>Viewport Coordinates: a point <code>(x, y)</code> of an element is relative to the top-left corner of the viewport, the viewport is the portion of the browser window that actually displays document content, excluding browser menus, toolbars.</p><p>width, height of the document</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetWidthdocument<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>offsetHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>width, height of the viewport</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript">window<span class="token punctuation">.</span>innerWidthwindow<span class="token punctuation">.</span>innerHeight<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Properties in the <code>Window</code> object:</p><ul><li><p><code>innerWidth</code></p></li><li><p><code>innerHeight</code></p><blockquote><p>The two properties’ value include scrollbars and borders.</p></blockquote></li><li><p><code>scrollX</code> (alias: <code>pageXOffset</code>, for compatibility)</p></li><li><p><code>scrollY</code> (alias: <code>pageYOffset</code>, for compatibility)</p><blockquote><p>Return the number of pixels that the document is currently scrolled horizontally or vertically.</p></blockquote></li></ul><p>Methods in the <code>Window</code> object:</p><ul><li><code>scroll()</code></li><li><code>scrollBy()</code></li><li><code>scrollTo()</code></li></ul><p>Properties in the <code>Element</code> object:</p><ul><li><p><code>clientWidth</code></p></li><li><p><code>clientHeight</code></p><blockquote><p>Return inner width, height of an element, including padding but excluding borders, margins, and scrollbars (if present). Scrollbars’ position are between padding and borders;</p></blockquote><blockquote><p>When they are used on the root element, they are width, height of the viewport, excluding scrollbars;</p></blockquote><blockquote><p>They return <code>0</code> for elements with no CSS or inline layout boxes.</p></blockquote></li><li><p><code>scrollWidth</code></p></li><li><p><code>scrollHeight</code></p><blockquote><p>Minimum required width, height of an element to show without scrollbars, measured like <code>clientWidth</code>, <code>clientHeight</code>, but including width, height of pseudo-elements;</p></blockquote><blockquote><p>Don’t need a horizontal scrollbar if <code>clientWidth == scrollWidth</code>, the vertical scrollbar also.</p></blockquote></li><li><p><code>scrollLeft</code></p></li><li><p><code>scrollTop</code></p><blockquote><p>Get or set the number of pixels that an element’s content is scrolled horizontally or vertically.</p></blockquote></li></ul><p>Methods in the <code>Element</code> object:</p><ul><li><p><code>scroll()</code></p></li><li><p><code>scrollBy()</code></p></li><li><p><code>scrollIntoView()</code></p><blockquote><p>Scroll to the element;</p></blockquote><blockquote><p>Another way is to mark an anchor on the element, then change <code>location.hash</code> to the anchor;</p></blockquote></li><li><p><code>scrollTo()</code></p></li><li><p><code>getBoundingClientRect()</code></p><blockquote><p>Returns the size of an element and its position relative to the viewport. The position includes padding and borders, no margins. The returned value is the union of the rectangles returned by <code>getClientRects()</code>.</p></blockquote><blockquote><p>To convert the viewport coordinates to the document coordinates:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token keyword">const</span> box <span class="token operator">=</span> e<span class="token punctuation">.</span><span class="token function">getBoundingClientRect</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> x <span class="token operator">=</span> box<span class="token punctuation">.</span>left <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollX<span class="token punctuation">;</span><span class="token keyword">const</span> y <span class="token operator">=</span> box<span class="token punctuation">.</span>top <span class="token operator">+</span> window<span class="token punctuation">.</span>scrollY<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></blockquote></li><li><p><code>getClientRects()</code></p><blockquote><p>Like <code>getBoundingClientRect()</code>, but it returns a collection. Inline elements may consist of multiple rectangles, use it to query these individual rectangles.</p></blockquote></li><li><p><code>elementFromPoint()</code></p></li><li><p><code>elementsFromPoint()</code></p><blockquote><p>Return the element or elements at the specified coordinates (relative to the viewport).</p></blockquote></li></ul><p>Properties in the <code>HTMLElement</code> object:</p><ul><li><p><code>offsetWidth</code></p></li><li><p><code>offsetHeight</code></p><blockquote><p>Return width, height of an element, include padding, borders, scrollbars, no margins. They are opposite to <code>clientWidth</code> and <code>clientHeight</code>;</p></blockquote><blockquote><p><code>scrollWidth &gt; offsetWidth</code> while a content overflow is happening.</p></blockquote></li></ul><h3 id="Selected-text"><a href="#Selected-text" class="headerlink" title="Selected text"></a>Selected text</h3><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">// https://developer.mozilla.org/en-US/search?q=querySelector</span><span class="token comment">// the two methods are identical, but they don't work on &lt;textarea> and &lt;input></span><span class="token comment">// => "1,468 documents found for \"querySelector\""</span>window<span class="token punctuation">.</span><span class="token function">getSelection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// document.getSelection().toString();  </span><span class="token keyword">const</span> searchInput <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">querySelector</span><span class="token punctuation">(</span><span class="token string">'#main-q'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// #main-q is the search box</span><span class="token comment">// => "Selector"</span>searchInput<span class="token punctuation">.</span>value<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>searchInput<span class="token punctuation">.</span>selectionStart<span class="token punctuation">,</span> searchInput<span class="token punctuation">.</span>selectionEnd<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Editable-elements"><a href="#Editable-elements" class="headerlink" title="Editable elements"></a>Editable elements</h3><p>Any HTML element can be editable. </p><p><code>document.designMode</code> makes the entire document editable. There is not a corresponding HTML attribute to it.</p><p><code>document.designMode</code> makes it is possible to transform a web page into a simple rich-text editor.</p><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content">https://developer.mozilla.org/en-US/docs/Web/Guide/HTML/Editable_content</a></p><h2 id="JavaScript-and-CSS"><a href="#JavaScript-and-CSS" class="headerlink" title="JavaScript and CSS"></a>JavaScript and CSS</h2><h3 id="How-to-include-CSS"><a href="#How-to-include-CSS" class="headerlink" title="How to include CSS"></a>How to include CSS</h3><ul><li><p>Inline stylesheet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>h1</span> <span class="token special-attr"><span class="token attr-name">style</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span><span class="token value css language-css"><span class="token property">color</span><span class="token punctuation">:</span>red</span><span class="token punctuation">"</span></span></span><span class="token punctuation">></span></span>typeof<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>h1</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Using JavaScript</p></li><li><p>Embedded stylesheet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>style</span><span class="token punctuation">></span></span><span class="token style"><span class="token language-css">        <span class="token selector">h1</span> <span class="token punctuation">&#123;</span>            <span class="token property">color</span><span class="token punctuation">:</span> red        <span class="token punctuation">&#125;</span>    </span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>style</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>Linked external stylesheet</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>style.css<span class="token punctuation">"</span></span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>stylesheet<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li><p>Imported stylesheet</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token atrule"><span class="token rule">@import</span> <span class="token string">'custom.css'</span><span class="token punctuation">;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p>The styles which reside closest to the HTML tag will take the precedence, the above sequence is also the precedence order, JavaScript generated styles are same as the inline stylesheet.</p><h3 id="Comments-1"><a href="#Comments-1" class="headerlink" title="Comments"></a>Comments</h3><p>Comments in CSS begin with <code>/*</code> and end with <code>*/</code>.</p><h3 id="Margin-and-padding"><a href="#Margin-and-padding" class="headerlink" title="Margin and padding"></a>Margin and padding</h3><ul><li><code>margin</code> specifies space outside the border. It provides visual space between an element and its neighbors in the normal document flow;</li><li><code>padding</code> specifies space inside the border. The space is between the border and the element content;</li><li>No border, <code>padding</code> is not necessary. <code>margin</code> is irrelevant if the element is dynamically positioned;</li></ul><h3 id="How-to-scripting-CSS"><a href="#How-to-scripting-CSS" class="headerlink" title="How to scripting CSS"></a>How to scripting CSS</h3><h4 id="With-the-style-property"><a href="#With-the-style-property" class="headerlink" title="With the style property"></a>With the <code>style</code> property</h4><p>The property is used to get as well as set the <strong>inline style</strong> of an element. The returned object is read-only, but can set value to its properties, all values must be string. Getting or setting the inline style as a single string to use <code>elt.setAttribute()</code> or <code>elt.style.cssText</code>(<code>elt</code> is an element object).</p><p>Will get nothing if the element hasn’t inline styles, only has value if setting it by JavaScript code before or the element has inline styles. In general, only useful for setting styles.</p><p>Setting a property of the style object to <code>null</code> or <code>&quot;&quot;</code> will reset it, prefer <code>&quot;&quot;</code>.</p><p>CSS properties in JavaScript:</p><pre class="line-numbers language-javascript" data-language="javascript"><code class="language-javascript"><span class="token comment">/* like font-size */</span>elt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>fontSize<span class="token comment">/* like float, float is a reserved word */</span>elt<span class="token punctuation">.</span>style<span class="token punctuation">.</span>cssFloat<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style">https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement/style</a><br><a href="https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information">https://developer.mozilla.org/en-US/docs/Web/API/CSS_Object_Model/Using_dynamic_styling_information</a></p><p><code>Window.getComputedStyle()</code></p><blockquote><p>Use it to query the styles that actually apply to the element.</p></blockquote><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle">https://developer.mozilla.org/en-US/docs/Web/API/Window/getComputedStyle</a></p><h4 id="With-CSS-classes"><a href="#With-CSS-classes" class="headerlink" title="With CSS classes"></a>With CSS classes</h4><p>Two properties of the <code>Element</code> object:</p><ul><li><code>className</code>. It is the HTML <code>class</code> attribute, <code>class</code> is a reserved word in JavaScript;</li><li><code>classList</code>. It is a live collection, including <code>add()</code>, <code>remove()</code>, <code>toggle()</code>, <code>replace()</code> methods;</li></ul><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/Element/classList">https://developer.mozilla.org/en-US/docs/Web/API/Element/classList</a></p><h2 id="Web-components"><a href="#Web-components" class="headerlink" title="Web components"></a>Web components</h2><p>Web Components is a suite of different technologies to create reusable custom elements with encapsulated functionality.</p><p>It consists of three main technologies:</p><ul><li>Custom elements</li><li>Shadow DOM</li><li>HTML templates</li></ul><p>More details here:<br><a href="https://developer.mozilla.org/en-US/docs/Web/Web_components">https://developer.mozilla.org/en-US/docs/Web/Web_components</a></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Make a Right Choice among Java Collections</title>
      <link href="/2018/12/17/make-a-right-choice-among-java-collections/"/>
      <url>/2018/12/17/make-a-right-choice-among-java-collections/</url>
      
        <content type="html"><![CDATA[<p><img src="/images/java-collections.png" alt="Java Collections"></p><span id="more"></span><p>This figure doesn’t show all inheritance information, such as, LinkedList also extends Deque interface;</p><p>The primary purpose is to choose a right data structure when do Java programming.</p><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>Java 8</p><h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><blockquote><p>Base on bucket + list&#x2F;red-black tree, if the list size of a bucket is greater than 8, the list will be converted to a red-black tree;</p></blockquote><blockquote><p>Don’t set a too high capacity if iteration performance is important, figure out a sufficiently large capacity will allow key-value pairs to be stored more efficiently than resizing the hash table;</p></blockquote><blockquote><p>Unordered, not thread-safe, fail-fast iterator(no guarantees);</p></blockquote><blockquote><p>Permits null keys and values;</p></blockquote><h2 id="LinkedHashMap"><a href="#LinkedHashMap" class="headerlink" title="LinkedHashMap"></a>LinkedHashMap</h2><blockquote><p>Like HashMap, but maintains a doubly-linked list to make the map entries are in insertion order;</p></blockquote><blockquote><p>A special constructor is provided to support LRU(Least recently used), calling the get and put methods will make the key appear in the tail of the doubly-linked list;</p></blockquote><h2 id="ConcurrentHashMap"><a href="#ConcurrentHashMap" class="headerlink" title="ConcurrentHashMap"></a>ConcurrentHashMap</h2><blockquote><p>Same functional specification as Hashtable;</p></blockquote><blockquote><p>Base on bucket + list&#x2F;red-black tree, like HashMap, <a href="http://en.wikipedia.org/wiki/Compare-and-swap">CAS algo</a>, no read lock, don’t lock the entire table;</p></blockquote><blockquote><p>Iterators are designed to be used by only one thread at a time, the results of aggregate status methods including size, isEmpty, and containsValue are typically useful only when a map is not undergoing concurrent updates in other threads;</p></blockquote><blockquote><p>Resizing may be a relatively slow operation, estimate a appropriate hash table size;</p></blockquote><blockquote><p>Unordered, no null keys or values, thread-safe, fail-safe iterator;</p></blockquote><h2 id="ConcurrentSkipListMap"><a href="#ConcurrentSkipListMap" class="headerlink" title="ConcurrentSkipListMap"></a>ConcurrentSkipListMap</h2><blockquote><p>Base on <a href="http://en.wikipedia.org/wiki/Skip_list">SkipLists</a>, space-time tradeoff, appropriate for massive data access;</p></blockquote><blockquote><p><strong>It is sorted</strong>, natural order or defined by a Comparator, ascending key ordered views and their iterators are faster than descending ones;</p></blockquote><blockquote><p>The size method is  inaccurate, the bulk operations putAll, equals, toArray, containsValue, and clear are not guaranteed to be performed atomically;</p></blockquote><blockquote><p>O(log(n)), thread-safe, no null keys or values;</p></blockquote><h2 id="TreeMap"><a href="#TreeMap" class="headerlink" title="TreeMap"></a>TreeMap</h2><blockquote><p>Base on red-black tree, O(log(n)), ordered, not thread-safe, fail-fast iterator;</p></blockquote><blockquote><p>Natural order or defined by a Comparator;</p></blockquote><h2 id="WeakHashMap"><a href="#WeakHashMap" class="headerlink" title="WeakHashMap"></a>WeakHashMap</h2><blockquote><p>Hash table based implementation of the Map interface;</p></blockquote><blockquote><p>An entry in a WeakHashMap will automatically be removed when its key is no longer in ordinary use. The value objects in a WeakHashMap are held by ordinary strong references;</p></blockquote><blockquote><p>Permits null keys and values;</p></blockquote><blockquote><p>Not thread-safe, fail-fast iterator;</p></blockquote><h2 id="EnumMap"><a href="#EnumMap" class="headerlink" title="EnumMap"></a>EnumMap</h2><blockquote><p>An array accessed with enum’s ordinal value as an index. There is no need to calculate hash codes or resolve collisions;</p></blockquote><blockquote><p>Enum maps are maintained in the natural order of their keys (the order in which the enum constants are declared);</p></blockquote><blockquote><p>Iterators returned by the collection views are weakly consistent: they will never throw ConcurrentModificationException and they may or may not show the effects of any modifications to the map that occur while the iteration is in progress;</p></blockquote><blockquote><p>No null keys, permits null values;</p></blockquote><blockquote><p>Not thread-safe, O(1);</p></blockquote><h2 id="LinkedList"><a href="#LinkedList" class="headerlink" title="LinkedList"></a>LinkedList</h2><blockquote><p>A doubly-linked list, insertion and deletion are fast;</p></blockquote><blockquote><p>Not thread-safe, fail-fast iterator, permits null elements;</p></blockquote><blockquote><p>Also implements Deque interface, slower than ArrayDeque and need more memory for small objects. It can use an index to get an element, remove the current element during iteration and supports null elements, but ArrayDeque can’t;</p></blockquote><h2 id="ArrayList"><a href="#ArrayList" class="headerlink" title="ArrayList"></a>ArrayList</h2><blockquote><p>Base on an array, has List interface</p></blockquote><blockquote><p>Access its elements in constant time by their index, inserting or removing an element may be slow if the array is huge and the inserted or removed element is close to the beginning of the list;</p></blockquote><blockquote><p>In most cases, however, ArrayList outperforms LinkedList. Even elements shifting in ArrayList, while being an O(n) operation, is implemented as a very fast System.arraycopy() call. It can even appear faster than the LinkedList‘s O(1) insertion which requires instantiating a Node object and updating multiple references under the hood. LinkedList also can have a large memory overhead due to a creation of multiple small Node objects;</p></blockquote><blockquote><p>Not thread-safe, fail-fast iterator;</p></blockquote><h2 id="CopyOnWriteArrayList"><a href="#CopyOnWriteArrayList" class="headerlink" title="CopyOnWriteArrayList"></a>CopyOnWriteArrayList</h2><blockquote><p>A variant of ArrayList, thread-safe;</p></blockquote><blockquote><p>Iterator provides a snapshot of the state of the list when the iterator was constructed. No synchronization is needed while traversing the iterator, this array never changes during the lifetime of the iterator. Element-changing operations on iterators themselves (remove, set, and add) are not supported;</p></blockquote><blockquote><p>Perfer reading. Element-changing operations are costly. Don’t block read, but read old value when writing. Be best suited for small size, read-only operations;</p></blockquote><blockquote><p>Permits null keys and values;</p></blockquote><h2 id="Stack"><a href="#Stack" class="headerlink" title="Stack"></a>Stack</h2><blockquote><p>Use Deque’s implementations instead of it, such as ArrayDeque, ConcurrentLinkedDeque;</p></blockquote><h2 id="Vector"><a href="#Vector" class="headerlink" title="Vector"></a>Vector</h2><blockquote><p>Use ArrayList or CopyOnWriteArrayList instead of it;</p></blockquote><h2 id="TreeSet"><a href="#TreeSet" class="headerlink" title="TreeSet"></a>TreeSet</h2><blockquote><p>Based on TreeMap;</p></blockquote><blockquote><p>O(log(n)) time for the basic operations (add, remove and contains);</p></blockquote><blockquote><p>Natural order or defined by a Comparator, not thread-safe, fail-fast iterator;</p></blockquote><h2 id="HashSet"><a href="#HashSet" class="headerlink" title="HashSet"></a>HashSet</h2><blockquote><p>Based on HashMap;</p></blockquote><blockquote><p>Iterating over this set requires time proportional to the sum of the HashSet instance’s size (the number of elements) plus the “capacity” of the backing HashMap instance (the number of buckets). Thus, it’s very important not to set the initial capacity too high (or the load factor too low) if iteration performance is important;</p></blockquote><blockquote><p>Permits null elements, unordered, not thread-safe, fail-fast iterator;</p></blockquote><h2 id="LinkedHashSet"><a href="#LinkedHashSet" class="headerlink" title="LinkedHashSet"></a>LinkedHashSet</h2><blockquote><p> HashSet + doubly-linked list;</p></blockquote><blockquote><p>It provides constant-time performance for the basic operations (add, contains and remove), assuming the hash function disperses elements properly among the buckets. Performance is likely to be just slightly below that of HashSet, due to the added expense of maintaining the linked list, with one exception: Iteration over a LinkedHashSet requires time proportional to the size of the set, regardless of its capacity. Iteration over a HashSet is likely to be more expensive, requiring time proportional to its capacity;</p></blockquote><blockquote><p>Has two parameters that affect its performance: initial capacity and load factor. They are defined precisely as for HashSet. Note, however, that the penalty for choosing an excessively high value for initial capacity is less severe for this class than for HashSet, as iteration times for this class are unaffected by capacity;</p></blockquote><blockquote><p> Permits null elements, insertion-order, not thread-safe, fail-fast iterator;</p></blockquote><h2 id="CopyOnWriteArraySet"><a href="#CopyOnWriteArraySet" class="headerlink" title="CopyOnWriteArraySet"></a>CopyOnWriteArraySet</h2><blockquote><p>Set + CopyOnWriteArrayList;</p></blockquote><h2 id="ConcurrentSkipListSet"><a href="#ConcurrentSkipListSet" class="headerlink" title="ConcurrentSkipListSet"></a>ConcurrentSkipListSet</h2><blockquote><p>Based on ConcurrentSkipListMap, O(log(n));</p></blockquote><h2 id="EnumSet"><a href="#EnumSet" class="headerlink" title="EnumSet"></a>EnumSet</h2><blockquote><p> Are represented internally as bit vectors;</p></blockquote><blockquote><p>The iterator returned by the iterator method traverses the elements in their natural order (the order in which the enum constants are declared);</p></blockquote><blockquote><p>The returned iterator is weakly consistent: it will never throw ConcurrentModificationException and it may or may not show the effects of any modifications to the set that occur while the iteration is in progress;</p></blockquote><blockquote><p>No null elements, not thread-safe, O(1);</p></blockquote><h2 id="BlockingQueue"><a href="#BlockingQueue" class="headerlink" title="BlockingQueue"></a>BlockingQueue</h2><blockquote><p>Insert&#x2F;Remove&#x2F;Examine operations come in four forms: wait, throw an exception, return a special value(null or false), timeout;</p></blockquote><blockquote><p>Support the Collection interface;</p></blockquote><blockquote><p>Primarily for producer-consumer queues;</p></blockquote><blockquote><p>No null elements;</p></blockquote><blockquote><p>Thread-safe;</p></blockquote><blockquote><p>The bulk Collection operations addAll, containsAll, retainAll and removeAll are not necessarily performed atomically unless specified otherwise in an implementation. May fail after adding only some of the elements;</p></blockquote><blockquote><p>remove()&#x2F;clear()&#x2F;contains() functions are O(n);</p></blockquote><h2 id="ArrayBlockingQueue"><a href="#ArrayBlockingQueue" class="headerlink" title="ArrayBlockingQueue"></a>ArrayBlockingQueue</h2><blockquote><p>A bounded BlockingQueue backed by an array, FIFO, thread-safe(ReentrantLock), producer-consumer model, optional fairness policy;</p></blockquote><blockquote><p>Enqueue and dequeue operations are O(1); </p></blockquote><h2 id="PriorityBlockingQueue"><a href="#PriorityBlockingQueue" class="headerlink" title="PriorityBlockingQueue"></a>PriorityBlockingQueue</h2><blockquote><p>A unbounded BlockingQueue, array + priority heap, natural order or defined by a Comparator, thread-safe(ReentrantLock);</p></blockquote><blockquote><p>It is unbounded, doesn’t block put()&#x2F;offer(e, time, unit), might cause OutOfMemoryError;</p></blockquote><blockquote><p>A priority queue relying on natural ordering also does not permit insertion of non-comparable objects (doing so results in ClassCastException);</p></blockquote><blockquote><p>iterator() is not guaranteed to traverse the elements in any particular order;</p></blockquote><blockquote><p>Enqueue and dequeue operations are O(log(n)); </p></blockquote><h2 id="LinkedBlockingQueue"><a href="#LinkedBlockingQueue" class="headerlink" title="LinkedBlockingQueue"></a>LinkedBlockingQueue</h2><blockquote><p>An optionally-bounded blocking queue based on linked nodes, FIFO, thread-safe(ReentrantLock);</p></blockquote><blockquote><p>Linked queues typically have higher throughput than array-based queues but less predictable performance in most concurrent applications;</p></blockquote><blockquote><p>Enqueue and dequeue operations are O(1); </p></blockquote><h2 id="DelayQueue"><a href="#DelayQueue" class="headerlink" title="DelayQueue"></a>DelayQueue</h2><blockquote><p>An unbounded blocking queue;</p></blockquote><blockquote><p>An element can only be taken when its delay has expired;</p></blockquote><h2 id="SynchronousQueue"><a href="#SynchronousQueue" class="headerlink" title="SynchronousQueue"></a>SynchronousQueue</h2><blockquote><p>A blocking queue in which each insert operation must wait for a corresponding remove operation by another thread, and vice versa;</p></blockquote><blockquote><p>Not have any internal capacity, acts as an empty collection, nothing to iterate;</p></blockquote><blockquote><p>Optional fairness policy to guarantee FIFO order;</p></blockquote><h2 id="LinkedTransferQueue"><a href="#LinkedTransferQueue" class="headerlink" title="LinkedTransferQueue"></a>LinkedTransferQueue</h2><blockquote><p>An unbounded TransferQueue(a BlockingQueue) based on linked nodes, producers may wait for consumers to receive elements;</p></blockquote><blockquote><p>FIFO, thread-safe, <a href="http://en.wikipedia.org/wiki/Compare-and-swap">CAS algo</a>;</p></blockquote><blockquote><p>size() is inaccurate;</p></blockquote><blockquote><p>Has a special function, transfer(), which transfers the specified element immediately if there exists a consumer already waiting to receive it (in take() or timed poll), else inserts the specified element at the tail of this queue and waits until the element is received by a consumer. In other worlds, if already have elements in the queue, transfer() will wait all of them to be received first;</p></blockquote><blockquote><p>LinkedBlockingQueue(unbounded) + SynchronousQueue(fairness) + ConcurrentLinkedQueue;</p></blockquote><h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><blockquote><p>An unbounded priority queue based on a priority heap, but has an internal capacity governing the size of an array used to store the elements on the queue;</p></blockquote><blockquote><p>No null elements, not thread-safe;</p></blockquote><blockquote><p>Natural order or defined by a Comparator. The head of this queue is the least element with respect to the specified ordering. Natural ordering also does not permit insertion of non-comparable objects (doing so results in ClassCastException). if use a Comparator, the least element is depend on this Comparator, it may be the minimum or maximum if these elements are numbers;</p></blockquote><blockquote><p>iterator() is not guaranteed to traverse the elements in any particular order;</p></blockquote><blockquote><p>Enqueuing and dequeuing methods are O(log(n)), remove() and contains() are O(n), peek(), element() and size() are O(1);</p></blockquote><h2 id="ConcurrentLinkedQueue"><a href="#ConcurrentLinkedQueue" class="headerlink" title="ConcurrentLinkedQueue"></a>ConcurrentLinkedQueue</h2><blockquote><p>An unbounded thread-safe queue based on linked nodes;</p></blockquote><blockquote><p>FIFO, no null elements, thread-safe, lock-free, <a href="http://en.wikipedia.org/wiki/Compare-and-swap">CAS algo</a>. The thread-safe is relative:</p></blockquote><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>No! need a lock</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">synchronized</span><span class="token punctuation">(</span> queue <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span> <span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>Iterators are weakly consistent;</p></blockquote><blockquote><p>The size method is  inaccurate, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically;</p></blockquote><h2 id="LinkedBlockingDeque"><a href="#LinkedBlockingDeque" class="headerlink" title="LinkedBlockingDeque"></a>LinkedBlockingDeque</h2><blockquote><p>An optionally-bounded blocking deque based on linked nodes, BlockingDeque extends BlockingQueue interface;</p></blockquote><blockquote><p>FIFO, LIFO, thread-safe(ReentrantLock), no null elements;</p></blockquote><blockquote><p>remove(), removeFirstOccurrence(), removeLastOccurrence(), contains(), iterator.remove(), and the bulk operations: O(n), others: O(1);</p></blockquote><h2 id="ArrayDeque"><a href="#ArrayDeque" class="headerlink" title="ArrayDeque"></a>ArrayDeque</h2><blockquote><p>Resizable-array implementation of the Deque interface, has a circular array, the array length is powers of two;</p></blockquote><blockquote><p>FIFO, LIFO, no capacity restrictions, not thread-safe, fail-fast iterator, no null elements;</p></blockquote><blockquote><p>Faster than LinkedList when used as a queue. But allocate enough capacity before use it, otherwise need to enlarge the array and copy data;</p></blockquote><blockquote><p>As a stack instead of Stack;</p></blockquote><h2 id="ConcurrentLinkedDeque"><a href="#ConcurrentLinkedDeque" class="headerlink" title="ConcurrentLinkedDeque"></a>ConcurrentLinkedDeque</h2><blockquote><p>An unbounded concurrent deque based on linked nodes;</p></blockquote><blockquote><p>FIFO, LIFO, no null elements, thread-safe, lock-free;</p></blockquote><blockquote><p>The size method is  inaccurate, the bulk operations addAll, removeAll, retainAll, containsAll, equals, and toArray are not guaranteed to be performed atomically;</p></blockquote><blockquote><p>As a stack instead of Stack;</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 1.1/2 optimization</title>
      <link href="/2018/05/18/http-optimization/"/>
      <url>/2018/05/18/http-optimization/</url>
      
        <content type="html"><![CDATA[<h2 id="Major-features-of-HTTP-1-1-and-HTTP-2"><a href="#Major-features-of-HTTP-1-1-and-HTTP-2" class="headerlink" title="Major features of HTTP&#x2F;1.1 and HTTP&#x2F;2"></a>Major features of HTTP&#x2F;1.1 and HTTP&#x2F;2</h2><p><img src="/images/http.png" alt="HTTP&#x2F;1.1 and HTTP&#x2F;2"></p><span id="more"></span><h2 id="General-optimization"><a href="#General-optimization" class="headerlink" title="General optimization"></a>General optimization</h2><p>These common rules can be applied to HTTP&#x2F;1.1 and HTTP&#x2F;2.</p><ul><li><p>Reduce DNS lookups and latency</p></li><li><p>Make fewer HTTP requests</p><blockquote><p>Concatenate CSS, JS files and use image sprites properly;</p></blockquote></li><li><p>Reuse TCP connections</p></li><li><p>Parallelize requests and responses</p></li><li><p>Add cache-related headers</p></li><li><p>Reduce transferred data</p><blockquote><p>Minify HTML, JS, CSS files, compress other text-based assets;</p></blockquote><blockquote><p>Compress images, such as removing unnecessary metadata, reducing the numbers of colors, using SVG or Icon Font;</p></blockquote><blockquote><p>Use proper image dimensions. different scenarios, different images;</p></blockquote><blockquote><p>Use right image format, such as WebP, BPG;</p></blockquote><blockquote><p>Lazy loading some modules or images&#x2F;videos&#x2F;audio, users may not scroll to these parts, also could consider media queries;</p></blockquote></li><li><p>Inline resource properly</p><blockquote><p>such as JS&#x2F;CSS code, images</p></blockquote></li><li><p>Use CDN or self-built cache system</p><blockquote><p>Caching every cacheable resource;</p></blockquote></li><li><p>Avoid HTTP redirects</p></li><li><p>Eliminate cookies partially or entirely</p></li></ul><p>See also:<br><a href="https://developers.google.com/web/fundamentals/performance/why-performance-matters/">Web performance optimization on the Google Developer website</a></p><h2 id="HTTP-1-1-optimization"><a href="#HTTP-1-1-optimization" class="headerlink" title="HTTP&#x2F;1.1 optimization"></a>HTTP&#x2F;1.1 optimization</h2><ul><li><p>HTTP Pipelining</p><blockquote><p>The default of a HTTP&#x2F;1.1 connection is persistent, but it implies a strict FIFO queue, have <em>head-of-line blocking</em> problems; </p></blockquote><blockquote><p>Pipelining is complex to implement correctly, buggy proxies are still common;</p></blockquote><blockquote><p>Use it very carefully.</p></blockquote></li><li><p>Multiple TCP Connections</p><blockquote><p>Most modern browsers support opening up to six connections per origin(host name + port) usually;</p></blockquote></li><li><p>Domain Sharding</p></li><li><p>Concatenation and Spriting</p><blockquote><p>JS&#x2F;CSS file concatenation and image sprites are so popular in HTTP&#x2F;1.1 scenario;</p></blockquote><blockquote><p>Pros: fewer HTTP requests; fewer transferred HTTP header data; eliminating extra network latency;</p></blockquote><blockquote><p>Cons: extra application complexity (preprocessing, deployment, code); expensive cache invalidations; larger JS&#x2F;CSS files need more parsing, rendering time; Bigger images need more resident memeory on the browser side; more complex update policy;</p></blockquote><blockquote><p>Don’t combine unnecessary resources for the current page;</p></blockquote><blockquote><p>Seperate resources into several bundles according to different purposes, don’t bundling independent resources;</p></blockquote><blockquote><p>Seperate and deliver first-paint critical JS, CSS bundles;</p></blockquote><blockquote><p>Apply them carefully, measure the results, figure out the proper file size, no ideal size;</p></blockquote></li><li><p>Resource inlining </p><blockquote><p>This technique is also popular, mostly embed JS, CSS code and images into a page; </p></blockquote><blockquote><p>Don’t inline resources that being used by multiple pages;</p></blockquote><blockquote><p>Inlining resources that are small, and limited to specific pages. In practice, under 1-2KB are small, resources below this often incur higher HTTP overhead than itself;</p></blockquote><blockquote><p>Don’t inline frequently updated resources;</p></blockquote><blockquote><p>Don’t inline frequently accessed resources, then can use CDN and cache;</p></blockquote><blockquote><p>Base64 encoding has byte expansion as compared with the original resource, increased decoding time;</p></blockquote></li></ul><p>See also:<br><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Connection_management_in_HTTP_1.x">Connection management in HTTP&#x2F;1.x</a><br><a href="https://http2.akamai.com/demo">Akamai HTTP 1.1&#x2F;2 Demo</a></p><h2 id="HTTP-2-optimization"><a href="#HTTP-2-optimization" class="headerlink" title="HTTP&#x2F;2 optimization"></a>HTTP&#x2F;2 optimization</h2><ul><li><p>TCP, TLS Optimizations</p><p>Minimum requirements for the HTTP&#x2F;2 server:</p><blockquote><p>Server should start with a TCP cwnd(Congestion window size) of 10 segments;</p></blockquote><blockquote><p>Server should support TLS with ALPN negotiation;</p></blockquote><blockquote><p>Server should support TLS resumption to minimize handshake latency;</p></blockquote></li><li><p>Remove HTTP&#x2F;1.1 workarounds</p><blockquote><p>No need Pipelining, Multiple TCP connections, Domain Sharding, put resources under a same origin;</p></blockquote><blockquote><p>Concatenation and Spriting are still useful, small files are bad for disk IO, can cache them? take care of your cache system, make it work like you think! don’t remove them aggressively;</p></blockquote><blockquote><p>Resource inlining can be replaced by server push, to improve cache performance, especially in mobile network environment, it have high-cost roundtrips. Sometimes static assets are in CDN, how to push? it is awkward! Only support GET, HEAD methods; No URL fuzzy matching for the Node.js http2stream.pushStream() function at this moment; Don’t support window.fetch(), use XMLHttpRequest; May push already cached resources; don’t remove it aggressively also;</p></blockquote></li></ul><h2 id="Browser-optimization"><a href="#Browser-optimization" class="headerlink" title="Browser optimization"></a>Browser optimization</h2><ul><li><p>DNS prefetch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>dns-prefetch<span class="token punctuation">"</span></span>  <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>It is a hint to the browser, but Chrome always perform it.</p></blockquote></li><li><p>TCP preconnect</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preconnect<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//example.com<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>A hint to the browser that it open a connection to the linked web site in advance, also perform DNS lookups.</p></blockquote></li><li><p>prefetch</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prefetch<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>//other-site.com/images/big.jpeg<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Suggest the browser to fetch the linked resources that will be used in the next navigation&#x2F;page load;</p></blockquote><blockquote><p>Will generally cause the cookies of the prefetched site to be accessed;</p></blockquote><blockquote><p>No same-origin restriction;</p></blockquote><blockquote><p>Has a lower priority than preload, preload is for the current navigation&#x2F;page load;</p></blockquote></li><li><p>preload</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>preload<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>sample.mp4<span class="token punctuation">"</span></span> <span class="token attr-name">as</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>video/mp4<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Tells the browser to download a resource because this resource will be needed later during the current navigation;</p></blockquote><blockquote><p>It is not a suggestion to the browser, is a MUST;</p></blockquote></li><li><p>prerender</p><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>prerender<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>/next-page.html<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><blockquote><p>Suggests that the browser fetch the linked resource in advance, and that it also render the prefetched content offscreen so it can be quickly presented to the user once needed.</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP </tag>
            
            <tag> HTTP/2 </tag>
            
            <tag> Optimization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web开发者的简单颜色指南</title>
      <link href="/2016/04/18/a-simple-web-developer-guide-to-color/"/>
      <url>/2016/04/18/a-simple-web-developer-guide-to-color/</url>
      
        <content type="html"><![CDATA[<p>我从来不是一个颜色理论的爱好者，我想是因为我对它一直不太抱希望。我乐意坐在那儿，拿着色环，选取互补色(complementary colors)、分散的互补色(split-complementary colors)、三色(triad colors)等配色方案，让朋友、家人、客户印象深刻。</p><p>说实话，颜色理论对我很遥远，尝试在项目中使用颜色时我从未发现它有用。有点讽刺，我发现，颜色的选择、运用得越好，背后的理论我越有更好的认识。</p><p>刚起步时理论并没有真正得帮助，对吧？这就是为什么，在这篇文章里，你不会看到一个单一的色环，相反，我会展示一个简单的你能用在下一个Web项目的颜色工作流。</p><span id="more"></span><p>当然，过程中你是在潜意识地学习理论。为了好玩，我建议几个月后回来再重温一下。</p><p>随后你会有更深刻的理解，我保证。</p><p>译者注：</p><p>颜色理论基础相关：<a href="http://www.ruanyifeng.com/blog/2008/07/color_theory.html">关于颜色理论</a>，<a href="http://mmmono.com/item/255724/">三分钟帮你快速入门极简色彩学</a></p><h2 id="选择基本色"><a href="#选择基本色" class="headerlink" title="选择基本色"></a>选择基本色</h2><p>我们总是能看到象<a href="http://www.rit-mcsl.org/fairchild/WhyIsColor/files/ExamplePage.pdf">一千万种颜色</a>这样可笑的事情。想想，一千万种。</p><p>众多颜色中，只需选一种用于我们的品牌，它也是网站的基本色。</p><p>其他颜色均基于基本色，所以这很重要。</p><h3 id="如何选择起始色"><a href="#如何选择起始色" class="headerlink" title="如何选择起始色"></a>如何选择起始色</h3><p>随意选取一种颜色很简单，但我们不这样做。对于任何与客户打交道的项目，你应该尽可能地证明你的选择，不这样，你喜爱的颜色可能与他们喜爱的相抵触。他们是客户，他们付钱，他们会赢。</p><p>不要过虑。确保你有选择的理由，会让你好看点。</p><p><strong>选择起始色的小贴士</strong></p><ul><li><strong>用你有的颜色</strong><br>如果客户有已确立颜色的LOGO，这个颜色通常是你的起始色。</li><li><strong>排除竞争对手的颜色</strong><br>如果你的一个主要竞争对手有一个有影响力的品牌颜色，不要拷贝即使你能改进。</li><li><strong>考虑你的目标受众</strong><br>殡仪馆网站的颜色与儿童俱乐部的是非常不同的。想想谁会使用网站，想让他们有什么样的感受（兴奋，严肃，关爱等）。</li><li><strong>不要落入思维定势</strong><br>如果你为年轻女孩设计网站，不是非要使用粉红色。避免使用老一套来取得认可。</li><li><strong>玩个文字游戏</strong><br>如果你在纠结，写下任何与客户业务相关的词语，这个词语列表应该可以给你一些有关颜色的主意。如果你还是实在纠结，登上讲解颜色的网站，看下哪个最合适。</li></ul><p>现在你心中应该有了一个基本色。它应该是一种简单的颜色，象红色，绿色，蓝色，黄色或粉红色。接下来我们说说色度。</p><p>假设你选择了蓝色（好选择！）</p><h2 id="选择（好的）基本色"><a href="#选择（好的）基本色" class="headerlink" title="选择（好的）基本色"></a>选择（好的）基本色</h2><p>我们象艺术家一样去剽窃，使用其他人的选择，而不是为了寻找一种好色度的蓝色，被Photoshop的颜色拾取器所困扰。</p><p>首先，到<a href="https://dribbble.com/colors/">Dribbble</a>和<a href="http://designspiration.net/">Designspiration</a>，点击它们的”Colors”链接。</p><p>会显示相似的屏幕:<br><img src="/images/01-dribble-designspiration-screenshot-opt.jpg" alt="image"><br><em>使用灵感网站为你的设计寻找一种合适的颜色（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/01-dribble-designspiration-screenshot-opt.jpg">大图</a>）</em></p><p>你可以把这作为寻找一个合适色度的蓝色的下一步。</p><p>对于一个清新、充满活力的品牌，选择一个更浅、更明亮的蓝色（前5个中的一个），对于较商业、严肃一点的，底部的5个是更好的选择。<br><img src="/images/02-color-characteristics-opt.jpg" alt="image"><br><em>不同色度的蓝色有着不同的特质，选择要明智！（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/02-color-characteristics-opt.jpg">大图</a>）</em></p><p>选择一种色度，查看使用这种颜色的网站的实际设计，然后你可以使用<a href="https://css-tricks.com/grabbing-hex-codes-for-colors/">CSS-Tricks的颜色拾取技术</a>从浏览器中提取精确的颜色值。<br><img src="/images/03-dribbble-color-results-opt.jpg" alt="image"><br><em>这么多的蓝色！你的工作就是挑一个最适合你品牌的。简单得很！（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/03-dribbble-color-results-opt.jpg">大图</a>）</em></p><p>你不仅会看到不同版本的基本色，也很容易看到与之匹配的颜色。</p><h2 id="创建色彩衔接的调色板"><a href="#创建色彩衔接的调色板" class="headerlink" title="创建色彩衔接的调色板"></a>创建色彩衔接的调色板</h2><p>好了，你应该有了一个颜色的16进制值。我的是<code>#30c9e8</code>。现在我们使用这个颜色建一个调色板。会比你想像的容易。</p><p>当想到创建配色方案时，你可能有这样的想象：<br><img src="/images/04-colour-lovers-palettes-opt.jpg" alt="image"><br><em>你可能见过这种调色板（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/04-colour-lovers-palettes-opt.jpg">大图</a>）</em></p><p>这种调色板的主要问题是应用到实际设计时不太实际。很多调色板有比你想要的多得多的颜色，尤其是考虑到平均一个配色方案只需要3个中性色：</p><ul><li>白色</li><li>深灰色</li><li>浅灰色（可选）</li></ul><p>如果你试着添加5或6个中性色，就凌乱了。</p><p>真正需要的两种颜色：</p><ul><li>一个基本色（我们的例子中是<code>#30c9e8</code>）</li><li>一个强调色（马上就讲到这个）</li></ul><p>比起大肆使用互补色系，分散互补色系，三色系或其他色系，仅用这5种颜色创建网站，会得到更好的效果。<br><img src="/images/05-simple-color-schemes-opt.jpg" alt="image"><br><em>象<a href="https://thoughtbot.com/">Thoughtbot</a>和<a href="http://tedtoddinsurance.com/">TedTodd</a>，一个好看的网站不需要复杂的配色方案。（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/05-simple-color-schemes-opt.jpg">大图</a>）</em></p><h3 id="寻找强调色"><a href="#寻找强调色" class="headerlink" title="寻找强调色"></a>寻找强调色</h3><p>强调色在网站上会少量使用，通常用在行为召唤（如：购买、下载按钮，译者注）页面元素上，所以需要引人注目。</p><p>下一步，把基本色的16进制值输入<a href="http://paletton.com/">Paletton</a> 的颜色值方框中：<br><img src="/images/06-base-rgb-opt.jpg" alt="image"><br><em>在Paletton上输入你的基本色（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/06-base-rgb-opt.jpg">大图</a>）</em></p><p>这里，可用两种方式找到强调色。</p><p>首先，点击“Add Complementary”按钮，橙色就是你的强调色！<br><img src="/images/07-complimentary-opt.jpg" alt="image"><br><em>Paletton自动生成一个好的强调色（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/07-complimentary-opt.jpg">大图</a>）</em></p><p>或者，如果你不喜欢生成的颜色，可以点击位于顶部的几个按钮来发现更好的。<br><img src="/images/08-triad-opt.jpg" alt="image"><br><em>点击以发现喜欢的色系（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/08-triad-opt.jpg">大图</a>）</em></p><p>就本人而言，我十分喜欢三色系按钮（Triad按钮）生成的红色，所以我会用在我们的配色方案中。Paletton在背后所做的事情当然有科学理论依据，但是，现在先放一放。稍后你会学到其理论，所有的事情都会变得清晰。</p><p>已经有了漂亮的基本色，醒目的强调色，让我们加入白色，因为白色一直都好搭配。下面是我们现在的配色方案：<br><img src="/images/09-color-scheme-opt.jpg" alt="image"><br><em>目前的调色板，正在成形（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/09-color-scheme-opt.jpg">大图</a>）</em></p><p>现在缺失的是一些灰色。</p><h3 id="添加灰色"><a href="#添加灰色" class="headerlink" title="添加灰色"></a>添加灰色</h3><p>我的大多数项目中，我发现两种色度的灰色永远有用，一种是深灰，一种是浅灰。你会经常用到它们。</p><p>深灰一般用于文本，当需要与白色区域有些细微差别时用到浅灰（一般是背景）。</p><p>可以通过两种方式选择灰色：</p><ul><li>再次用到<a href="https://dribbble.com/colors/">Dribbble</a>和<a href="http://designspiration.net/">Designspiration</a>，从之前匹配基本色的搜索结果中找一个不错的灰色。但在搜索条中输入<code>blue website</code>，会有更多有关灰色的结果；</li><li>如果有Photoshop或类似的软件，可以用<a href="http://methodandcraft.com/videos/creating-harmonious-color-schemes">Erica Schoonmaker的技术</a> 和基本色来调和灰色。</li></ul><h3 id="创建和谐的灰色"><a href="#创建和谐的灰色" class="headerlink" title="创建和谐的灰色"></a>创建和谐的灰色</h3><p>为通过Erica的方法取得我们发亮的新和谐灰，先随便选两个默认的灰色，然后采取如下步骤：</p><ol><li>创建两个色度的灰色，<code>#424242</code>和<code>#fafafa</code></li><li>在两个色度上插入一个颜色填充层</li><li>把填充层的颜色改成基本色（<code>#30c9e8</code>）</li><li>设置图层的混合模式为叠加，把不透明度降到5%到40%间（本例是40%）</li><li>使用颜色拾取器并拷贝新的颜色</li></ol><p><em>Vimeo video: <a href="https://vimeo.com/159766011">nice-greys</a></em>, <em>Youtube video(译者加): <a href="https://www.youtube.com/watch?v=tcKR_8FXuuQ">Creating Harmonious Color Schemes</a></em></p><p>我需要指出当叠加的颜色是蓝色时这个方法工作得格外好，对于其他颜色，要么把不透明度降到5%至10%，要么坚持原来的灰色。<br><img src="/images/10-greys-opt.jpg" alt="image"><br><em>挑选调和了基本色的灰色是个造就大不同的小事（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/10-greys-opt.jpg">大图</a>）</em></p><h2 id="瞧！我们做到了！"><a href="#瞧！我们做到了！" class="headerlink" title="瞧！我们做到了！"></a>瞧！我们做到了！</h2><p>我们的配色方案完成了，相信你会感到自豪。<br><img src="/images/11-color-palette-opt.jpg" alt="image"><br><em>漂亮的配色方案，能用了</em>（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/11-color-palette-opt.jpg">大图</a>）</p><h2 id="应用配色方案"><a href="#应用配色方案" class="headerlink" title="应用配色方案"></a>应用配色方案</h2><p>现在我们已经得到了配色方案，到用的时候了。这完全是另一个话题。但为让你有所了解，这里有一个灰度设计稿和一个着色后的版本。</p><p>小贴士：如果你纠结于颜色，一个不错的技巧是先用灰度模式创建网站的布局，弄清层次结构，再试用颜色。<br><img src="/images/12-colour-in-practice-greyscale-opt.jpg" alt="image"><br><em>以灰度模式布局网站有利于应用配色方案</em>（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/12-colour-in-practice-greyscale-opt.jpg">大图</a>）<br><img src="/images/13-color-in-practice-opt.jpg" alt="image"><br><em>着色后的版本</em>（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/13-color-in-practice-opt.jpg">大图</a>）</p><p>如你所见，蓝色是这里的特征色，大面积地使用，也用在图标中。</p><p>我们的强调色，红色，相对于基本色它引人注目，小面积地使用，用在按钮上和图标中。这个红色用的越少，越显得夺目。</p><p>深灰用在文本，LOGO和图标的轮廓。图标中别不放这种颜色，小细节造就大不同。</p><p>背景使用白色和浅灰色。浅灰色根本不需要，但我发现这是另外一个能让网站赏心悦目的小细节。</p><p>当使用颜色和文本时，确保背景和文本有足够的对比是很重要的，这有助于色盲和低视力者阅读你网站上的文字。有许多工具可用于查寻遵守<a href="http://webaim.org/blog/wcag-2-0-and-link-colors/">WCAG准则</a>的颜色。两个流行的工具是<a href="http://webaim.org/resources/contrastchecker/">WebAim Color Contrast Checker</a>和<a href="http://lea.verou.me/">Lea Verou</a>写的<a href="http://leaverou.github.io/contrast-ratio/">Contrast Ratio</a> 。</p><h2 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h2><p>如你所见，除了今天创建的调色板中的颜色，我们真得不需要太多，但也不意味着局限于此！<br><img src="/images/14-color-palette-extended-opt.jpg" alt="image"><br><em>使用上述技术，当你需要时，你能扩展你的调色板来掌控更多的颜色（<a href="https://media-mediatemple.netdna-ssl.com/wp-content/uploads/2016/03/14-color-palette-extended-opt.jpg">大图</a>）</em></p><p>设计时，你或许判定引入更多颜色进调色板是适当的，这绝对可以！只要细心，能用上述步骤找出更多能与你的配色方案一起工作的颜色。</p><p>美妙的地方在于这事你做的越多，选择颜色时你干得越好，你会知道哪些能一起工作，哪些不能。有时上述方法产出的结果不尽于人意，所以随时调整。学习颜色理论，却不见理论，玩儿得开心！</p><p>原文：<a href="https://www.smashingmagazine.com/2016/04/web-developer-guide-color/">A Simple Web Developer’s Guide To Color</a></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Web </tag>
            
            <tag> Translation </tag>
            
            <tag> 翻译 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何使用CSS垂直对齐元素</title>
      <link href="/2016/03/06/how-to-vertically-align-elements-using-css/"/>
      <url>/2016/03/06/how-to-vertically-align-elements-using-css/</url>
      
        <content type="html"><![CDATA[<p>任何一个Web开发人员都会遇到垂直对齐这个老问题。我在Web领域工作了将近一年，已经被客户问了多次“把这个对齐到窗口中央”或“把那个放到那个的中部”。使用CSS容易实现水平对齐：</p><p>对于块级元素（block-level element）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> block<span class="token punctuation">;</span> <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>对于内联元素（inline element，也叫行内元素）</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span> <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>为什么垂直对齐不能这么简单？问题在于网站传统上并不是为了垂直对齐，网页是横向缩放的，高度改变以适应内容。我们幸运的是CSS有多种方法可以绕过这个问题，有些方法好于其他，有些则是十分糟糕，不应该使用。记住这些都是相对的（有时是绝对的），一个可以在某种情况下解决问题的方法可能不能解决另外一种情况的问题。</p><span id="more"></span><h2 id="首先，vertical-align属性"><a href="#首先，vertical-align属性" class="headerlink" title="首先，vertical-align属性"></a>首先，vertical-align属性</h2><p>开发人员都有这个时候：首先发现了<code>vertical-align</code>属性，几分钟后则疑惑它到底有什么含义，特别是在使用这个属性后该死的垂直对齐仍不奏效！！！的确，我们都曾经错误地使用它！</p><p><code>vertical-align</code>属性规定了排成一行的兄弟元素间彼此是如何对齐的。它适用于内联元素（inline element）和table cell元素。</p><p><img src="/images/va-vertical-align.png" alt="The vertical-align property"><br><em><a href="https://codepen.io/edenagency/pen/neDlk/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;neDlk</a>（译者加）</em></p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bc5858<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">.child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #ff933d<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 10px<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#john</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#dave</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 50px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#colin</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#beryl</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 120px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#gertie</span> <span class="token punctuation">&#123;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 35px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p>适用于内联元素时的值：</p><ul><li><p>baseline</p><blockquote><p>将子元素文本的基线（base line）与父元素的基线对齐。想象基线就是带有横线的写作纸上的横线。这是默认值；</p></blockquote></li><li><p>bottom</p><blockquote><p>将子元素的底部与<em><strong>行</strong></em> 的底部对齐；</p></blockquote></li><li><p>middle</p><blockquote><p>将子元素的中心线与父元素的中心线对齐（译者注：元素的中心线比基线高一点）；</p></blockquote></li><li><p>sub</p><blockquote><p>将子元素的基线与父元素的下标基线对齐；</p></blockquote></li><li><p>super</p><blockquote><p>将子元素的基线与父元素的上标基线对齐；</p></blockquote></li><li><p>text-bottom</p><blockquote><p>将子元素的底部与父元素字体的最底部对齐（译者注：即与父元素的文本内容区的最底部对齐）；</p></blockquote></li><li><p>text-top</p><blockquote><p>将子元素的顶部与父元素字体的最顶部对齐（译者注：即与父元素的文本内容区的最顶部对齐）；</p></blockquote></li><li><p>top</p><blockquote><p>将子元素的顶部与<em><strong>行</strong></em> 的顶部对齐；</p></blockquote></li><li><p>length</p><blockquote><p>将子元素文本的基线值设为父元素的基线值加上<em><strong>length</strong></em> 所给定的值；</p></blockquote></li></ul><p>当<code>vertical-align</code>被误用时，<code>vertical-align: middle</code>通常是罪魁祸首，最常见的原因是用在了块级元素上。记住，它仅在<code>inline</code>和<code>inline-block</code>元素上有效。如果用在了块级元素上，所有子元素都会继承它的值。</p><p><code>vertical-align</code>也可用于HTML表格的单元格。适用于单元格时的值：</p><ul><li><p>top</p><blockquote><p>将单元格的内容与单元格的顶部对齐；</p></blockquote></li><li><p>middle</p><blockquote><p>将单元格的内容与单元格的中心对齐；</p></blockquote></li><li><p>bottom</p><blockquote><p>将单元格的内容与单元格的底部对齐；</p></blockquote></li></ul><p>现在清晰了，让我们来看看怎么解决在块级元素上的问题。</p><p>译者注：<code>vertical-align</code>属性的含义和图解也可参考<a href="http://bitsofco.de/the-vertical-align-property/">这里</a></p><p><img src="/images/vertical-align-values-1.png" alt="vertical-align-values-1"><img src="/images/vertical-align-values-2.png" alt="vertical-align-values-2"><em>（译者加）</em></p><h2 id="Line-height"><a href="#Line-height" class="headerlink" title="Line height"></a>Line height</h2><p>这是项简单的技术，你只想中心对齐一行文本时效果很好。也可用于图片，不过这是一种hack，尽量避免使用。</p><p><img src="/images/va-line-height.png" alt="Vertical alignment using line height"><br><em><a href="https://codepen.io/edenagency/pen/GiLdm/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;GiLdm</a>（译者加）</em></p><p>这个例子包含了两个元素，一个是父元素，一个是子元素。<code>line-height</code>设置在子元素上，反过来强制父元素调整到与之相同的高度。注意：为让这项技术凑效，<code>line-height</code>的值必须大于字体大小或图片的高度。为了用在图片上，必须把<code>vertical-align: middle</code>添加到图片元素。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bc5858<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">line-height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p>如我之前所说，这是一种hack，稍后提及能产生同样效果的方法。</p><p><strong>优点：</strong></p><p>容易实现</p><p><strong>缺点：</strong></p><p>只能用于一行文本，当用于文本之外时，它不够正规、不够优雅。</p><h2 id="CSS表格"><a href="#CSS表格" class="headerlink" title="CSS表格"></a>CSS表格</h2><p>是CSS的表格不是HTML的表格。我们可以使用<code>display: table</code>让一个元素表现得像个表格。这些表格属性基于原来的HTML表格元素，且行为一致。</p><p><img src="/images/va-display-table.png" alt="Vertical alignment using css table properties"><br><em><a href="https://codepen.io/edenagency/pen/iwBua/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;iwBua</a>（译者加）</em></p><p>在这个示例中，父元素当作表格（display: table，译者注），子元素作为表格的单元格（display: table-cell，译者注）。<code>vertical-align: middle</code>使单元格完美居中，所有的单元格继承了其父元素的高度。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#bc5858<span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> table-cell<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p><strong>优点：</strong></p><p>完全像HTML表格一样运作，并且语义上正确；<br>不需要定义高度和宽度。</p><p><strong>缺点：</strong></p><p>除非定义了宽度，表格会展开到其内容的宽度；</p><p>如果你在父元素中需要另一个块级元素并且不想把它当成table cell，事情就变得混乱；</p><p>也可以使用HTML表格来实现，然而应该避免使用HTML元素去设计页面的样式，那是CSS的事情，语义上也是错误的，除非你的内容适用于表格，比如列车时刻表。</p><h2 id="绝对定位"><a href="#绝对定位" class="headerlink" title="绝对定位"></a>绝对定位</h2><p>为了使用<code>position: absolute</code>来垂直对齐你选择的元素，需要使用像素或百分比定义一个高度。</p><p><img src="/images/va-position-absolute.png" alt="Vertical alignment using absolute positioning"><br><em><a href="https://codepen.io/edenagency/pen/GuqjD/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;GuqjD</a>（译者加）</em></p><p>有两种方法可居中子元素。第一种选择，如上图所示，用<code>top: 50%</code>下移子元素，用<code>transform: translateY(-50%)</code>上移子元素高度的一半，以致子元素的中心与父元素的位于同一行。也可以使用负值的外边距（margin）实现；第二种选择是把子元素的<code>top</code>, <code>bottom</code>, <code>left</code>, <code>right</code>属性的值均设为<code>0</code>，外边距均设成<code>auto</code>，然而用这种方法我得到过不同的结果，最好还是选择第一种。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span> #bc5858<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">position</span><span class="token punctuation">:</span> relative<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">position</span><span class="token punctuation">:</span> absolute<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">top</span><span class="token punctuation">:</span> 50%<span class="token punctuation">;</span>    <span class="token property">transform</span><span class="token punctuation">:</span> <span class="token function">translateY</span><span class="token punctuation">(</span>-50%<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token property">left</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">right</span><span class="token punctuation">:</span> 0<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 300px<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p><strong>优点：</strong></p><p>尺寸使用百分比能使元素自适应。</p><p><strong>缺点：</strong></p><p>需要定义一个高度，有时这是不可能的；</p><p>如果不止一个子元素，可能有重叠问题，除非它们也是绝对定位。</p><p>你必须记得相对地或绝对地定位你的父元素，否则子元素不会居中。</p><h2 id="幽灵元素"><a href="#幽灵元素" class="headerlink" title="幽灵元素"></a>幽灵元素</h2><p>这项技术最初在CSS Tricks的博客文章<a href="http://css-tricks.com/centering-in-the-unknown/">“Centering in the Unknown”</a>中提及。一个幽灵元素（Ghost Element）用于在父元素中居中子元素。因为幽灵元素被赋于了一个<code>100%</code>的高度，没有必要为父元素或子元素定义高度。当无法知道尺寸时，这是一个理想的方法。</p><p><img src="/images/va-display-table.png" alt="Vertical alignment using the &#39;Ghost Element&#39;"><br><em><a href="https://codepen.io/edenagency/pen/trKAu/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;trKAu</a>（译者加）</em></p><p>如同Chris Coyier在他的博客中提及的，Michal Czernow建议使用一个伪元素作为幽灵元素，不用另加一个<code>div</code>且语义上是正确的。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#bc5858<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 500px<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span>    <span class="token property">padding</span><span class="token punctuation">:</span> 20px<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#parent-container:before</span> <span class="token punctuation">&#123;</span>    <span class="token property">content</span><span class="token punctuation">:</span> <span class="token string">''</span><span class="token punctuation">;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> inline-block<span class="token punctuation">;</span>    <span class="token property">vertical-align</span><span class="token punctuation">:</span> middle<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 75%<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p><strong>优点：</strong></p><p>语义正确。</p><p><strong>缺点：</strong></p><p>完全像CSS表格一样运作，两项技术都不比另一个更好。</p><h2 id="Flexbox"><a href="#Flexbox" class="headerlink" title="Flexbox"></a>Flexbox</h2><p>在CSS家族中Flexbox（CSS3 弹性盒模型）是项相对较新的技术。我不想深入太多细节，有很多细节，所以这里是一个对它是做什么的快速描述。</p><p>根据<a href="http://www.w3.org/TR/2014/WD-css-flexbox-1-20140325/">www.w3.org</a>:</p><p>“在flex布局模型中，flex容器的子元素可以在任一方向展开，并且它们的大小具有相当的弹性，即能增长以填充未使用的空间，也可以缩小以防止溢出父元素。子元素在水平和垂直两个方向的对齐均容易操控。盒子的嵌套（水平的在垂直的中，或者垂直的在水平的中）可以在两个维度上构建布局。”</p><p>总的来说，Flexbox仅适用于小型的可伸缩布局。它很容易均等地（或不均匀地）把子元素分成多行或多列，改变元素流动的方向等等。在一个容器中垂直对齐一个单一元素十分地简单。</p><p><img src="/images/va-display-table.png" alt="Vertical alignment using flexbox"><br><em><a href="https://codepen.io/edenagency/pen/DKCwz/">codepen.io&#x2F;edenagency&#x2F;pen&#x2F;DKCwz</a>（译者加）</em></p><p>当一个父元素从块级元素转变成一个flex元素，它的子元素也自动转变成flex子元素。设置子元素的<code>margin</code>属性为<code>auto</code>将把子元素推向其父元素的中心，添加更多的子元素不会影响它的垂直居中，虽然它会相对于它的兄弟元素重新排列。例如，如果有太多的子元素需要固定在同一行上，并且父元素有<code>flex-wrap: wrap</code>属性，多余的子元素会掉到下一行，所有的子元素均在它们的父元素中居中就像它们是一个整体。</p><pre class="line-numbers language-css" data-language="css"><code class="language-css"><span class="token selector">#parent-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">display</span><span class="token punctuation">:</span> flex<span class="token punctuation">;</span>    <span class="token property">height</span><span class="token punctuation">:</span> 400px<span class="token punctuation">;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 100%<span class="token punctuation">;</span>    <span class="token property">background-color</span><span class="token punctuation">:</span>#bc5858<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> 0 auto<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token selector">#child-container</span> <span class="token punctuation">&#123;</span>    <span class="token property">width</span><span class="token punctuation">:</span> 90%<span class="token punctuation">;</span>    <span class="token property">margin</span><span class="token punctuation">:</span> auto<span class="token punctuation">;</span>    <span class="token property">text-align</span><span class="token punctuation">:</span> center<span class="token punctuation">;</span>    <span class="token property">font-family</span><span class="token punctuation">:</span> helvetica<span class="token punctuation">,</span> arial<span class="token punctuation">,</span> sans-serif<span class="token punctuation">;</span>    <span class="token property">font-weight</span><span class="token punctuation">:</span> 100<span class="token punctuation">;</span>    <span class="token property">color</span><span class="token punctuation">:</span> #fff<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><em>（译者加）</em></p><p><strong>优点：</strong></p><p>Flexbox就是用来解决布局问题，因而对于垂直对齐它是理想的。</p><p><strong>缺点：</strong></p><p>通过使用前缀，它虽然和所有最新的浏览器兼容，但不支持旧版本的浏览器，如：IE9。<br>如果你想了解关于Flexbox的更多信息，看下CSS Tricks的<a href="http://css-tricks.com/snippets/css/a-guide-to-flexbox/">“A Complete Guide to Flexbox”</a>。</p><h2 id="总结-。。。"><a href="#总结-。。。" class="headerlink" title="总结 。。。"></a>总结 。。。</h2><p>有这么多的选择，真是奇怪为什么我们发现垂直对齐还是这么难！不幸的是没有一个最佳解决方案。Flexbox看上去更有前景，唯一的缺点是它与旧版浏览器的兼容性，然而我想一旦规范敲定它会是我们要转向的技术。</p><p>原文：<a href="http://createdineden.com/blog/2014/september/24/a-professional-guide-how-to-vertically-align-elements-using-css/">A Professional Guide: How to Vertically Align Elements Using CSS</a></p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Translation </tag>
            
            <tag> 翻译 </tag>
            
            <tag> CSS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo + Markdown issues</title>
      <link href="/2015/08/01/hexo-markdown-issues/"/>
      <url>/2015/08/01/hexo-markdown-issues/</url>
      
        <content type="html"><![CDATA[<h2 id="Backslash-escapes"><a href="#Backslash-escapes" class="headerlink" title="Backslash escapes"></a>Backslash escapes</h2><p>Hexo installs a plugin <em>hexo-renderer-marked</em> as the default Markdown renderer, but the plugin generates literal characters which are not what you want if have a backslash before these characters, such as <code>scrapy crawl \&lt;spider name\&gt;</code> becomes <code>scrapy crawl \</code>. To fix this issue by replacing <em>hexo-renderer-marked</em> with <em>hexo-renderer-markdown-it</em>.</p><span id="more"></span><h2 id="“Read-More”-link"><a href="#“Read-More”-link" class="headerlink" title="“Read More” link"></a>“Read More” link</h2><p>Normally, we insert <code>&lt;!-- more --&gt;</code> into a post to display its summary, but don’t work if using <em>hexo-renderer-markdown-it</em> with default configuration, <em>hexo-renderer-markdown-it</em> escapes HTML. To fix this issue by appending </p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">markdown</span><span class="token punctuation">:</span>  <span class="token key atrule">render</span><span class="token punctuation">:</span>    <span class="token key atrule">html</span><span class="token punctuation">:</span> <span class="token boolean important">true</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>to <em>Hexo</em>‘s <code>_config.yml</code>.</p>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Using Multiple Spiders in a Scrapy Project</title>
      <link href="/2015/07/27/using-multiple-spiders-in-a-scrapy-project/"/>
      <url>/2015/07/27/using-multiple-spiders-in-a-scrapy-project/</url>
      
        <content type="html"><![CDATA[<p>Different channel’s structure in a websit are similar, sometimes we want to reuse source code and don’t create a <a href="http://scrapy.org/">Scrapy</a> project per channel. This is a tutorial how to use multiple spiders in a Scrapy project.</p><span id="more"></span><h2 id="ENV"><a href="#ENV" class="headerlink" title="ENV"></a>ENV</h2><p>Python: 2.7.5<br>Scrapy: 0.24.2</p><h2 id="Tree-like-directories-of-the-tutorial-project"><a href="#Tree-like-directories-of-the-tutorial-project" class="headerlink" title="Tree-like directories of the tutorial project"></a>Tree-like directories of the tutorial project</h2><p>Source code in GitHub: <a href="https://github.com/lnxpgn/scrapy_multiple_spiders">scrapy_multiple_spiders</a></p><pre class="line-numbers language-none"><code class="language-none">scrapy_multiple_spiders├── commands│   ├── __init__.py│   └── crawl.py└── tutorial    ├── scrapy.cfg    └── tutorial        ├── __init__.py        ├── common_spider.py        ├── items.py        ├── pipelines.py        ├── settings.py        ├── spider_settings        │   ├── __init__.py        │   ├── spider1.py        │   └── spider2.py        └── spiders            ├── __init__.py            ├── spider1.py            └── spider2.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Custom-project-command"><a href="#Custom-project-command" class="headerlink" title="Custom project command"></a>Custom project command</h2><p>In Scrapy, we can add our custom project commands by using the <code>COMMANDS_MODULE</code> setting item in <code>settings.py</code>, then we will custom the standard <code>crawl</code> command.</p><p>When calling <code>scrapy crawl &lt;spider name&gt;</code>, the <code>run</code> function within <code>scrapy.commands.crawl.Command</code> is the entrance.</p><p>The following code inherits <code>scrapy.commands.crawl.Command</code> and overwrite the <code>run</code> function in our project’s <code>commands.crawl.CustomCrawlCommand</code> class.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CustomCrawlCommand</span><span class="token punctuation">(</span>Command<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> args<span class="token punctuation">,</span> opts<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UsageError<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token builtin">len</span><span class="token punctuation">(</span>args<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> UsageError<span class="token punctuation">(</span><span class="token string">"running 'scrapy crawl' with more than one spider is no longer supported"</span><span class="token punctuation">)</span>        spname <span class="token operator">=</span> args<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment"># added new code</span>        spider_settings_path <span class="token operator">=</span> self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>getdict<span class="token punctuation">(</span><span class="token string">'SPIDER_SETTINGS'</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">.</span>get<span class="token punctuation">(</span>spname<span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> spider_settings_path <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>settings<span class="token punctuation">.</span>setmodule<span class="token punctuation">(</span>spider_settings_path<span class="token punctuation">,</span> priority<span class="token operator">=</span><span class="token string">'cmdline'</span><span class="token punctuation">)</span>        <span class="token comment"># end</span>                         crawler <span class="token operator">=</span> self<span class="token punctuation">.</span>crawler_process<span class="token punctuation">.</span>create_crawler<span class="token punctuation">(</span><span class="token punctuation">)</span>        spider <span class="token operator">=</span> crawler<span class="token punctuation">.</span>spiders<span class="token punctuation">.</span>create<span class="token punctuation">(</span>spname<span class="token punctuation">,</span> <span class="token operator">**</span>opts<span class="token punctuation">.</span>spargs<span class="token punctuation">)</span>        crawler<span class="token punctuation">.</span>crawl<span class="token punctuation">(</span>spider<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>crawler_process<span class="token punctuation">.</span>start<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>The commented part is new code, others are same as the <code>run</code> function in <code>scrapy.commands.crawl.Command</code> class.</p><p>The Scrapy <code>settings</code> has four priorities: <code>default</code>, <code>command</code>, <code>project</code>, <code>cmdline</code>, the <code>cmdline</code> has a top priority, use it to overwrite default setting items which are in <code>settings.py</code>.</p><p><code>SPIDER_SETTINGS</code> is a setting item in <code>settings.py</code>, it is a dictionary, the key is the spider name, the value is the spider’s custom setting file name.</p><h2 id="Create-common-spiders-and-settings"><a href="#Create-common-spiders-and-settings" class="headerlink" title="Create common spiders and settings"></a>Create common spiders and settings</h2><p><code>tutorial.tutorial.common_spider.CommonSpider</code> is a spider which includes a normal parsing process for a website and some common functions.</p><p><code>settings.py</code> includes common setting items for all spiders, such as <code>LOG_LEVEL</code>, you can overwrite them in a spider custom setting file, such as <code>spider1.py</code> and <code>spider2.py</code> in <code>tutorial.tutorial.spider_settings</code> directory.</p><p><code>common_spider.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CommonSpider</span><span class="token punctuation">(</span>Spider<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""        This is a common spider, including common functions which child spiders can inherit or overwrite    """</span>    name <span class="token operator">=</span> <span class="token string">''</span>    allowed_domains <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># must add "kwargs", otherwise can't run in scrapyd</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>CommonSpider<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_start_urls <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>_start_urls<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'START_URLS'</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> self<span class="token punctuation">.</span>_start_urls<span class="token punctuation">:</span>            <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'no urls to crawl'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_settings</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">from_crawler</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> crawler<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>from_settings<span class="token punctuation">(</span>crawler<span class="token punctuation">.</span>settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">start_requests</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> url <span class="token keyword">in</span> self<span class="token punctuation">.</span>_start_urls<span class="token punctuation">:</span>            <span class="token comment"># must append these hosts, otherwise OffsiteMiddleware will filter them</span>            parsed_url <span class="token operator">=</span> urlparse<span class="token punctuation">.</span>urlparse<span class="token punctuation">(</span>url<span class="token punctuation">)</span>            parsed_url<span class="token punctuation">.</span>hostname <span class="token keyword">and</span> self<span class="token punctuation">.</span>allowed_domains<span class="token punctuation">.</span>append<span class="token punctuation">(</span>parsed_url<span class="token punctuation">.</span>hostname<span class="token punctuation">)</span>            <span class="token comment"># open('file name', 'a+') is different between OS X and Linux, </span>            <span class="token comment"># read an empty filter list from &lt;JOBDIR>/requests.seen when launche the spider on OS X, </span>            <span class="token comment"># be careful "dont_filter"</span>            <span class="token keyword">yield</span> Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span> callback<span class="token operator">=</span>self<span class="token punctuation">.</span>parse<span class="token punctuation">,</span> method<span class="token operator">=</span><span class="token string">'GET'</span><span class="token punctuation">,</span> dont_filter<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'response url: %s, status: %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>response<span class="token punctuation">.</span>url<span class="token punctuation">,</span> response<span class="token punctuation">.</span>status<span class="token punctuation">)</span><span class="token punctuation">,</span> INFO<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>settings.py</code>:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">COMMANDS_MODULE <span class="token operator">=</span> <span class="token string">'commands'</span>SPIDER_SETTINGS <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'spider1'</span><span class="token punctuation">:</span> <span class="token string">'tutorial.spider_settings.spider1'</span><span class="token punctuation">,</span>    <span class="token string">'spider2'</span><span class="token punctuation">:</span> <span class="token string">'tutorial.spider_settings.spider2'</span><span class="token punctuation">,</span><span class="token punctuation">&#125;</span>LOG_LEVEL <span class="token operator">=</span> <span class="token string">'INFO'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Create-multiple-spiders-in-a-project"><a href="#Create-multiple-spiders-in-a-project" class="headerlink" title="Create multiple spiders in a project"></a>Create multiple spiders in a project</h2><h3 id="Spiders-without-custom-parsing-process"><a href="#Spiders-without-custom-parsing-process" class="headerlink" title="Spiders without custom parsing process"></a>Spiders without custom parsing process</h3><p>Like <code>tutorial.tutorial.spiders.spider1.Spider1</code>.</p><p>Spider1’s setting file: <code>spider1.py</code> (in <code>spider_settings</code> directory)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_FILE <span class="token operator">=</span> <span class="token string">'spider1.log'</span>JOBDIR<span class="token operator">=</span><span class="token string">'spider1_job'</span>START_URLS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.bing.com/news'</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spider1’s source file: <code>Spider1.py</code> (in <code>spiders</code> directory)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>common_spider <span class="token keyword">import</span> CommonSpider<span class="token keyword">class</span> <span class="token class-name">Spider1</span><span class="token punctuation">(</span>CommonSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'spider1'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="Spiders-with-custom-parsing-process"><a href="#Spiders-with-custom-parsing-process" class="headerlink" title="Spiders with custom parsing process"></a>Spiders with custom parsing process</h3><p>Like <code>tutorial.tutorial.spiders.spider2.Spider2</code>.</p><p>Spider2’s setting file: <code>spider2.py</code> (in <code>spider_settings</code> directory)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">LOG_FILE <span class="token operator">=</span> <span class="token string">'spider2.log'</span>JOBDIR<span class="token operator">=</span><span class="token string">'spider2_job'</span>START_URLS <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'http://www.bing.com/knows'</span><span class="token punctuation">]</span>TITLE_PATH <span class="token operator">=</span> <span class="token string">'html head title::text'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Spider2’s source file: <code>Spider2.py</code> (in <code>spiders</code> directory)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> scrapy<span class="token punctuation">.</span>log <span class="token keyword">import</span> INFO<span class="token keyword">from</span> <span class="token punctuation">.</span><span class="token punctuation">.</span>common_spider <span class="token keyword">import</span> CommonSpider<span class="token keyword">class</span> <span class="token class-name">Spider2</span><span class="token punctuation">(</span>CommonSpider<span class="token punctuation">)</span><span class="token punctuation">:</span>    name <span class="token operator">=</span> <span class="token string">'spider2'</span>    <span class="token comment"># must add "kwargs", otherwise can't run in scrapyd</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Spider2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span>settings<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_title_path <span class="token operator">=</span> settings<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'TITLE_PATH'</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse_other_info</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        title <span class="token operator">=</span> response<span class="token punctuation">.</span>css<span class="token punctuation">(</span>self<span class="token punctuation">.</span>_title_path<span class="token punctuation">)</span><span class="token punctuation">.</span>extract<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>log<span class="token punctuation">(</span><span class="token string">'title: %s'</span> <span class="token operator">%</span> title<span class="token punctuation">,</span> INFO<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">parse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>parse_other_info<span class="token punctuation">(</span>response<span class="token punctuation">)</span>        <span class="token builtin">super</span><span class="token punctuation">(</span>Spider2<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>parse<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Run-spiders"><a href="#Run-spiders" class="headerlink" title="Run spiders"></a>Run spiders</h2><ol><li>Set <code>PYTHONPATH</code> to <code>/&lt;path&gt;/scrapy_multiple_spiders</code>;</li><li>In <code>/&lt;path&gt;/scrapy_multiple_spiders/tutorial</code>, call <code>scrapy crawl spider1</code> or <code>scrapy crawl spider2</code>, check the log file <code>spider1.log</code> or <code>spider2.log</code>.</li></ol>]]></content>
      
      
      <categories>
          
          <category> Tech </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> Scrapy </tag>
            
            <tag> Crawler </tag>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
